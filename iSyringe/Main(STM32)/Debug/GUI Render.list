
GUI Render.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c58  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000aac0  08007df8  08007df8  00017df8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080128b8  080128b8  00030084  2**0
                  CONTENTS
  4 .ARM          00000008  080128b8  080128b8  000228b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080128c0  080128c0  00030084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080128c0  080128c0  000228c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080128c4  080128c4  000228c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080128c8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004cbc  20000084  0801294c  00030084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004d40  0801294c  00034d40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030084  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000300b4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b953  00000000  00000000  000300f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040c4  00000000  00000000  0004ba4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001770  00000000  00000000  0004fb10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000122d  00000000  00000000  00051280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001967e  00000000  00000000  000524ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d1ef  00000000  00000000  0006bb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00099de2  00000000  00000000  00088d1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006598  00000000  00000000  00122afc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  00129094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000084 	.word	0x20000084
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007de0 	.word	0x08007de0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000088 	.word	0x20000088
 80001dc:	08007de0 	.word	0x08007de0

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__aeabi_d2iz>:
 800097c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000980:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000984:	d215      	bcs.n	80009b2 <__aeabi_d2iz+0x36>
 8000986:	d511      	bpl.n	80009ac <__aeabi_d2iz+0x30>
 8000988:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800098c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000990:	d912      	bls.n	80009b8 <__aeabi_d2iz+0x3c>
 8000992:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000996:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800099a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800099e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009a2:	fa23 f002 	lsr.w	r0, r3, r2
 80009a6:	bf18      	it	ne
 80009a8:	4240      	negne	r0, r0
 80009aa:	4770      	bx	lr
 80009ac:	f04f 0000 	mov.w	r0, #0
 80009b0:	4770      	bx	lr
 80009b2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009b6:	d105      	bne.n	80009c4 <__aeabi_d2iz+0x48>
 80009b8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009bc:	bf08      	it	eq
 80009be:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009c2:	4770      	bx	lr
 80009c4:	f04f 0000 	mov.w	r0, #0
 80009c8:	4770      	bx	lr
 80009ca:	bf00      	nop

080009cc <__aeabi_uldivmod>:
 80009cc:	b953      	cbnz	r3, 80009e4 <__aeabi_uldivmod+0x18>
 80009ce:	b94a      	cbnz	r2, 80009e4 <__aeabi_uldivmod+0x18>
 80009d0:	2900      	cmp	r1, #0
 80009d2:	bf08      	it	eq
 80009d4:	2800      	cmpeq	r0, #0
 80009d6:	bf1c      	itt	ne
 80009d8:	f04f 31ff 	movne.w	r1, #4294967295
 80009dc:	f04f 30ff 	movne.w	r0, #4294967295
 80009e0:	f000 b970 	b.w	8000cc4 <__aeabi_idiv0>
 80009e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009ec:	f000 f806 	bl	80009fc <__udivmoddi4>
 80009f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009f8:	b004      	add	sp, #16
 80009fa:	4770      	bx	lr

080009fc <__udivmoddi4>:
 80009fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a00:	9e08      	ldr	r6, [sp, #32]
 8000a02:	460d      	mov	r5, r1
 8000a04:	4604      	mov	r4, r0
 8000a06:	460f      	mov	r7, r1
 8000a08:	2b00      	cmp	r3, #0
 8000a0a:	d14a      	bne.n	8000aa2 <__udivmoddi4+0xa6>
 8000a0c:	428a      	cmp	r2, r1
 8000a0e:	4694      	mov	ip, r2
 8000a10:	d965      	bls.n	8000ade <__udivmoddi4+0xe2>
 8000a12:	fab2 f382 	clz	r3, r2
 8000a16:	b143      	cbz	r3, 8000a2a <__udivmoddi4+0x2e>
 8000a18:	fa02 fc03 	lsl.w	ip, r2, r3
 8000a1c:	f1c3 0220 	rsb	r2, r3, #32
 8000a20:	409f      	lsls	r7, r3
 8000a22:	fa20 f202 	lsr.w	r2, r0, r2
 8000a26:	4317      	orrs	r7, r2
 8000a28:	409c      	lsls	r4, r3
 8000a2a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000a2e:	fa1f f58c 	uxth.w	r5, ip
 8000a32:	fbb7 f1fe 	udiv	r1, r7, lr
 8000a36:	0c22      	lsrs	r2, r4, #16
 8000a38:	fb0e 7711 	mls	r7, lr, r1, r7
 8000a3c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000a40:	fb01 f005 	mul.w	r0, r1, r5
 8000a44:	4290      	cmp	r0, r2
 8000a46:	d90a      	bls.n	8000a5e <__udivmoddi4+0x62>
 8000a48:	eb1c 0202 	adds.w	r2, ip, r2
 8000a4c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000a50:	f080 811c 	bcs.w	8000c8c <__udivmoddi4+0x290>
 8000a54:	4290      	cmp	r0, r2
 8000a56:	f240 8119 	bls.w	8000c8c <__udivmoddi4+0x290>
 8000a5a:	3902      	subs	r1, #2
 8000a5c:	4462      	add	r2, ip
 8000a5e:	1a12      	subs	r2, r2, r0
 8000a60:	b2a4      	uxth	r4, r4
 8000a62:	fbb2 f0fe 	udiv	r0, r2, lr
 8000a66:	fb0e 2210 	mls	r2, lr, r0, r2
 8000a6a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000a6e:	fb00 f505 	mul.w	r5, r0, r5
 8000a72:	42a5      	cmp	r5, r4
 8000a74:	d90a      	bls.n	8000a8c <__udivmoddi4+0x90>
 8000a76:	eb1c 0404 	adds.w	r4, ip, r4
 8000a7a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a7e:	f080 8107 	bcs.w	8000c90 <__udivmoddi4+0x294>
 8000a82:	42a5      	cmp	r5, r4
 8000a84:	f240 8104 	bls.w	8000c90 <__udivmoddi4+0x294>
 8000a88:	4464      	add	r4, ip
 8000a8a:	3802      	subs	r0, #2
 8000a8c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000a90:	1b64      	subs	r4, r4, r5
 8000a92:	2100      	movs	r1, #0
 8000a94:	b11e      	cbz	r6, 8000a9e <__udivmoddi4+0xa2>
 8000a96:	40dc      	lsrs	r4, r3
 8000a98:	2300      	movs	r3, #0
 8000a9a:	e9c6 4300 	strd	r4, r3, [r6]
 8000a9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa2:	428b      	cmp	r3, r1
 8000aa4:	d908      	bls.n	8000ab8 <__udivmoddi4+0xbc>
 8000aa6:	2e00      	cmp	r6, #0
 8000aa8:	f000 80ed 	beq.w	8000c86 <__udivmoddi4+0x28a>
 8000aac:	2100      	movs	r1, #0
 8000aae:	e9c6 0500 	strd	r0, r5, [r6]
 8000ab2:	4608      	mov	r0, r1
 8000ab4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ab8:	fab3 f183 	clz	r1, r3
 8000abc:	2900      	cmp	r1, #0
 8000abe:	d149      	bne.n	8000b54 <__udivmoddi4+0x158>
 8000ac0:	42ab      	cmp	r3, r5
 8000ac2:	d302      	bcc.n	8000aca <__udivmoddi4+0xce>
 8000ac4:	4282      	cmp	r2, r0
 8000ac6:	f200 80f8 	bhi.w	8000cba <__udivmoddi4+0x2be>
 8000aca:	1a84      	subs	r4, r0, r2
 8000acc:	eb65 0203 	sbc.w	r2, r5, r3
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	4617      	mov	r7, r2
 8000ad4:	2e00      	cmp	r6, #0
 8000ad6:	d0e2      	beq.n	8000a9e <__udivmoddi4+0xa2>
 8000ad8:	e9c6 4700 	strd	r4, r7, [r6]
 8000adc:	e7df      	b.n	8000a9e <__udivmoddi4+0xa2>
 8000ade:	b902      	cbnz	r2, 8000ae2 <__udivmoddi4+0xe6>
 8000ae0:	deff      	udf	#255	; 0xff
 8000ae2:	fab2 f382 	clz	r3, r2
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8090 	bne.w	8000c0c <__udivmoddi4+0x210>
 8000aec:	1a8a      	subs	r2, r1, r2
 8000aee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000af2:	fa1f fe8c 	uxth.w	lr, ip
 8000af6:	2101      	movs	r1, #1
 8000af8:	fbb2 f5f7 	udiv	r5, r2, r7
 8000afc:	fb07 2015 	mls	r0, r7, r5, r2
 8000b00:	0c22      	lsrs	r2, r4, #16
 8000b02:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000b06:	fb0e f005 	mul.w	r0, lr, r5
 8000b0a:	4290      	cmp	r0, r2
 8000b0c:	d908      	bls.n	8000b20 <__udivmoddi4+0x124>
 8000b0e:	eb1c 0202 	adds.w	r2, ip, r2
 8000b12:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b16:	d202      	bcs.n	8000b1e <__udivmoddi4+0x122>
 8000b18:	4290      	cmp	r0, r2
 8000b1a:	f200 80cb 	bhi.w	8000cb4 <__udivmoddi4+0x2b8>
 8000b1e:	4645      	mov	r5, r8
 8000b20:	1a12      	subs	r2, r2, r0
 8000b22:	b2a4      	uxth	r4, r4
 8000b24:	fbb2 f0f7 	udiv	r0, r2, r7
 8000b28:	fb07 2210 	mls	r2, r7, r0, r2
 8000b2c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b30:	fb0e fe00 	mul.w	lr, lr, r0
 8000b34:	45a6      	cmp	lr, r4
 8000b36:	d908      	bls.n	8000b4a <__udivmoddi4+0x14e>
 8000b38:	eb1c 0404 	adds.w	r4, ip, r4
 8000b3c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000b40:	d202      	bcs.n	8000b48 <__udivmoddi4+0x14c>
 8000b42:	45a6      	cmp	lr, r4
 8000b44:	f200 80bb 	bhi.w	8000cbe <__udivmoddi4+0x2c2>
 8000b48:	4610      	mov	r0, r2
 8000b4a:	eba4 040e 	sub.w	r4, r4, lr
 8000b4e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000b52:	e79f      	b.n	8000a94 <__udivmoddi4+0x98>
 8000b54:	f1c1 0720 	rsb	r7, r1, #32
 8000b58:	408b      	lsls	r3, r1
 8000b5a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b5e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b62:	fa05 f401 	lsl.w	r4, r5, r1
 8000b66:	fa20 f307 	lsr.w	r3, r0, r7
 8000b6a:	40fd      	lsrs	r5, r7
 8000b6c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b70:	4323      	orrs	r3, r4
 8000b72:	fbb5 f8f9 	udiv	r8, r5, r9
 8000b76:	fa1f fe8c 	uxth.w	lr, ip
 8000b7a:	fb09 5518 	mls	r5, r9, r8, r5
 8000b7e:	0c1c      	lsrs	r4, r3, #16
 8000b80:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000b84:	fb08 f50e 	mul.w	r5, r8, lr
 8000b88:	42a5      	cmp	r5, r4
 8000b8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000b8e:	fa00 f001 	lsl.w	r0, r0, r1
 8000b92:	d90b      	bls.n	8000bac <__udivmoddi4+0x1b0>
 8000b94:	eb1c 0404 	adds.w	r4, ip, r4
 8000b98:	f108 3aff 	add.w	sl, r8, #4294967295
 8000b9c:	f080 8088 	bcs.w	8000cb0 <__udivmoddi4+0x2b4>
 8000ba0:	42a5      	cmp	r5, r4
 8000ba2:	f240 8085 	bls.w	8000cb0 <__udivmoddi4+0x2b4>
 8000ba6:	f1a8 0802 	sub.w	r8, r8, #2
 8000baa:	4464      	add	r4, ip
 8000bac:	1b64      	subs	r4, r4, r5
 8000bae:	b29d      	uxth	r5, r3
 8000bb0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000bb4:	fb09 4413 	mls	r4, r9, r3, r4
 8000bb8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000bbc:	fb03 fe0e 	mul.w	lr, r3, lr
 8000bc0:	45a6      	cmp	lr, r4
 8000bc2:	d908      	bls.n	8000bd6 <__udivmoddi4+0x1da>
 8000bc4:	eb1c 0404 	adds.w	r4, ip, r4
 8000bc8:	f103 35ff 	add.w	r5, r3, #4294967295
 8000bcc:	d26c      	bcs.n	8000ca8 <__udivmoddi4+0x2ac>
 8000bce:	45a6      	cmp	lr, r4
 8000bd0:	d96a      	bls.n	8000ca8 <__udivmoddi4+0x2ac>
 8000bd2:	3b02      	subs	r3, #2
 8000bd4:	4464      	add	r4, ip
 8000bd6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000bda:	fba3 9502 	umull	r9, r5, r3, r2
 8000bde:	eba4 040e 	sub.w	r4, r4, lr
 8000be2:	42ac      	cmp	r4, r5
 8000be4:	46c8      	mov	r8, r9
 8000be6:	46ae      	mov	lr, r5
 8000be8:	d356      	bcc.n	8000c98 <__udivmoddi4+0x29c>
 8000bea:	d053      	beq.n	8000c94 <__udivmoddi4+0x298>
 8000bec:	b156      	cbz	r6, 8000c04 <__udivmoddi4+0x208>
 8000bee:	ebb0 0208 	subs.w	r2, r0, r8
 8000bf2:	eb64 040e 	sbc.w	r4, r4, lr
 8000bf6:	fa04 f707 	lsl.w	r7, r4, r7
 8000bfa:	40ca      	lsrs	r2, r1
 8000bfc:	40cc      	lsrs	r4, r1
 8000bfe:	4317      	orrs	r7, r2
 8000c00:	e9c6 7400 	strd	r7, r4, [r6]
 8000c04:	4618      	mov	r0, r3
 8000c06:	2100      	movs	r1, #0
 8000c08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0c:	f1c3 0120 	rsb	r1, r3, #32
 8000c10:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c14:	fa20 f201 	lsr.w	r2, r0, r1
 8000c18:	fa25 f101 	lsr.w	r1, r5, r1
 8000c1c:	409d      	lsls	r5, r3
 8000c1e:	432a      	orrs	r2, r5
 8000c20:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c2c:	fb07 1510 	mls	r5, r7, r0, r1
 8000c30:	0c11      	lsrs	r1, r2, #16
 8000c32:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000c36:	fb00 f50e 	mul.w	r5, r0, lr
 8000c3a:	428d      	cmp	r5, r1
 8000c3c:	fa04 f403 	lsl.w	r4, r4, r3
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x258>
 8000c42:	eb1c 0101 	adds.w	r1, ip, r1
 8000c46:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c4a:	d22f      	bcs.n	8000cac <__udivmoddi4+0x2b0>
 8000c4c:	428d      	cmp	r5, r1
 8000c4e:	d92d      	bls.n	8000cac <__udivmoddi4+0x2b0>
 8000c50:	3802      	subs	r0, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1b49      	subs	r1, r1, r5
 8000c56:	b292      	uxth	r2, r2
 8000c58:	fbb1 f5f7 	udiv	r5, r1, r7
 8000c5c:	fb07 1115 	mls	r1, r7, r5, r1
 8000c60:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000c64:	fb05 f10e 	mul.w	r1, r5, lr
 8000c68:	4291      	cmp	r1, r2
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x282>
 8000c6c:	eb1c 0202 	adds.w	r2, ip, r2
 8000c70:	f105 38ff 	add.w	r8, r5, #4294967295
 8000c74:	d216      	bcs.n	8000ca4 <__udivmoddi4+0x2a8>
 8000c76:	4291      	cmp	r1, r2
 8000c78:	d914      	bls.n	8000ca4 <__udivmoddi4+0x2a8>
 8000c7a:	3d02      	subs	r5, #2
 8000c7c:	4462      	add	r2, ip
 8000c7e:	1a52      	subs	r2, r2, r1
 8000c80:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000c84:	e738      	b.n	8000af8 <__udivmoddi4+0xfc>
 8000c86:	4631      	mov	r1, r6
 8000c88:	4630      	mov	r0, r6
 8000c8a:	e708      	b.n	8000a9e <__udivmoddi4+0xa2>
 8000c8c:	4639      	mov	r1, r7
 8000c8e:	e6e6      	b.n	8000a5e <__udivmoddi4+0x62>
 8000c90:	4610      	mov	r0, r2
 8000c92:	e6fb      	b.n	8000a8c <__udivmoddi4+0x90>
 8000c94:	4548      	cmp	r0, r9
 8000c96:	d2a9      	bcs.n	8000bec <__udivmoddi4+0x1f0>
 8000c98:	ebb9 0802 	subs.w	r8, r9, r2
 8000c9c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	e7a3      	b.n	8000bec <__udivmoddi4+0x1f0>
 8000ca4:	4645      	mov	r5, r8
 8000ca6:	e7ea      	b.n	8000c7e <__udivmoddi4+0x282>
 8000ca8:	462b      	mov	r3, r5
 8000caa:	e794      	b.n	8000bd6 <__udivmoddi4+0x1da>
 8000cac:	4640      	mov	r0, r8
 8000cae:	e7d1      	b.n	8000c54 <__udivmoddi4+0x258>
 8000cb0:	46d0      	mov	r8, sl
 8000cb2:	e77b      	b.n	8000bac <__udivmoddi4+0x1b0>
 8000cb4:	3d02      	subs	r5, #2
 8000cb6:	4462      	add	r2, ip
 8000cb8:	e732      	b.n	8000b20 <__udivmoddi4+0x124>
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e70a      	b.n	8000ad4 <__udivmoddi4+0xd8>
 8000cbe:	4464      	add	r4, ip
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	e742      	b.n	8000b4a <__udivmoddi4+0x14e>

08000cc4 <__aeabi_idiv0>:
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <KeyPad_Init>:

KeyPad_t	KeyPad;

//#############################################################################################
void	KeyPad_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef	gpio;
  KeyPad.ColumnSize = sizeof(_KEYPAD_COLUMN_GPIO_PIN) / 2;
 8000cce:	4b2a      	ldr	r3, [pc, #168]	; (8000d78 <KeyPad_Init+0xb0>)
 8000cd0:	2204      	movs	r2, #4
 8000cd2:	701a      	strb	r2, [r3, #0]
  KeyPad.RowSize = sizeof(_KEYPAD_ROW_GPIO_PIN) / 2;
 8000cd4:	4b28      	ldr	r3, [pc, #160]	; (8000d78 <KeyPad_Init+0xb0>)
 8000cd6:	2204      	movs	r2, #4
 8000cd8:	705a      	strb	r2, [r3, #1]
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	75fb      	strb	r3, [r7, #23]
 8000cde:	e022      	b.n	8000d26 <KeyPad_Init+0x5e>
  {
    gpio.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_COLUMN_GPIO_PIN[i];
 8000cec:	7dfb      	ldrb	r3, [r7, #23]
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <KeyPad_Init+0xb4>)
 8000cf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000cf4:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], &gpio);
 8000cf6:	7dfb      	ldrb	r3, [r7, #23]
 8000cf8:	4a21      	ldr	r2, [pc, #132]	; (8000d80 <KeyPad_Init+0xb8>)
 8000cfa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cfe:	463a      	mov	r2, r7
 8000d00:	4611      	mov	r1, r2
 8000d02:	4618      	mov	r0, r3
 8000d04:	f002 f994 	bl	8003030 <HAL_GPIO_Init>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	4a1d      	ldr	r2, [pc, #116]	; (8000d80 <KeyPad_Init+0xb8>)
 8000d0c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000d10:	7dfb      	ldrb	r3, [r7, #23]
 8000d12:	4a1a      	ldr	r2, [pc, #104]	; (8000d7c <KeyPad_Init+0xb4>)
 8000d14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	f002 fb24 	bl	8003368 <HAL_GPIO_WritePin>
  for(uint8_t	i=0 ; i<KeyPad.ColumnSize ; i++)
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
 8000d22:	3301      	adds	r3, #1
 8000d24:	75fb      	strb	r3, [r7, #23]
 8000d26:	4b14      	ldr	r3, [pc, #80]	; (8000d78 <KeyPad_Init+0xb0>)
 8000d28:	781b      	ldrb	r3, [r3, #0]
 8000d2a:	7dfa      	ldrb	r2, [r7, #23]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d3d7      	bcc.n	8000ce0 <KeyPad_Init+0x18>
  }
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000d30:	2300      	movs	r3, #0
 8000d32:	75bb      	strb	r3, [r7, #22]
 8000d34:	e016      	b.n	8000d64 <KeyPad_Init+0x9c>
  {
    gpio.Mode = GPIO_MODE_INPUT;
 8000d36:	2300      	movs	r3, #0
 8000d38:	607b      	str	r3, [r7, #4]
    gpio.Pull = GPIO_PULLUP;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
    gpio.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
    gpio.Pin = _KEYPAD_ROW_GPIO_PIN[i];
 8000d42:	7dbb      	ldrb	r3, [r7, #22]
 8000d44:	4a0f      	ldr	r2, [pc, #60]	; (8000d84 <KeyPad_Init+0xbc>)
 8000d46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000d4a:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[i], &gpio);		
 8000d4c:	7dbb      	ldrb	r3, [r7, #22]
 8000d4e:	4a0e      	ldr	r2, [pc, #56]	; (8000d88 <KeyPad_Init+0xc0>)
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	463a      	mov	r2, r7
 8000d56:	4611      	mov	r1, r2
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f002 f969 	bl	8003030 <HAL_GPIO_Init>
  for(uint8_t	i=0 ; i<KeyPad.RowSize ; i++)
 8000d5e:	7dbb      	ldrb	r3, [r7, #22]
 8000d60:	3301      	adds	r3, #1
 8000d62:	75bb      	strb	r3, [r7, #22]
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <KeyPad_Init+0xb0>)
 8000d66:	785b      	ldrb	r3, [r3, #1]
 8000d68:	7dba      	ldrb	r2, [r7, #22]
 8000d6a:	429a      	cmp	r2, r3
 8000d6c:	d3e3      	bcc.n	8000d36 <KeyPad_Init+0x6e>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	bf00      	nop
 8000d72:	3718      	adds	r7, #24
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	200000a0 	.word	0x200000a0
 8000d7c:	08007f40 	.word	0x08007f40
 8000d80:	20000000 	.word	0x20000000
 8000d84:	08007f48 	.word	0x08007f48
 8000d88:	20000010 	.word	0x20000010

08000d8c <KeyPad_Scan>:
//#############################################################################################
uint16_t	KeyPad_Scan(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b082      	sub	sp, #8
 8000d90:	af00      	add	r7, sp, #0
  uint16_t  key=0;
 8000d92:	2300      	movs	r3, #0
 8000d94:	807b      	strh	r3, [r7, #2]
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000d96:	2300      	movs	r3, #0
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e07e      	b.n	8000e9a <KeyPad_Scan+0x10e>
  {
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	71bb      	strb	r3, [r7, #6]
 8000da0:	e00e      	b.n	8000dc0 <KeyPad_Scan+0x34>
      HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[i], _KEYPAD_COLUMN_GPIO_PIN[i], GPIO_PIN_SET);
 8000da2:	79bb      	ldrb	r3, [r7, #6]
 8000da4:	4a42      	ldr	r2, [pc, #264]	; (8000eb0 <KeyPad_Scan+0x124>)
 8000da6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000daa:	79bb      	ldrb	r3, [r7, #6]
 8000dac:	4a41      	ldr	r2, [pc, #260]	; (8000eb4 <KeyPad_Scan+0x128>)
 8000dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000db2:	2201      	movs	r2, #1
 8000db4:	4619      	mov	r1, r3
 8000db6:	f002 fad7 	bl	8003368 <HAL_GPIO_WritePin>
    for(uint8_t i=0 ; i<KeyPad.ColumnSize ; i++)
 8000dba:	79bb      	ldrb	r3, [r7, #6]
 8000dbc:	3301      	adds	r3, #1
 8000dbe:	71bb      	strb	r3, [r7, #6]
 8000dc0:	4b3d      	ldr	r3, [pc, #244]	; (8000eb8 <KeyPad_Scan+0x12c>)
 8000dc2:	781b      	ldrb	r3, [r3, #0]
 8000dc4:	79ba      	ldrb	r2, [r7, #6]
 8000dc6:	429a      	cmp	r2, r3
 8000dc8:	d3eb      	bcc.n	8000da2 <KeyPad_Scan+0x16>
    HAL_GPIO_WritePin((GPIO_TypeDef*)_KEYPAD_COLUMN_GPIO_PORT[c], _KEYPAD_COLUMN_GPIO_PIN[c], GPIO_PIN_RESET);
 8000dca:	79fb      	ldrb	r3, [r7, #7]
 8000dcc:	4a38      	ldr	r2, [pc, #224]	; (8000eb0 <KeyPad_Scan+0x124>)
 8000dce:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000dd2:	79fb      	ldrb	r3, [r7, #7]
 8000dd4:	4a37      	ldr	r2, [pc, #220]	; (8000eb4 <KeyPad_Scan+0x128>)
 8000dd6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f002 fac3 	bl	8003368 <HAL_GPIO_WritePin>
    _KEYPAD_DELAY(5);
 8000de2:	2005      	movs	r0, #5
 8000de4:	f004 fa76 	bl	80052d4 <osDelay>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000de8:	2300      	movs	r3, #0
 8000dea:	717b      	strb	r3, [r7, #5]
 8000dec:	e04d      	b.n	8000e8a <KeyPad_Scan+0xfe>
    {
      if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000dee:	797b      	ldrb	r3, [r7, #5]
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <KeyPad_Scan+0x130>)
 8000df2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000df6:	797b      	ldrb	r3, [r7, #5]
 8000df8:	4931      	ldr	r1, [pc, #196]	; (8000ec0 <KeyPad_Scan+0x134>)
 8000dfa:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000dfe:	4619      	mov	r1, r3
 8000e00:	4610      	mov	r0, r2
 8000e02:	f002 fa99 	bl	8003338 <HAL_GPIO_ReadPin>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d13b      	bne.n	8000e84 <KeyPad_Scan+0xf8>
      {
        _KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);
 8000e0c:	2014      	movs	r0, #20
 8000e0e:	f004 fa61 	bl	80052d4 <osDelay>
        if(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000e12:	797b      	ldrb	r3, [r7, #5]
 8000e14:	4a29      	ldr	r2, [pc, #164]	; (8000ebc <KeyPad_Scan+0x130>)
 8000e16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e1a:	797b      	ldrb	r3, [r7, #5]
 8000e1c:	4928      	ldr	r1, [pc, #160]	; (8000ec0 <KeyPad_Scan+0x134>)
 8000e1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f002 fa87 	bl	8003338 <HAL_GPIO_ReadPin>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d129      	bne.n	8000e84 <KeyPad_Scan+0xf8>
        {
          key |= 1<<c;					
 8000e30:	79fb      	ldrb	r3, [r7, #7]
 8000e32:	2201      	movs	r2, #1
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	b21a      	sxth	r2, r3
 8000e3a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	b21b      	sxth	r3, r3
 8000e42:	807b      	strh	r3, [r7, #2]
          key |= 1<<(r+8);
 8000e44:	797b      	ldrb	r3, [r7, #5]
 8000e46:	3308      	adds	r3, #8
 8000e48:	2201      	movs	r2, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	b21a      	sxth	r2, r3
 8000e50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	b21b      	sxth	r3, r3
 8000e58:	807b      	strh	r3, [r7, #2]
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000e5a:	e002      	b.n	8000e62 <KeyPad_Scan+0xd6>
            _KEYPAD_DELAY(5);
 8000e5c:	2005      	movs	r0, #5
 8000e5e:	f004 fa39 	bl	80052d4 <osDelay>
          while(HAL_GPIO_ReadPin((GPIO_TypeDef*)_KEYPAD_ROW_GPIO_PORT[r], _KEYPAD_ROW_GPIO_PIN[r]) == GPIO_PIN_RESET)
 8000e62:	797b      	ldrb	r3, [r7, #5]
 8000e64:	4a15      	ldr	r2, [pc, #84]	; (8000ebc <KeyPad_Scan+0x130>)
 8000e66:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000e6a:	797b      	ldrb	r3, [r7, #5]
 8000e6c:	4914      	ldr	r1, [pc, #80]	; (8000ec0 <KeyPad_Scan+0x134>)
 8000e6e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000e72:	4619      	mov	r1, r3
 8000e74:	4610      	mov	r0, r2
 8000e76:	f002 fa5f 	bl	8003338 <HAL_GPIO_ReadPin>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d0ed      	beq.n	8000e5c <KeyPad_Scan+0xd0>
          return key;
 8000e80:	887b      	ldrh	r3, [r7, #2]
 8000e82:	e011      	b.n	8000ea8 <KeyPad_Scan+0x11c>
    for(uint8_t r=0 ; r<KeyPad.RowSize ; r++)
 8000e84:	797b      	ldrb	r3, [r7, #5]
 8000e86:	3301      	adds	r3, #1
 8000e88:	717b      	strb	r3, [r7, #5]
 8000e8a:	4b0b      	ldr	r3, [pc, #44]	; (8000eb8 <KeyPad_Scan+0x12c>)
 8000e8c:	785b      	ldrb	r3, [r3, #1]
 8000e8e:	797a      	ldrb	r2, [r7, #5]
 8000e90:	429a      	cmp	r2, r3
 8000e92:	d3ac      	bcc.n	8000dee <KeyPad_Scan+0x62>
  for(uint8_t c=0 ; c<KeyPad.ColumnSize ; c++)
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	3301      	adds	r3, #1
 8000e98:	71fb      	strb	r3, [r7, #7]
 8000e9a:	4b07      	ldr	r3, [pc, #28]	; (8000eb8 <KeyPad_Scan+0x12c>)
 8000e9c:	781b      	ldrb	r3, [r3, #0]
 8000e9e:	79fa      	ldrb	r2, [r7, #7]
 8000ea0:	429a      	cmp	r2, r3
 8000ea2:	f4ff af7b 	bcc.w	8000d9c <KeyPad_Scan+0x10>
        }
      }			
    }		
  }
  return key;
 8000ea6:	887b      	ldrh	r3, [r7, #2]
}
 8000ea8:	4618      	mov	r0, r3
 8000eaa:	3708      	adds	r7, #8
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	20000000 	.word	0x20000000
 8000eb4:	08007f40 	.word	0x08007f40
 8000eb8:	200000a0 	.word	0x200000a0
 8000ebc:	20000010 	.word	0x20000010
 8000ec0:	08007f48 	.word	0x08007f48

08000ec4 <KeyPad_WaitForKey>:
//#############################################################################################
uint16_t	KeyPad_WaitForKey(uint32_t  Timeout_ms)
{	
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  uint16_t  keyRead;
  while(Timeout_ms==0)
 8000ecc:	e00e      	b.n	8000eec <KeyPad_WaitForKey+0x28>
  {
    keyRead = KeyPad_Scan();
 8000ece:	f7ff ff5d 	bl	8000d8c <KeyPad_Scan>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000ed6:	897b      	ldrh	r3, [r7, #10]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d004      	beq.n	8000ee6 <KeyPad_WaitForKey+0x22>
		{
			KeyPad.LastKey = keyRead;
 8000edc:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <KeyPad_WaitForKey+0x74>)
 8000ede:	897b      	ldrh	r3, [r7, #10]
 8000ee0:	8053      	strh	r3, [r2, #2]
			return keyRead;	
 8000ee2:	897b      	ldrh	r3, [r7, #10]
 8000ee4:	e024      	b.n	8000f30 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);	
 8000ee6:	2014      	movs	r0, #20
 8000ee8:	f004 f9f4 	bl	80052d4 <osDelay>
  while(Timeout_ms==0)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d0ed      	beq.n	8000ece <KeyPad_WaitForKey+0xa>
	}
	uint32_t	StartTime = HAL_GetTick();
 8000ef2:	f001 ff8b 	bl	8002e0c <HAL_GetTick>
 8000ef6:	60f8      	str	r0, [r7, #12]
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000ef8:	e00e      	b.n	8000f18 <KeyPad_WaitForKey+0x54>
	{
		keyRead = KeyPad_Scan();
 8000efa:	f7ff ff47 	bl	8000d8c <KeyPad_Scan>
 8000efe:	4603      	mov	r3, r0
 8000f00:	817b      	strh	r3, [r7, #10]
		if(keyRead!=0)
 8000f02:	897b      	ldrh	r3, [r7, #10]
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d004      	beq.n	8000f12 <KeyPad_WaitForKey+0x4e>
		{
			KeyPad.LastKey = keyRead;
 8000f08:	4a0b      	ldr	r2, [pc, #44]	; (8000f38 <KeyPad_WaitForKey+0x74>)
 8000f0a:	897b      	ldrh	r3, [r7, #10]
 8000f0c:	8053      	strh	r3, [r2, #2]
			return keyRead;	
 8000f0e:	897b      	ldrh	r3, [r7, #10]
 8000f10:	e00e      	b.n	8000f30 <KeyPad_WaitForKey+0x6c>
		}
		_KEYPAD_DELAY(_KEYPAD_DEBOUNCE_TIME_MS);	
 8000f12:	2014      	movs	r0, #20
 8000f14:	f004 f9de 	bl	80052d4 <osDelay>
	while(HAL_GetTick()-StartTime < Timeout_ms)
 8000f18:	f001 ff78 	bl	8002e0c <HAL_GetTick>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	1ad3      	subs	r3, r2, r3
 8000f22:	687a      	ldr	r2, [r7, #4]
 8000f24:	429a      	cmp	r2, r3
 8000f26:	d8e8      	bhi.n	8000efa <KeyPad_WaitForKey+0x36>
	}
	KeyPad.LastKey=0;
 8000f28:	4b03      	ldr	r3, [pc, #12]	; (8000f38 <KeyPad_WaitForKey+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	805a      	strh	r2, [r3, #2]
	return 0;
 8000f2e:	2300      	movs	r3, #0
}
 8000f30:	4618      	mov	r0, r3
 8000f32:	3710      	adds	r7, #16
 8000f34:	46bd      	mov	sp, r7
 8000f36:	bd80      	pop	{r7, pc}
 8000f38:	200000a0 	.word	0x200000a0

08000f3c <KeyPad_WaitForKeyGetChar>:
//#############################################################################################
char	KeyPad_WaitForKeyGetChar(uint32_t	Timeout_ms)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  switch(KeyPad_WaitForKey(Timeout_ms))
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ffbd 	bl	8000ec4 <KeyPad_WaitForKey>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	f640 0208 	movw	r2, #2056	; 0x808
 8000f50:	4293      	cmp	r3, r2
 8000f52:	f300 809f 	bgt.w	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f56:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000f5a:	dc1a      	bgt.n	8000f92 <KeyPad_WaitForKeyGetChar+0x56>
 8000f5c:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8000f60:	f300 8098 	bgt.w	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f68:	dc2a      	bgt.n	8000fc0 <KeyPad_WaitForKeyGetChar+0x84>
 8000f6a:	f5b3 7f02 	cmp.w	r3, #520	; 0x208
 8000f6e:	f300 8091 	bgt.w	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f72:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f76:	dc3b      	bgt.n	8000ff0 <KeyPad_WaitForKeyGetChar+0xb4>
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d069      	beq.n	8001050 <KeyPad_WaitForKeyGetChar+0x114>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	f2c0 8089 	blt.w	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f82:	f5b3 7f84 	cmp.w	r3, #264	; 0x108
 8000f86:	f300 8085 	bgt.w	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f8e:	dc47      	bgt.n	8001020 <KeyPad_WaitForKeyGetChar+0xe4>
 8000f90:	e080      	b.n	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f92:	f6a3 0301 	subw	r3, r3, #2049	; 0x801
 8000f96:	2b07      	cmp	r3, #7
 8000f98:	d87c      	bhi.n	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000f9a:	a201      	add	r2, pc, #4	; (adr r2, 8000fa0 <KeyPad_WaitForKeyGetChar+0x64>)
 8000f9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fa0:	08001061 	.word	0x08001061
 8000fa4:	08001071 	.word	0x08001071
 8000fa8:	08001095 	.word	0x08001095
 8000fac:	08001081 	.word	0x08001081
 8000fb0:	08001095 	.word	0x08001095
 8000fb4:	08001095 	.word	0x08001095
 8000fb8:	08001095 	.word	0x08001095
 8000fbc:	08001091 	.word	0x08001091
 8000fc0:	f2a3 4301 	subw	r3, r3, #1025	; 0x401
 8000fc4:	2b07      	cmp	r3, #7
 8000fc6:	d865      	bhi.n	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000fc8:	a201      	add	r2, pc, #4	; (adr r2, 8000fd0 <KeyPad_WaitForKeyGetChar+0x94>)
 8000fca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000fce:	bf00      	nop
 8000fd0:	0800105d 	.word	0x0800105d
 8000fd4:	0800106d 	.word	0x0800106d
 8000fd8:	08001095 	.word	0x08001095
 8000fdc:	0800107d 	.word	0x0800107d
 8000fe0:	08001095 	.word	0x08001095
 8000fe4:	08001095 	.word	0x08001095
 8000fe8:	08001095 	.word	0x08001095
 8000fec:	0800108d 	.word	0x0800108d
 8000ff0:	f2a3 2301 	subw	r3, r3, #513	; 0x201
 8000ff4:	2b07      	cmp	r3, #7
 8000ff6:	d84d      	bhi.n	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8000ff8:	a201      	add	r2, pc, #4	; (adr r2, 8001000 <KeyPad_WaitForKeyGetChar+0xc4>)
 8000ffa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ffe:	bf00      	nop
 8001000:	08001059 	.word	0x08001059
 8001004:	08001069 	.word	0x08001069
 8001008:	08001095 	.word	0x08001095
 800100c:	08001079 	.word	0x08001079
 8001010:	08001095 	.word	0x08001095
 8001014:	08001095 	.word	0x08001095
 8001018:	08001095 	.word	0x08001095
 800101c:	08001089 	.word	0x08001089
 8001020:	f2a3 1301 	subw	r3, r3, #257	; 0x101
 8001024:	2b07      	cmp	r3, #7
 8001026:	d835      	bhi.n	8001094 <KeyPad_WaitForKeyGetChar+0x158>
 8001028:	a201      	add	r2, pc, #4	; (adr r2, 8001030 <KeyPad_WaitForKeyGetChar+0xf4>)
 800102a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800102e:	bf00      	nop
 8001030:	08001055 	.word	0x08001055
 8001034:	08001065 	.word	0x08001065
 8001038:	08001095 	.word	0x08001095
 800103c:	08001075 	.word	0x08001075
 8001040:	08001095 	.word	0x08001095
 8001044:	08001095 	.word	0x08001095
 8001048:	08001095 	.word	0x08001095
 800104c:	08001085 	.word	0x08001085
  {
    case 0x0000:
      return 0;
 8001050:	2300      	movs	r3, #0
 8001052:	e020      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0101:
			return '1';
 8001054:	2331      	movs	r3, #49	; 0x31
 8001056:	e01e      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0201:
			return '2';
 8001058:	2332      	movs	r3, #50	; 0x32
 800105a:	e01c      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0401:
			return '3';
 800105c:	2333      	movs	r3, #51	; 0x33
 800105e:	e01a      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0801:
			return 'A';
 8001060:	2341      	movs	r3, #65	; 0x41
 8001062:	e018      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0102:
			return '4';
 8001064:	2334      	movs	r3, #52	; 0x34
 8001066:	e016      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0202:
			return '5';
 8001068:	2335      	movs	r3, #53	; 0x35
 800106a:	e014      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0402:
			return '6';
 800106c:	2336      	movs	r3, #54	; 0x36
 800106e:	e012      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0802:
			return 'B';
 8001070:	2342      	movs	r3, #66	; 0x42
 8001072:	e010      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0104:
			return '7';
 8001074:	2337      	movs	r3, #55	; 0x37
 8001076:	e00e      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0204:
			return '8';		
 8001078:	2338      	movs	r3, #56	; 0x38
 800107a:	e00c      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0404:
			return '9';
 800107c:	2339      	movs	r3, #57	; 0x39
 800107e:	e00a      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0804:
			return 'C';
 8001080:	2343      	movs	r3, #67	; 0x43
 8001082:	e008      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0108:
			return '*';				
 8001084:	232a      	movs	r3, #42	; 0x2a
 8001086:	e006      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0208:
			return '0';				
 8001088:	2330      	movs	r3, #48	; 0x30
 800108a:	e004      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0408:
			return '#';
 800108c:	2323      	movs	r3, #35	; 0x23
 800108e:	e002      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		case 0x0808:
			return 'D';
 8001090:	2344      	movs	r3, #68	; 0x44
 8001092:	e000      	b.n	8001096 <KeyPad_WaitForKeyGetChar+0x15a>
		
		default:
			return 0;		
 8001094:	2300      	movs	r3, #0
	}	
}
 8001096:	4618      	mov	r0, r3
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop

080010a0 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of GUI_RENDER */
  GUI_RENDERHandle = osThreadNew(gui_render, NULL, &GUI_RENDER_attributes);
 80010a4:	4a14      	ldr	r2, [pc, #80]	; (80010f8 <MX_FREERTOS_Init+0x58>)
 80010a6:	2100      	movs	r1, #0
 80010a8:	4814      	ldr	r0, [pc, #80]	; (80010fc <MX_FREERTOS_Init+0x5c>)
 80010aa:	f004 f881 	bl	80051b0 <osThreadNew>
 80010ae:	4603      	mov	r3, r0
 80010b0:	4a13      	ldr	r2, [pc, #76]	; (8001100 <MX_FREERTOS_Init+0x60>)
 80010b2:	6013      	str	r3, [r2, #0]

  /* creation of Buzzer */
  BuzzerHandle = osThreadNew(buzzer, NULL, &Buzzer_attributes);
 80010b4:	4a13      	ldr	r2, [pc, #76]	; (8001104 <MX_FREERTOS_Init+0x64>)
 80010b6:	2100      	movs	r1, #0
 80010b8:	4813      	ldr	r0, [pc, #76]	; (8001108 <MX_FREERTOS_Init+0x68>)
 80010ba:	f004 f879 	bl	80051b0 <osThreadNew>
 80010be:	4603      	mov	r3, r0
 80010c0:	4a12      	ldr	r2, [pc, #72]	; (800110c <MX_FREERTOS_Init+0x6c>)
 80010c2:	6013      	str	r3, [r2, #0]

  /* creation of alarmlight */
  alarmlightHandle = osThreadNew(OrangeAlarmLight, NULL, &alarmlight_attributes);
 80010c4:	4a12      	ldr	r2, [pc, #72]	; (8001110 <MX_FREERTOS_Init+0x70>)
 80010c6:	2100      	movs	r1, #0
 80010c8:	4812      	ldr	r0, [pc, #72]	; (8001114 <MX_FREERTOS_Init+0x74>)
 80010ca:	f004 f871 	bl	80051b0 <osThreadNew>
 80010ce:	4603      	mov	r3, r0
 80010d0:	4a11      	ldr	r2, [pc, #68]	; (8001118 <MX_FREERTOS_Init+0x78>)
 80010d2:	6013      	str	r3, [r2, #0]

  /* creation of wifi */
  wifiHandle = osThreadNew(WiFi, NULL, &wifi_attributes);
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <MX_FREERTOS_Init+0x7c>)
 80010d6:	2100      	movs	r1, #0
 80010d8:	4811      	ldr	r0, [pc, #68]	; (8001120 <MX_FREERTOS_Init+0x80>)
 80010da:	f004 f869 	bl	80051b0 <osThreadNew>
 80010de:	4603      	mov	r3, r0
 80010e0:	4a10      	ldr	r2, [pc, #64]	; (8001124 <MX_FREERTOS_Init+0x84>)
 80010e2:	6013      	str	r3, [r2, #0]

  /* creation of emergencystop */
  emergencystopHandle = osThreadNew(EmergencyStop, NULL, &emergencystop_attributes);
 80010e4:	4a10      	ldr	r2, [pc, #64]	; (8001128 <MX_FREERTOS_Init+0x88>)
 80010e6:	2100      	movs	r1, #0
 80010e8:	4810      	ldr	r0, [pc, #64]	; (800112c <MX_FREERTOS_Init+0x8c>)
 80010ea:	f004 f861 	bl	80051b0 <osThreadNew>
 80010ee:	4603      	mov	r3, r0
 80010f0:	4a0f      	ldr	r2, [pc, #60]	; (8001130 <MX_FREERTOS_Init+0x90>)
 80010f2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80010f4:	bf00      	nop
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	080122f0 	.word	0x080122f0
 80010fc:	08001995 	.word	0x08001995
 8001100:	200000a4 	.word	0x200000a4
 8001104:	08012314 	.word	0x08012314
 8001108:	08001b4d 	.word	0x08001b4d
 800110c:	200000a8 	.word	0x200000a8
 8001110:	08012338 	.word	0x08012338
 8001114:	08001bbd 	.word	0x08001bbd
 8001118:	200000ac 	.word	0x200000ac
 800111c:	0801235c 	.word	0x0801235c
 8001120:	08001c45 	.word	0x08001c45
 8001124:	200000b0 	.word	0x200000b0
 8001128:	08012380 	.word	0x08012380
 800112c:	08001cf5 	.word	0x08001cf5
 8001130:	200000b4 	.word	0x200000b4

08001134 <char_to_int>:
int speed = 0;
int finish_inject = 0;
int emergency = 0;


int char_to_int(char a){
 8001134:	b480      	push	{r7}
 8001136:	b083      	sub	sp, #12
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	71fb      	strb	r3, [r7, #7]
	if(a == '1'){
 800113e:	79fb      	ldrb	r3, [r7, #7]
 8001140:	2b31      	cmp	r3, #49	; 0x31
 8001142:	d101      	bne.n	8001148 <char_to_int+0x14>
		return 1;
 8001144:	2301      	movs	r3, #1
 8001146:	e02c      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '2'){
 8001148:	79fb      	ldrb	r3, [r7, #7]
 800114a:	2b32      	cmp	r3, #50	; 0x32
 800114c:	d101      	bne.n	8001152 <char_to_int+0x1e>
		return 2;
 800114e:	2302      	movs	r3, #2
 8001150:	e027      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '3'){
 8001152:	79fb      	ldrb	r3, [r7, #7]
 8001154:	2b33      	cmp	r3, #51	; 0x33
 8001156:	d101      	bne.n	800115c <char_to_int+0x28>
		return 3;
 8001158:	2303      	movs	r3, #3
 800115a:	e022      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '4'){
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b34      	cmp	r3, #52	; 0x34
 8001160:	d101      	bne.n	8001166 <char_to_int+0x32>
		return 4;
 8001162:	2304      	movs	r3, #4
 8001164:	e01d      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '5'){
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b35      	cmp	r3, #53	; 0x35
 800116a:	d101      	bne.n	8001170 <char_to_int+0x3c>
		return 5;
 800116c:	2305      	movs	r3, #5
 800116e:	e018      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '6'){
 8001170:	79fb      	ldrb	r3, [r7, #7]
 8001172:	2b36      	cmp	r3, #54	; 0x36
 8001174:	d101      	bne.n	800117a <char_to_int+0x46>
		return 6;
 8001176:	2306      	movs	r3, #6
 8001178:	e013      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '7'){
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b37      	cmp	r3, #55	; 0x37
 800117e:	d101      	bne.n	8001184 <char_to_int+0x50>
		return 7;
 8001180:	2307      	movs	r3, #7
 8001182:	e00e      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '8'){
 8001184:	79fb      	ldrb	r3, [r7, #7]
 8001186:	2b38      	cmp	r3, #56	; 0x38
 8001188:	d101      	bne.n	800118e <char_to_int+0x5a>
		return 8;
 800118a:	2308      	movs	r3, #8
 800118c:	e009      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '9'){
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	2b39      	cmp	r3, #57	; 0x39
 8001192:	d101      	bne.n	8001198 <char_to_int+0x64>
		return 9;
 8001194:	2309      	movs	r3, #9
 8001196:	e004      	b.n	80011a2 <char_to_int+0x6e>
	}
	if(a == '0'){
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	2b30      	cmp	r3, #48	; 0x30
 800119c:	d101      	bne.n	80011a2 <char_to_int+0x6e>
		return 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	e7ff      	b.n	80011a2 <char_to_int+0x6e>
	}
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	370c      	adds	r7, #12
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr
	...

080011b0 <first_screen>:

// DRAWING FUNCTIONS
void first_screen(){ // Initial screen
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b082      	sub	sp, #8
 80011b4:	af02      	add	r7, sp, #8
	ST7735_Init();
 80011b6:	f000 fffb 	bl	80021b0 <ST7735_Init>
	ST7735_FillScreen(ST7735_BLACK);
 80011ba:	2000      	movs	r0, #0
 80011bc:	f001 faf8 	bl	80027b0 <ST7735_FillScreen>
	ST7735_DrawImage(0,160,128,160,gImage_firstscreen);
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <first_screen+0x28>)
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	23a0      	movs	r3, #160	; 0xa0
 80011c6:	2280      	movs	r2, #128	; 0x80
 80011c8:	21a0      	movs	r1, #160	; 0xa0
 80011ca:	2000      	movs	r0, #0
 80011cc:	f001 fb02 	bl	80027d4 <ST7735_DrawImage>
}
 80011d0:	bf00      	nop
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	08007f50 	.word	0x08007f50

080011dc <top_bar>:

void top_bar(){ // Top bar drawing
 80011dc:	b580      	push	{r7, lr}
 80011de:	b082      	sub	sp, #8
 80011e0:	af02      	add	r7, sp, #8
	if(icon_internet == 1 && prev_internet != icon_internet){
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <top_bar+0x60>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d112      	bne.n	8001210 <top_bar+0x34>
 80011ea:	4b15      	ldr	r3, [pc, #84]	; (8001240 <top_bar+0x64>)
 80011ec:	681a      	ldr	r2, [r3, #0]
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <top_bar+0x60>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d00c      	beq.n	8001210 <top_bar+0x34>
		prev_internet = icon_internet;
 80011f6:	4b11      	ldr	r3, [pc, #68]	; (800123c <top_bar+0x60>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a11      	ldr	r2, [pc, #68]	; (8001240 <top_bar+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]
		ST7735_DrawImage(113,15,15,15, gImage_internet_connected);
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <top_bar+0x68>)
 8001200:	9300      	str	r3, [sp, #0]
 8001202:	230f      	movs	r3, #15
 8001204:	220f      	movs	r2, #15
 8001206:	210f      	movs	r1, #15
 8001208:	2071      	movs	r0, #113	; 0x71
 800120a:	f001 fae3 	bl	80027d4 <ST7735_DrawImage>
		if(prev_internet != icon_internet){
			prev_internet = icon_internet;
			ST7735_DrawImage(113,15,15,15, gImage_internet_error);
		}
	}
}
 800120e:	e011      	b.n	8001234 <top_bar+0x58>
		if(prev_internet != icon_internet){
 8001210:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <top_bar+0x64>)
 8001212:	681a      	ldr	r2, [r3, #0]
 8001214:	4b09      	ldr	r3, [pc, #36]	; (800123c <top_bar+0x60>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	429a      	cmp	r2, r3
 800121a:	d00b      	beq.n	8001234 <top_bar+0x58>
			prev_internet = icon_internet;
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <top_bar+0x60>)
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a07      	ldr	r2, [pc, #28]	; (8001240 <top_bar+0x64>)
 8001222:	6013      	str	r3, [r2, #0]
			ST7735_DrawImage(113,15,15,15, gImage_internet_error);
 8001224:	4b08      	ldr	r3, [pc, #32]	; (8001248 <top_bar+0x6c>)
 8001226:	9300      	str	r3, [sp, #0]
 8001228:	230f      	movs	r3, #15
 800122a:	220f      	movs	r2, #15
 800122c:	210f      	movs	r1, #15
 800122e:	2071      	movs	r0, #113	; 0x71
 8001230:	f001 fad0 	bl	80027d4 <ST7735_DrawImage>
}
 8001234:	bf00      	nop
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	200000c0 	.word	0x200000c0
 8001240:	200000c4 	.word	0x200000c4
 8001244:	08011f58 	.word	0x08011f58
 8001248:	08012124 	.word	0x08012124

0800124c <screen_0>:

void screen_0(){
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af04      	add	r7, sp, #16
	ST7735_DrawString(20, 40, "CID# 14", ST7735_WHITE, ST7735_BLUE, 2, 12);
 8001252:	230c      	movs	r3, #12
 8001254:	9302      	str	r3, [sp, #8]
 8001256:	2302      	movs	r3, #2
 8001258:	9301      	str	r3, [sp, #4]
 800125a:	231f      	movs	r3, #31
 800125c:	9300      	str	r3, [sp, #0]
 800125e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001262:	4a17      	ldr	r2, [pc, #92]	; (80012c0 <screen_0+0x74>)
 8001264:	2128      	movs	r1, #40	; 0x28
 8001266:	2014      	movs	r0, #20
 8001268:	f001 f928 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawString(10, 60, "iSyringe", ST7735_WHITE, ST7735_BLUE, 2, 13);
 800126c:	230d      	movs	r3, #13
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2302      	movs	r3, #2
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	231f      	movs	r3, #31
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800127c:	4a11      	ldr	r2, [pc, #68]	; (80012c4 <screen_0+0x78>)
 800127e:	213c      	movs	r1, #60	; 0x3c
 8001280:	200a      	movs	r0, #10
 8001282:	f001 f91b 	bl	80024bc <ST7735_DrawString>
	if(injecting == 1){
 8001286:	4b10      	ldr	r3, [pc, #64]	; (80012c8 <screen_0+0x7c>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	2b01      	cmp	r3, #1
 800128c:	d115      	bne.n	80012ba <screen_0+0x6e>
		ST7735_DrawString(5, 100, "Injecting...", ST7735_MAGENTA, ST7735_CYAN, 2, 11);
 800128e:	230b      	movs	r3, #11
 8001290:	9302      	str	r3, [sp, #8]
 8001292:	2302      	movs	r3, #2
 8001294:	9301      	str	r3, [sp, #4]
 8001296:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80012a0:	4a0a      	ldr	r2, [pc, #40]	; (80012cc <screen_0+0x80>)
 80012a2:	2164      	movs	r1, #100	; 0x64
 80012a4:	2005      	movs	r0, #5
 80012a6:	f001 f909 	bl	80024bc <ST7735_DrawString>
		ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 80012aa:	231f      	movs	r3, #31
 80012ac:	9300      	str	r3, [sp, #0]
 80012ae:	2314      	movs	r3, #20
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	218c      	movs	r1, #140	; 0x8c
 80012b4:	2000      	movs	r0, #0
 80012b6:	f001 fa05 	bl	80026c4 <ST7735_FillRectangle>
	}

}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	08007e30 	.word	0x08007e30
 80012c4:	08007e38 	.word	0x08007e38
 80012c8:	200000d8 	.word	0x200000d8
 80012cc:	08007e44 	.word	0x08007e44

080012d0 <screen_1>:

void screen_1(){
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b084      	sub	sp, #16
 80012d4:	af04      	add	r7, sp, #16
	ST7735_DrawString(10, 22, "Injection", ST7735_WHITE, ST7735_ORANGE, 2, 12);
 80012d6:	230c      	movs	r3, #12
 80012d8:	9302      	str	r3, [sp, #8]
 80012da:	2302      	movs	r3, #2
 80012dc:	9301      	str	r3, [sp, #4]
 80012de:	f64f 5360 	movw	r3, #64864	; 0xfd60
 80012e2:	9300      	str	r3, [sp, #0]
 80012e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012e8:	4a36      	ldr	r2, [pc, #216]	; (80013c4 <screen_1+0xf4>)
 80012ea:	2116      	movs	r1, #22
 80012ec:	200a      	movs	r0, #10
 80012ee:	f001 f8e5 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawString(10, 42, "Target Speed:", ST7735_WHITE, ST7735_BLACK, 1, 8);
 80012f2:	2308      	movs	r3, #8
 80012f4:	9302      	str	r3, [sp, #8]
 80012f6:	2301      	movs	r3, #1
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	2300      	movs	r3, #0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001302:	4a31      	ldr	r2, [pc, #196]	; (80013c8 <screen_1+0xf8>)
 8001304:	212a      	movs	r1, #42	; 0x2a
 8001306:	200a      	movs	r0, #10
 8001308:	f001 f8d8 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawCharS(10, 54, digit_1, ST7735_WHITE, ST7735_BLACK, 2);
 800130c:	4b2f      	ldr	r3, [pc, #188]	; (80013cc <screen_1+0xfc>)
 800130e:	781a      	ldrb	r2, [r3, #0]
 8001310:	2302      	movs	r3, #2
 8001312:	9301      	str	r3, [sp, #4]
 8001314:	2300      	movs	r3, #0
 8001316:	9300      	str	r3, [sp, #0]
 8001318:	f04f 33ff 	mov.w	r3, #4294967295
 800131c:	2136      	movs	r1, #54	; 0x36
 800131e:	200a      	movs	r0, #10
 8001320:	f001 f902 	bl	8002528 <ST7735_DrawCharS>
	ST7735_DrawCharS(25, 54, digit_2, ST7735_WHITE, ST7735_BLACK, 2);
 8001324:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <screen_1+0x100>)
 8001326:	781a      	ldrb	r2, [r3, #0]
 8001328:	2302      	movs	r3, #2
 800132a:	9301      	str	r3, [sp, #4]
 800132c:	2300      	movs	r3, #0
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	f04f 33ff 	mov.w	r3, #4294967295
 8001334:	2136      	movs	r1, #54	; 0x36
 8001336:	2019      	movs	r0, #25
 8001338:	f001 f8f6 	bl	8002528 <ST7735_DrawCharS>
	ST7735_DrawString(48, 54, "ml/min", ST7735_WHITE, ST7735_BLACK, 2, 12);
 800133c:	230c      	movs	r3, #12
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2302      	movs	r3, #2
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	2300      	movs	r3, #0
 8001346:	9300      	str	r3, [sp, #0]
 8001348:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800134c:	4a21      	ldr	r2, [pc, #132]	; (80013d4 <screen_1+0x104>)
 800134e:	2136      	movs	r1, #54	; 0x36
 8001350:	2030      	movs	r0, #48	; 0x30
 8001352:	f001 f8b3 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawString(10, 70, "Syringe Volume:", ST7735_WHITE, ST7735_BLACK, 1, 8);
 8001356:	2308      	movs	r3, #8
 8001358:	9302      	str	r3, [sp, #8]
 800135a:	2301      	movs	r3, #1
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	2300      	movs	r3, #0
 8001360:	9300      	str	r3, [sp, #0]
 8001362:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001366:	4a1c      	ldr	r2, [pc, #112]	; (80013d8 <screen_1+0x108>)
 8001368:	2146      	movs	r1, #70	; 0x46
 800136a:	200a      	movs	r0, #10
 800136c:	f001 f8a6 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawString(10, 82, "10 ml", ST7735_WHITE, ST7735_BLACK, 2, 12);
 8001370:	230c      	movs	r3, #12
 8001372:	9302      	str	r3, [sp, #8]
 8001374:	2302      	movs	r3, #2
 8001376:	9301      	str	r3, [sp, #4]
 8001378:	2300      	movs	r3, #0
 800137a:	9300      	str	r3, [sp, #0]
 800137c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001380:	4a16      	ldr	r2, [pc, #88]	; (80013dc <screen_1+0x10c>)
 8001382:	2152      	movs	r1, #82	; 0x52
 8001384:	200a      	movs	r0, #10
 8001386:	f001 f899 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawString(10, 98, "Syringe Length:", ST7735_WHITE, ST7735_BLACK, 1, 8);
 800138a:	2308      	movs	r3, #8
 800138c:	9302      	str	r3, [sp, #8]
 800138e:	2301      	movs	r3, #1
 8001390:	9301      	str	r3, [sp, #4]
 8001392:	2300      	movs	r3, #0
 8001394:	9300      	str	r3, [sp, #0]
 8001396:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800139a:	4a11      	ldr	r2, [pc, #68]	; (80013e0 <screen_1+0x110>)
 800139c:	2162      	movs	r1, #98	; 0x62
 800139e:	200a      	movs	r0, #10
 80013a0:	f001 f88c 	bl	80024bc <ST7735_DrawString>
	ST7735_DrawString(10, 110, "10 cm", ST7735_WHITE, ST7735_BLACK, 2, 12);
 80013a4:	230c      	movs	r3, #12
 80013a6:	9302      	str	r3, [sp, #8]
 80013a8:	2302      	movs	r3, #2
 80013aa:	9301      	str	r3, [sp, #4]
 80013ac:	2300      	movs	r3, #0
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b4:	4a0b      	ldr	r2, [pc, #44]	; (80013e4 <screen_1+0x114>)
 80013b6:	216e      	movs	r1, #110	; 0x6e
 80013b8:	200a      	movs	r0, #10
 80013ba:	f001 f87f 	bl	80024bc <ST7735_DrawString>


	//HAL_Delay(100);
}
 80013be:	bf00      	nop
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	08007e54 	.word	0x08007e54
 80013c8:	08007e60 	.word	0x08007e60
 80013cc:	20000020 	.word	0x20000020
 80013d0:	20000021 	.word	0x20000021
 80013d4:	08007e70 	.word	0x08007e70
 80013d8:	08007e78 	.word	0x08007e78
 80013dc:	08007e88 	.word	0x08007e88
 80013e0:	08007e90 	.word	0x08007e90
 80013e4:	08007ea0 	.word	0x08007ea0

080013e8 <bottom_bar>:

void bottom_bar(){ // Bottom bar drawing
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af04      	add	r7, sp, #16
	if(screen_number == 0 && message == 0 && injecting != 1){
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <bottom_bar+0x100>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d11f      	bne.n	8001436 <bottom_bar+0x4e>
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <bottom_bar+0x104>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d11b      	bne.n	8001436 <bottom_bar+0x4e>
 80013fe:	4b3c      	ldr	r3, [pc, #240]	; (80014f0 <bottom_bar+0x108>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d017      	beq.n	8001436 <bottom_bar+0x4e>
		ST7735_DrawCharS(2, 142, '*', ST7735_RED, ST7735_WHITE, 2);
 8001406:	2302      	movs	r3, #2
 8001408:	9301      	str	r3, [sp, #4]
 800140a:	f04f 33ff 	mov.w	r3, #4294967295
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	4b38      	ldr	r3, [pc, #224]	; (80014f4 <bottom_bar+0x10c>)
 8001412:	222a      	movs	r2, #42	; 0x2a
 8001414:	218e      	movs	r1, #142	; 0x8e
 8001416:	2002      	movs	r0, #2
 8001418:	f001 f886 	bl	8002528 <ST7735_DrawCharS>
		ST7735_DrawString(15, 140, "=menu", ST7735_WHITE, ST7735_BLUE, 2, 13);
 800141c:	230d      	movs	r3, #13
 800141e:	9302      	str	r3, [sp, #8]
 8001420:	2302      	movs	r3, #2
 8001422:	9301      	str	r3, [sp, #4]
 8001424:	231f      	movs	r3, #31
 8001426:	9300      	str	r3, [sp, #0]
 8001428:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800142c:	4a32      	ldr	r2, [pc, #200]	; (80014f8 <bottom_bar+0x110>)
 800142e:	218c      	movs	r1, #140	; 0x8c
 8001430:	200f      	movs	r0, #15
 8001432:	f001 f843 	bl	80024bc <ST7735_DrawString>
	}
	if(screen_number == 1 && screen_2_input_done == 0 && message == 0){
 8001436:	4b2c      	ldr	r3, [pc, #176]	; (80014e8 <bottom_bar+0x100>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	2b01      	cmp	r3, #1
 800143c:	d114      	bne.n	8001468 <bottom_bar+0x80>
 800143e:	4b2f      	ldr	r3, [pc, #188]	; (80014fc <bottom_bar+0x114>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d110      	bne.n	8001468 <bottom_bar+0x80>
 8001446:	4b29      	ldr	r3, [pc, #164]	; (80014ec <bottom_bar+0x104>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d10c      	bne.n	8001468 <bottom_bar+0x80>
		ST7735_DrawString(18, 142, "-INPUT-", ST7735_WHITE, ST7735_BLUE, 2, 13);
 800144e:	230d      	movs	r3, #13
 8001450:	9302      	str	r3, [sp, #8]
 8001452:	2302      	movs	r3, #2
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	231f      	movs	r3, #31
 8001458:	9300      	str	r3, [sp, #0]
 800145a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800145e:	4a28      	ldr	r2, [pc, #160]	; (8001500 <bottom_bar+0x118>)
 8001460:	218e      	movs	r1, #142	; 0x8e
 8001462:	2012      	movs	r0, #18
 8001464:	f001 f82a 	bl	80024bc <ST7735_DrawString>
	}
	if(screen_number == 1 && screen_2_input_done == 1 && message == 0){
 8001468:	4b1f      	ldr	r3, [pc, #124]	; (80014e8 <bottom_bar+0x100>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b01      	cmp	r3, #1
 800146e:	d137      	bne.n	80014e0 <bottom_bar+0xf8>
 8001470:	4b22      	ldr	r3, [pc, #136]	; (80014fc <bottom_bar+0x114>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	2b01      	cmp	r3, #1
 8001476:	d133      	bne.n	80014e0 <bottom_bar+0xf8>
 8001478:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <bottom_bar+0x104>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	2b00      	cmp	r3, #0
 800147e:	d12f      	bne.n	80014e0 <bottom_bar+0xf8>
		ST7735_DrawCharS(2, 142, '*', ST7735_RED, ST7735_WHITE, 2);
 8001480:	2302      	movs	r3, #2
 8001482:	9301      	str	r3, [sp, #4]
 8001484:	f04f 33ff 	mov.w	r3, #4294967295
 8001488:	9300      	str	r3, [sp, #0]
 800148a:	4b1a      	ldr	r3, [pc, #104]	; (80014f4 <bottom_bar+0x10c>)
 800148c:	222a      	movs	r2, #42	; 0x2a
 800148e:	218e      	movs	r1, #142	; 0x8e
 8001490:	2002      	movs	r0, #2
 8001492:	f001 f849 	bl	8002528 <ST7735_DrawCharS>
		ST7735_DrawString(15, 140, "=OK", ST7735_WHITE, ST7735_BLUE, 2, 13);
 8001496:	230d      	movs	r3, #13
 8001498:	9302      	str	r3, [sp, #8]
 800149a:	2302      	movs	r3, #2
 800149c:	9301      	str	r3, [sp, #4]
 800149e:	231f      	movs	r3, #31
 80014a0:	9300      	str	r3, [sp, #0]
 80014a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014a6:	4a17      	ldr	r2, [pc, #92]	; (8001504 <bottom_bar+0x11c>)
 80014a8:	218c      	movs	r1, #140	; 0x8c
 80014aa:	200f      	movs	r0, #15
 80014ac:	f001 f806 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawCharS(60, 142, '#', ST7735_RED, ST7735_WHITE, 2);
 80014b0:	2302      	movs	r3, #2
 80014b2:	9301      	str	r3, [sp, #4]
 80014b4:	f04f 33ff 	mov.w	r3, #4294967295
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	4b0e      	ldr	r3, [pc, #56]	; (80014f4 <bottom_bar+0x10c>)
 80014bc:	2223      	movs	r2, #35	; 0x23
 80014be:	218e      	movs	r1, #142	; 0x8e
 80014c0:	203c      	movs	r0, #60	; 0x3c
 80014c2:	f001 f831 	bl	8002528 <ST7735_DrawCharS>
		ST7735_DrawString(73, 140, "=X", ST7735_WHITE, ST7735_BLUE, 2, 13);
 80014c6:	230d      	movs	r3, #13
 80014c8:	9302      	str	r3, [sp, #8]
 80014ca:	2302      	movs	r3, #2
 80014cc:	9301      	str	r3, [sp, #4]
 80014ce:	231f      	movs	r3, #31
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d6:	4a0c      	ldr	r2, [pc, #48]	; (8001508 <bottom_bar+0x120>)
 80014d8:	218c      	movs	r1, #140	; 0x8c
 80014da:	2049      	movs	r0, #73	; 0x49
 80014dc:	f000 ffee 	bl	80024bc <ST7735_DrawString>
	}

}
 80014e0:	bf00      	nop
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	200000d0 	.word	0x200000d0
 80014ec:	200000c8 	.word	0x200000c8
 80014f0:	200000d8 	.word	0x200000d8
 80014f4:	fffff800 	.word	0xfffff800
 80014f8:	08007ea8 	.word	0x08007ea8
 80014fc:	200000d4 	.word	0x200000d4
 8001500:	08007eb0 	.word	0x08007eb0
 8001504:	08007eb8 	.word	0x08007eb8
 8001508:	08007ebc 	.word	0x08007ebc

0800150c <message_box>:

void message_box(){ // Draw the box and the message
 800150c:	b580      	push	{r7, lr}
 800150e:	b084      	sub	sp, #16
 8001510:	af04      	add	r7, sp, #16
	if(message == 1 && prevMessageBox != 1){
 8001512:	4b9b      	ldr	r3, [pc, #620]	; (8001780 <message_box+0x274>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	2b01      	cmp	r3, #1
 8001518:	d167      	bne.n	80015ea <message_box+0xde>
 800151a:	4b9a      	ldr	r3, [pc, #616]	; (8001784 <message_box+0x278>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2b01      	cmp	r3, #1
 8001520:	d063      	beq.n	80015ea <message_box+0xde>
		ST7735_FillRectangle( 14,  43,  100,  60,  ST7735_WHITE); // MessageBox Body
 8001522:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001526:	9300      	str	r3, [sp, #0]
 8001528:	233c      	movs	r3, #60	; 0x3c
 800152a:	2264      	movs	r2, #100	; 0x64
 800152c:	212b      	movs	r1, #43	; 0x2b
 800152e:	200e      	movs	r0, #14
 8001530:	f001 f8c8 	bl	80026c4 <ST7735_FillRectangle>
		ST7735_FillRectangle( 14,  25,  100,  18,  ST7735_GREEN); // MessageBox Top - Finish Injection
 8001534:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001538:	9300      	str	r3, [sp, #0]
 800153a:	2312      	movs	r3, #18
 800153c:	2264      	movs	r2, #100	; 0x64
 800153e:	2119      	movs	r1, #25
 8001540:	200e      	movs	r0, #14
 8001542:	f001 f8bf 	bl	80026c4 <ST7735_FillRectangle>
		ST7735_DrawString(40, 25, "INFO", ST7735_WHITE, ST7735_GREEN, 2, 12);
 8001546:	230c      	movs	r3, #12
 8001548:	9302      	str	r3, [sp, #8]
 800154a:	2302      	movs	r3, #2
 800154c:	9301      	str	r3, [sp, #4]
 800154e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001552:	9300      	str	r3, [sp, #0]
 8001554:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001558:	4a8b      	ldr	r2, [pc, #556]	; (8001788 <message_box+0x27c>)
 800155a:	2119      	movs	r1, #25
 800155c:	2028      	movs	r0, #40	; 0x28
 800155e:	f000 ffad 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawString(16, 50, "Inject", ST7735_BLACK, ST7735_WHITE, 2, 12);
 8001562:	230c      	movs	r3, #12
 8001564:	9302      	str	r3, [sp, #8]
 8001566:	2302      	movs	r3, #2
 8001568:	9301      	str	r3, [sp, #4]
 800156a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800156e:	9300      	str	r3, [sp, #0]
 8001570:	2300      	movs	r3, #0
 8001572:	4a86      	ldr	r2, [pc, #536]	; (800178c <message_box+0x280>)
 8001574:	2132      	movs	r1, #50	; 0x32
 8001576:	2010      	movs	r0, #16
 8001578:	f000 ffa0 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawString(16, 65, "finished", ST7735_BLACK, ST7735_WHITE, 2, 12);
 800157c:	230c      	movs	r3, #12
 800157e:	9302      	str	r3, [sp, #8]
 8001580:	2302      	movs	r3, #2
 8001582:	9301      	str	r3, [sp, #4]
 8001584:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001588:	9300      	str	r3, [sp, #0]
 800158a:	2300      	movs	r3, #0
 800158c:	4a80      	ldr	r2, [pc, #512]	; (8001790 <message_box+0x284>)
 800158e:	2141      	movs	r1, #65	; 0x41
 8001590:	2010      	movs	r0, #16
 8001592:	f000 ff93 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawCharS(2, 142, '*', ST7735_RED, ST7735_WHITE, 2);
 8001596:	2302      	movs	r3, #2
 8001598:	9301      	str	r3, [sp, #4]
 800159a:	f04f 33ff 	mov.w	r3, #4294967295
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	4b7c      	ldr	r3, [pc, #496]	; (8001794 <message_box+0x288>)
 80015a2:	222a      	movs	r2, #42	; 0x2a
 80015a4:	218e      	movs	r1, #142	; 0x8e
 80015a6:	2002      	movs	r0, #2
 80015a8:	f000 ffbe 	bl	8002528 <ST7735_DrawCharS>
		ST7735_DrawString(15, 140, "=OK", ST7735_WHITE, ST7735_BLUE, 2, 13);
 80015ac:	230d      	movs	r3, #13
 80015ae:	9302      	str	r3, [sp, #8]
 80015b0:	2302      	movs	r3, #2
 80015b2:	9301      	str	r3, [sp, #4]
 80015b4:	231f      	movs	r3, #31
 80015b6:	9300      	str	r3, [sp, #0]
 80015b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015bc:	4a76      	ldr	r2, [pc, #472]	; (8001798 <message_box+0x28c>)
 80015be:	218c      	movs	r1, #140	; 0x8c
 80015c0:	200f      	movs	r0, #15
 80015c2:	f000 ff7b 	bl	80024bc <ST7735_DrawString>
		prevMessageBox = message;
 80015c6:	4b6e      	ldr	r3, [pc, #440]	; (8001780 <message_box+0x274>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a6e      	ldr	r2, [pc, #440]	; (8001784 <message_box+0x278>)
 80015cc:	6013      	str	r3, [r2, #0]
		if(KeyPad_WaitForKeyGetChar(0) == '*'){ // 用户确认操作关闭MessageBox
 80015ce:	2000      	movs	r0, #0
 80015d0:	f7ff fcb4 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b2a      	cmp	r3, #42	; 0x2a
 80015d8:	f040 80cf 	bne.w	800177a <message_box+0x26e>
		  message = 0;
 80015dc:	4b68      	ldr	r3, [pc, #416]	; (8001780 <message_box+0x274>)
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
			prevMessageBox = 0;
 80015e2:	4b68      	ldr	r3, [pc, #416]	; (8001784 <message_box+0x278>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	601a      	str	r2, [r3, #0]
		if(KeyPad_WaitForKeyGetChar(0) == '*'){ // 用户确认操作关闭MessageBox
 80015e8:	e0c7      	b.n	800177a <message_box+0x26e>
		}
	} else {
		if(message == 2 ){
 80015ea:	4b65      	ldr	r3, [pc, #404]	; (8001780 <message_box+0x274>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	2b02      	cmp	r3, #2
 80015f0:	d158      	bne.n	80016a4 <message_box+0x198>
		ST7735_FillRectangle( 14,  43,  100,  60,  ST7735_WHITE); // MessageBox Body
 80015f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	233c      	movs	r3, #60	; 0x3c
 80015fa:	2264      	movs	r2, #100	; 0x64
 80015fc:	212b      	movs	r1, #43	; 0x2b
 80015fe:	200e      	movs	r0, #14
 8001600:	f001 f860 	bl	80026c4 <ST7735_FillRectangle>
		ST7735_FillRectangle( 14,  25,  100,  18,  ST7735_MAGENTA); // MessageBox Top - Emergency Stop
 8001604:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001608:	9300      	str	r3, [sp, #0]
 800160a:	2312      	movs	r3, #18
 800160c:	2264      	movs	r2, #100	; 0x64
 800160e:	2119      	movs	r1, #25
 8001610:	200e      	movs	r0, #14
 8001612:	f001 f857 	bl	80026c4 <ST7735_FillRectangle>
		ST7735_DrawString(35, 25, "ERROR", ST7735_WHITE, ST7735_MAGENTA, 2, 12);
 8001616:	230c      	movs	r3, #12
 8001618:	9302      	str	r3, [sp, #8]
 800161a:	2302      	movs	r3, #2
 800161c:	9301      	str	r3, [sp, #4]
 800161e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001628:	4a5c      	ldr	r2, [pc, #368]	; (800179c <message_box+0x290>)
 800162a:	2119      	movs	r1, #25
 800162c:	2023      	movs	r0, #35	; 0x23
 800162e:	f000 ff45 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawString(16, 50, "Emerge-", ST7735_BLACK, ST7735_WHITE, 2, 12);
 8001632:	230c      	movs	r3, #12
 8001634:	9302      	str	r3, [sp, #8]
 8001636:	2302      	movs	r3, #2
 8001638:	9301      	str	r3, [sp, #4]
 800163a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800163e:	9300      	str	r3, [sp, #0]
 8001640:	2300      	movs	r3, #0
 8001642:	4a57      	ldr	r2, [pc, #348]	; (80017a0 <message_box+0x294>)
 8001644:	2132      	movs	r1, #50	; 0x32
 8001646:	2010      	movs	r0, #16
 8001648:	f000 ff38 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawString(16, 65, "ncy", ST7735_BLACK, ST7735_WHITE, 2, 12);
 800164c:	230c      	movs	r3, #12
 800164e:	9302      	str	r3, [sp, #8]
 8001650:	2302      	movs	r3, #2
 8001652:	9301      	str	r3, [sp, #4]
 8001654:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001658:	9300      	str	r3, [sp, #0]
 800165a:	2300      	movs	r3, #0
 800165c:	4a51      	ldr	r2, [pc, #324]	; (80017a4 <message_box+0x298>)
 800165e:	2141      	movs	r1, #65	; 0x41
 8001660:	2010      	movs	r0, #16
 8001662:	f000 ff2b 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawString(16, 80, "stopped", ST7735_BLACK, ST7735_WHITE, 2, 12);
 8001666:	230c      	movs	r3, #12
 8001668:	9302      	str	r3, [sp, #8]
 800166a:	2302      	movs	r3, #2
 800166c:	9301      	str	r3, [sp, #4]
 800166e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001672:	9300      	str	r3, [sp, #0]
 8001674:	2300      	movs	r3, #0
 8001676:	4a4c      	ldr	r2, [pc, #304]	; (80017a8 <message_box+0x29c>)
 8001678:	2150      	movs	r1, #80	; 0x50
 800167a:	2010      	movs	r0, #16
 800167c:	f000 ff1e 	bl	80024bc <ST7735_DrawString>
		ST7735_DrawString(20, 140, "Restart to clear", ST7735_RED, ST7735_BLUE, 2, 12);
 8001680:	230c      	movs	r3, #12
 8001682:	9302      	str	r3, [sp, #8]
 8001684:	2302      	movs	r3, #2
 8001686:	9301      	str	r3, [sp, #4]
 8001688:	231f      	movs	r3, #31
 800168a:	9300      	str	r3, [sp, #0]
 800168c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8001690:	4a46      	ldr	r2, [pc, #280]	; (80017ac <message_box+0x2a0>)
 8001692:	218c      	movs	r1, #140	; 0x8c
 8001694:	2014      	movs	r0, #20
 8001696:	f000 ff11 	bl	80024bc <ST7735_DrawString>
		prevMessageBox = message;
 800169a:	4b39      	ldr	r3, [pc, #228]	; (8001780 <message_box+0x274>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a39      	ldr	r2, [pc, #228]	; (8001784 <message_box+0x278>)
 80016a0:	6013      	str	r3, [r2, #0]
					}
		}
	}

	}
}
 80016a2:	e06a      	b.n	800177a <message_box+0x26e>
		if(message == 3 && prevMessageBox != 3){
 80016a4:	4b36      	ldr	r3, [pc, #216]	; (8001780 <message_box+0x274>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	2b03      	cmp	r3, #3
 80016aa:	d166      	bne.n	800177a <message_box+0x26e>
 80016ac:	4b35      	ldr	r3, [pc, #212]	; (8001784 <message_box+0x278>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d062      	beq.n	800177a <message_box+0x26e>
			ST7735_FillRectangle( 14,  43,  100,  60,  ST7735_WHITE); // MessageBox Body
 80016b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016b8:	9300      	str	r3, [sp, #0]
 80016ba:	233c      	movs	r3, #60	; 0x3c
 80016bc:	2264      	movs	r2, #100	; 0x64
 80016be:	212b      	movs	r1, #43	; 0x2b
 80016c0:	200e      	movs	r0, #14
 80016c2:	f000 ffff 	bl	80026c4 <ST7735_FillRectangle>
					ST7735_FillRectangle( 14,  25,  100,  18,  ST7735_MAGENTA); // MessageBox Top - Emergency Stop
 80016c6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80016ca:	9300      	str	r3, [sp, #0]
 80016cc:	2312      	movs	r3, #18
 80016ce:	2264      	movs	r2, #100	; 0x64
 80016d0:	2119      	movs	r1, #25
 80016d2:	200e      	movs	r0, #14
 80016d4:	f000 fff6 	bl	80026c4 <ST7735_FillRectangle>
					ST7735_DrawString(35, 25, "Remind", ST7735_WHITE, ST7735_MAGENTA, 2, 12);
 80016d8:	230c      	movs	r3, #12
 80016da:	9302      	str	r3, [sp, #8]
 80016dc:	2302      	movs	r3, #2
 80016de:	9301      	str	r3, [sp, #4]
 80016e0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80016e4:	9300      	str	r3, [sp, #0]
 80016e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016ea:	4a31      	ldr	r2, [pc, #196]	; (80017b0 <message_box+0x2a4>)
 80016ec:	2119      	movs	r1, #25
 80016ee:	2023      	movs	r0, #35	; 0x23
 80016f0:	f000 fee4 	bl	80024bc <ST7735_DrawString>
					ST7735_DrawString(16, 50, "Time to", ST7735_BLACK, ST7735_WHITE, 2, 12);
 80016f4:	230c      	movs	r3, #12
 80016f6:	9302      	str	r3, [sp, #8]
 80016f8:	2302      	movs	r3, #2
 80016fa:	9301      	str	r3, [sp, #4]
 80016fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	2300      	movs	r3, #0
 8001704:	4a2b      	ldr	r2, [pc, #172]	; (80017b4 <message_box+0x2a8>)
 8001706:	2132      	movs	r1, #50	; 0x32
 8001708:	2010      	movs	r0, #16
 800170a:	f000 fed7 	bl	80024bc <ST7735_DrawString>
					ST7735_DrawString(16, 65, "eat drug", ST7735_BLACK, ST7735_WHITE, 2, 12);
 800170e:	230c      	movs	r3, #12
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2302      	movs	r3, #2
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2300      	movs	r3, #0
 800171e:	4a26      	ldr	r2, [pc, #152]	; (80017b8 <message_box+0x2ac>)
 8001720:	2141      	movs	r1, #65	; 0x41
 8001722:	2010      	movs	r0, #16
 8001724:	f000 feca 	bl	80024bc <ST7735_DrawString>
					ST7735_DrawCharS(2, 142, '*', ST7735_RED, ST7735_WHITE, 2);
 8001728:	2302      	movs	r3, #2
 800172a:	9301      	str	r3, [sp, #4]
 800172c:	f04f 33ff 	mov.w	r3, #4294967295
 8001730:	9300      	str	r3, [sp, #0]
 8001732:	4b18      	ldr	r3, [pc, #96]	; (8001794 <message_box+0x288>)
 8001734:	222a      	movs	r2, #42	; 0x2a
 8001736:	218e      	movs	r1, #142	; 0x8e
 8001738:	2002      	movs	r0, #2
 800173a:	f000 fef5 	bl	8002528 <ST7735_DrawCharS>
					ST7735_DrawString(15, 140, "=OK", ST7735_WHITE, ST7735_BLUE, 2, 13);
 800173e:	230d      	movs	r3, #13
 8001740:	9302      	str	r3, [sp, #8]
 8001742:	2302      	movs	r3, #2
 8001744:	9301      	str	r3, [sp, #4]
 8001746:	231f      	movs	r3, #31
 8001748:	9300      	str	r3, [sp, #0]
 800174a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800174e:	4a12      	ldr	r2, [pc, #72]	; (8001798 <message_box+0x28c>)
 8001750:	218c      	movs	r1, #140	; 0x8c
 8001752:	200f      	movs	r0, #15
 8001754:	f000 feb2 	bl	80024bc <ST7735_DrawString>
					prevMessageBox = message;
 8001758:	4b09      	ldr	r3, [pc, #36]	; (8001780 <message_box+0x274>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	4a09      	ldr	r2, [pc, #36]	; (8001784 <message_box+0x278>)
 800175e:	6013      	str	r3, [r2, #0]
					if(KeyPad_WaitForKeyGetChar(0) == '*'){ // 用户确认操作关闭MessageBox
 8001760:	2000      	movs	r0, #0
 8001762:	f7ff fbeb 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 8001766:	4603      	mov	r3, r0
 8001768:	2b2a      	cmp	r3, #42	; 0x2a
 800176a:	d106      	bne.n	800177a <message_box+0x26e>
						  message = 0;
 800176c:	4b04      	ldr	r3, [pc, #16]	; (8001780 <message_box+0x274>)
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
						  prevMessageBox = 0;
 8001772:	4b04      	ldr	r3, [pc, #16]	; (8001784 <message_box+0x278>)
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
}
 8001778:	e7ff      	b.n	800177a <message_box+0x26e>
 800177a:	bf00      	nop
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	200000c8 	.word	0x200000c8
 8001784:	200000cc 	.word	0x200000cc
 8001788:	08007ec0 	.word	0x08007ec0
 800178c:	08007ec8 	.word	0x08007ec8
 8001790:	08007ed0 	.word	0x08007ed0
 8001794:	fffff800 	.word	0xfffff800
 8001798:	08007eb8 	.word	0x08007eb8
 800179c:	08007edc 	.word	0x08007edc
 80017a0:	08007ee4 	.word	0x08007ee4
 80017a4:	08007eec 	.word	0x08007eec
 80017a8:	08007ef0 	.word	0x08007ef0
 80017ac:	08007ef8 	.word	0x08007ef8
 80017b0:	08007f0c 	.word	0x08007f0c
 80017b4:	08007f14 	.word	0x08007f14
 80017b8:	08007f1c 	.word	0x08007f1c

080017bc <microDelay>:
#define DIR_PORT GPIOA
#define STEP_PIN GPIO_PIN_4
#define STEP_PORT GPIOA

void microDelay (uint16_t delay)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	4603      	mov	r3, r0
 80017c4:	80fb      	strh	r3, [r7, #6]
	/*
  __HAL_TIM_SET_COUNTER(&htim3, 0);
  while (__HAL_TIM_GET_COUNTER(&htim3) < delay);
  */
	HAL_Delay(delay);
 80017c6:	88fb      	ldrh	r3, [r7, #6]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f001 fb2b 	bl	8002e24 <HAL_Delay>
}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
	...

080017d8 <step>:

void step (int steps, uint8_t direction, uint16_t delay)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
 80017e4:	4613      	mov	r3, r2
 80017e6:	803b      	strh	r3, [r7, #0]
  int x;
  if (direction == 0)
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d105      	bne.n	80017fa <step+0x22>
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2102      	movs	r1, #2
 80017f2:	4816      	ldr	r0, [pc, #88]	; (800184c <step+0x74>)
 80017f4:	f001 fdb8 	bl	8003368 <HAL_GPIO_WritePin>
 80017f8:	e004      	b.n	8001804 <step+0x2c>
  else
    HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2102      	movs	r1, #2
 80017fe:	4813      	ldr	r0, [pc, #76]	; (800184c <step+0x74>)
 8001800:	f001 fdb2 	bl	8003368 <HAL_GPIO_WritePin>
  for(x=0; x<steps && emergency != 1; x=x+1)
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	e014      	b.n	8001834 <step+0x5c>
  {
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 800180a:	2201      	movs	r2, #1
 800180c:	2110      	movs	r1, #16
 800180e:	480f      	ldr	r0, [pc, #60]	; (800184c <step+0x74>)
 8001810:	f001 fdaa 	bl	8003368 <HAL_GPIO_WritePin>
    microDelay(delay);
 8001814:	883b      	ldrh	r3, [r7, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f7ff ffd0 	bl	80017bc <microDelay>
    HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 800181c:	2200      	movs	r2, #0
 800181e:	2110      	movs	r1, #16
 8001820:	480a      	ldr	r0, [pc, #40]	; (800184c <step+0x74>)
 8001822:	f001 fda1 	bl	8003368 <HAL_GPIO_WritePin>
    microDelay(delay);
 8001826:	883b      	ldrh	r3, [r7, #0]
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff ffc7 	bl	80017bc <microDelay>
  for(x=0; x<steps && emergency != 1; x=x+1)
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	3301      	adds	r3, #1
 8001832:	60fb      	str	r3, [r7, #12]
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	429a      	cmp	r2, r3
 800183a:	da03      	bge.n	8001844 <step+0x6c>
 800183c:	4b04      	ldr	r3, [pc, #16]	; (8001850 <step+0x78>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b01      	cmp	r3, #1
 8001842:	d1e2      	bne.n	800180a <step+0x32>
  }
}
 8001844:	bf00      	nop
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	40020000 	.word	0x40020000
 8001850:	200000e4 	.word	0x200000e4

08001854 <StepperMotor>:

void StepperMotor(int speed){
 8001854:	b5b0      	push	{r4, r5, r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af02      	add	r7, sp, #8
 800185a:	6078      	str	r0, [r7, #4]
	  int v = speed; // User Input
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	617b      	str	r3, [r7, #20]
	  int V = 10;
 8001860:	230a      	movs	r3, #10
 8001862:	613b      	str	r3, [r7, #16]
	  int L = 10;
 8001864:	230a      	movs	r3, #10
 8001866:	60fb      	str	r3, [r7, #12]
	  speed = (v*L)/(V*0.25);
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	68fa      	ldr	r2, [r7, #12]
 800186c:	fb02 f303 	mul.w	r3, r2, r3
 8001870:	4618      	mov	r0, r3
 8001872:	f7fe fe07 	bl	8000484 <__aeabi_i2d>
 8001876:	4604      	mov	r4, r0
 8001878:	460d      	mov	r5, r1
 800187a:	6938      	ldr	r0, [r7, #16]
 800187c:	f7fe fe02 	bl	8000484 <__aeabi_i2d>
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	4b32      	ldr	r3, [pc, #200]	; (8001950 <StepperMotor+0xfc>)
 8001886:	f7fe fe67 	bl	8000558 <__aeabi_dmul>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	4620      	mov	r0, r4
 8001890:	4629      	mov	r1, r5
 8001892:	f7fe ff8b 	bl	80007ac <__aeabi_ddiv>
 8001896:	4602      	mov	r2, r0
 8001898:	460b      	mov	r3, r1
 800189a:	4610      	mov	r0, r2
 800189c:	4619      	mov	r1, r3
 800189e:	f7ff f86d 	bl	800097c <__aeabi_d2iz>
 80018a2:	4603      	mov	r3, r0
 80018a4:	607b      	str	r3, [r7, #4]
	  ST7735_FillRectangle( 0,  19,  128,  122,  ST7735_BLACK); // Main Window
 80018a6:	2300      	movs	r3, #0
 80018a8:	9300      	str	r3, [sp, #0]
 80018aa:	237a      	movs	r3, #122	; 0x7a
 80018ac:	2280      	movs	r2, #128	; 0x80
 80018ae:	2113      	movs	r1, #19
 80018b0:	2000      	movs	r0, #0
 80018b2:	f000 ff07 	bl	80026c4 <ST7735_FillRectangle>
	  				  			ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 80018b6:	231f      	movs	r3, #31
 80018b8:	9300      	str	r3, [sp, #0]
 80018ba:	2314      	movs	r3, #20
 80018bc:	2280      	movs	r2, #128	; 0x80
 80018be:	218c      	movs	r1, #140	; 0x8c
 80018c0:	2000      	movs	r0, #0
 80018c2:	f000 feff 	bl	80026c4 <ST7735_FillRectangle>
	  	  	  screen_0();
 80018c6:	f7ff fcc1 	bl	800124c <screen_0>
		       step(3200, 1, speed); // 推进
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	b29b      	uxth	r3, r3
 80018ce:	461a      	mov	r2, r3
 80018d0:	2101      	movs	r1, #1
 80018d2:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 80018d6:	f7ff ff7f 	bl	80017d8 <step>
		        osDelay(100);
 80018da:	2064      	movs	r0, #100	; 0x64
 80018dc:	f003 fcfa 	bl	80052d4 <osDelay>
		        screen_number =0;
 80018e0:	4b1c      	ldr	r3, [pc, #112]	; (8001954 <StepperMotor+0x100>)
 80018e2:	2200      	movs	r2, #0
 80018e4:	601a      	str	r2, [r3, #0]
		        injecting = 0;
 80018e6:	4b1c      	ldr	r3, [pc, #112]	; (8001958 <StepperMotor+0x104>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
		        finish_inject = 1;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <StepperMotor+0x108>)
 80018ee:	2201      	movs	r2, #1
 80018f0:	601a      	str	r2, [r3, #0]
		        orange_light = 1;
 80018f2:	4b1b      	ldr	r3, [pc, #108]	; (8001960 <StepperMotor+0x10c>)
 80018f4:	2201      	movs	r2, #1
 80018f6:	601a      	str	r2, [r3, #0]
		        message = 1;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <StepperMotor+0x110>)
 80018fa:	2201      	movs	r2, #1
 80018fc:	601a      	str	r2, [r3, #0]
		        buzzer_on = 1;
 80018fe:	4b1a      	ldr	r3, [pc, #104]	; (8001968 <StepperMotor+0x114>)
 8001900:	2201      	movs	r2, #1
 8001902:	601a      	str	r2, [r3, #0]

		        message_box();
 8001904:	f7ff fe02 	bl	800150c <message_box>
		        //buzzer_on = 1;
		        ST7735_FillRectangle( 0,  19,  128,  122,  ST7735_BLACK); // Main Window
 8001908:	2300      	movs	r3, #0
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	237a      	movs	r3, #122	; 0x7a
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	2113      	movs	r1, #19
 8001912:	2000      	movs	r0, #0
 8001914:	f000 fed6 	bl	80026c4 <ST7735_FillRectangle>
		        	  				  			ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 8001918:	231f      	movs	r3, #31
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	2314      	movs	r3, #20
 800191e:	2280      	movs	r2, #128	; 0x80
 8001920:	218c      	movs	r1, #140	; 0x8c
 8001922:	2000      	movs	r0, #0
 8001924:	f000 fece 	bl	80026c4 <ST7735_FillRectangle>
		        screen_0();
 8001928:	f7ff fc90 	bl	800124c <screen_0>
		        digit_1 = '_';
 800192c:	4b0f      	ldr	r3, [pc, #60]	; (800196c <StepperMotor+0x118>)
 800192e:	225f      	movs	r2, #95	; 0x5f
 8001930:	701a      	strb	r2, [r3, #0]
		        digit_2 = '_';
 8001932:	4b0f      	ldr	r3, [pc, #60]	; (8001970 <StepperMotor+0x11c>)
 8001934:	225f      	movs	r2, #95	; 0x5f
 8001936:	701a      	strb	r2, [r3, #0]
		      step(3200, 0, 1); // 回�??
 8001938:	2201      	movs	r2, #1
 800193a:	2100      	movs	r1, #0
 800193c:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 8001940:	f7ff ff4a 	bl	80017d8 <step>
		      bottom_bar();
 8001944:	f7ff fd50 	bl	80013e8 <bottom_bar>

}
 8001948:	bf00      	nop
 800194a:	3718      	adds	r7, #24
 800194c:	46bd      	mov	sp, r7
 800194e:	bdb0      	pop	{r4, r5, r7, pc}
 8001950:	3fd00000 	.word	0x3fd00000
 8001954:	200000d0 	.word	0x200000d0
 8001958:	200000d8 	.word	0x200000d8
 800195c:	200000e0 	.word	0x200000e0
 8001960:	200000b8 	.word	0x200000b8
 8001964:	200000c8 	.word	0x200000c8
 8001968:	200000bc 	.word	0x200000bc
 800196c:	20000020 	.word	0x20000020
 8001970:	20000021 	.word	0x20000021

08001974 <StepperInit>:

void StepperInit(){
 8001974:	b580      	push	{r7, lr}
 8001976:	af00      	add	r7, sp, #0
	step(1600, 1, 1); // 初始化：向前归位
 8001978:	2201      	movs	r2, #1
 800197a:	2101      	movs	r1, #1
 800197c:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8001980:	f7ff ff2a 	bl	80017d8 <step>
	step(3200, 0, 1); // 初始化：向后归位
 8001984:	2201      	movs	r2, #1
 8001986:	2100      	movs	r1, #0
 8001988:	f44f 6048 	mov.w	r0, #3200	; 0xc80
 800198c:	f7ff ff24 	bl	80017d8 <step>
}
 8001990:	bf00      	nop
 8001992:	bd80      	pop	{r7, pc}

08001994 <gui_render>:
/* USER CODE END Header_gui_render */
void gui_render(void *argument)
{
 8001994:	b590      	push	{r4, r7, lr}
 8001996:	b085      	sub	sp, #20
 8001998:	af02      	add	r7, sp, #8
 800199a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gui_render */
	first_screen();
 800199c:	f7ff fc08 	bl	80011b0 <first_screen>
	KeyPad_Init();
 80019a0:	f7ff f992 	bl	8000cc8 <KeyPad_Init>
	StepperInit();
 80019a4:	f7ff ffe6 	bl	8001974 <StepperInit>
	//HAL_Delay(2000);
	ST7735_FillScreen(ST7735_BLACK);
 80019a8:	2000      	movs	r0, #0
 80019aa:	f000 ff01 	bl	80027b0 <ST7735_FillScreen>
	ST7735_FillRectangle( 0,  0,  128,  18,  ST7735_BLUE); // Top
 80019ae:	231f      	movs	r3, #31
 80019b0:	9300      	str	r3, [sp, #0]
 80019b2:	2312      	movs	r3, #18
 80019b4:	2280      	movs	r2, #128	; 0x80
 80019b6:	2100      	movs	r1, #0
 80019b8:	2000      	movs	r0, #0
 80019ba:	f000 fe83 	bl	80026c4 <ST7735_FillRectangle>
	ST7735_DrawImage(113,15,15,15, gImage_internet_error);
 80019be:	4b5b      	ldr	r3, [pc, #364]	; (8001b2c <gui_render+0x198>)
 80019c0:	9300      	str	r3, [sp, #0]
 80019c2:	230f      	movs	r3, #15
 80019c4:	220f      	movs	r2, #15
 80019c6:	210f      	movs	r1, #15
 80019c8:	2071      	movs	r0, #113	; 0x71
 80019ca:	f000 ff03 	bl	80027d4 <ST7735_DrawImage>
	ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 80019ce:	231f      	movs	r3, #31
 80019d0:	9300      	str	r3, [sp, #0]
 80019d2:	2314      	movs	r3, #20
 80019d4:	2280      	movs	r2, #128	; 0x80
 80019d6:	218c      	movs	r1, #140	; 0x8c
 80019d8:	2000      	movs	r0, #0
 80019da:	f000 fe73 	bl	80026c4 <ST7735_FillRectangle>

  /* Infinite loop */

  for(;;)
  {
	  if(message != 0){ // MessageBox appears -> 阻止main window刷新
 80019de:	4b54      	ldr	r3, [pc, #336]	; (8001b30 <gui_render+0x19c>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d002      	beq.n	80019ec <gui_render+0x58>
		  message_box();
 80019e6:	f7ff fd91 	bl	800150c <message_box>
 80019ea:	e097      	b.n	8001b1c <gui_render+0x188>
	  }else{
		  if(screen_number == 0){ // Screen #0
 80019ec:	4b51      	ldr	r3, [pc, #324]	; (8001b34 <gui_render+0x1a0>)
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d11f      	bne.n	8001a34 <gui_render+0xa0>
			  screen_0();
 80019f4:	f7ff fc2a 	bl	800124c <screen_0>
			  if(KeyPad_WaitForKeyGetChar(500) == '*' && injecting != 1){ // 用户切换到第二屏
 80019f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80019fc:	f7ff fa9e 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 8001a00:	4603      	mov	r3, r0
 8001a02:	2b2a      	cmp	r3, #42	; 0x2a
 8001a04:	d116      	bne.n	8001a34 <gui_render+0xa0>
 8001a06:	4b4c      	ldr	r3, [pc, #304]	; (8001b38 <gui_render+0x1a4>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d012      	beq.n	8001a34 <gui_render+0xa0>
			    screen_number = 1;
 8001a0e:	4b49      	ldr	r3, [pc, #292]	; (8001b34 <gui_render+0x1a0>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	601a      	str	r2, [r3, #0]
				ST7735_FillRectangle( 0,  19,  128,  122,  ST7735_BLACK); // Main Window
 8001a14:	2300      	movs	r3, #0
 8001a16:	9300      	str	r3, [sp, #0]
 8001a18:	237a      	movs	r3, #122	; 0x7a
 8001a1a:	2280      	movs	r2, #128	; 0x80
 8001a1c:	2113      	movs	r1, #19
 8001a1e:	2000      	movs	r0, #0
 8001a20:	f000 fe50 	bl	80026c4 <ST7735_FillRectangle>
				ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 8001a24:	231f      	movs	r3, #31
 8001a26:	9300      	str	r3, [sp, #0]
 8001a28:	2314      	movs	r3, #20
 8001a2a:	2280      	movs	r2, #128	; 0x80
 8001a2c:	218c      	movs	r1, #140	; 0x8c
 8001a2e:	2000      	movs	r0, #0
 8001a30:	f000 fe48 	bl	80026c4 <ST7735_FillRectangle>
			  }
		  }
		  if(screen_number == 1){ // Screen #1
 8001a34:	4b3f      	ldr	r3, [pc, #252]	; (8001b34 <gui_render+0x1a0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d16f      	bne.n	8001b1c <gui_render+0x188>
			  screen_1();
 8001a3c:	f7ff fc48 	bl	80012d0 <screen_1>
			  bottom_bar();
 8001a40:	f7ff fcd2 	bl	80013e8 <bottom_bar>
			  if(screen_2_input_done != 1){
 8001a44:	4b3d      	ldr	r3, [pc, #244]	; (8001b3c <gui_render+0x1a8>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	2b01      	cmp	r3, #1
 8001a4a:	d01c      	beq.n	8001a86 <gui_render+0xf2>
				  digit_1 = KeyPad_WaitForKeyGetChar(0);
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff fa75 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 8001a52:	4603      	mov	r3, r0
 8001a54:	461a      	mov	r2, r3
 8001a56:	4b3a      	ldr	r3, [pc, #232]	; (8001b40 <gui_render+0x1ac>)
 8001a58:	701a      	strb	r2, [r3, #0]
				  screen_1();
 8001a5a:	f7ff fc39 	bl	80012d0 <screen_1>
				  digit_2 = KeyPad_WaitForKeyGetChar(0);
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff fa6c 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	4b36      	ldr	r3, [pc, #216]	; (8001b44 <gui_render+0x1b0>)
 8001a6a:	701a      	strb	r2, [r3, #0]
				  screen_1();
 8001a6c:	f7ff fc30 	bl	80012d0 <screen_1>
				  ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 8001a70:	231f      	movs	r3, #31
 8001a72:	9300      	str	r3, [sp, #0]
 8001a74:	2314      	movs	r3, #20
 8001a76:	2280      	movs	r2, #128	; 0x80
 8001a78:	218c      	movs	r1, #140	; 0x8c
 8001a7a:	2000      	movs	r0, #0
 8001a7c:	f000 fe22 	bl	80026c4 <ST7735_FillRectangle>
				  screen_2_input_done = 1;
 8001a80:	4b2e      	ldr	r3, [pc, #184]	; (8001b3c <gui_render+0x1a8>)
 8001a82:	2201      	movs	r2, #1
 8001a84:	601a      	str	r2, [r3, #0]
			  }
			  if(screen_2_input_done == 1){
 8001a86:	4b2d      	ldr	r3, [pc, #180]	; (8001b3c <gui_render+0x1a8>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d146      	bne.n	8001b1c <gui_render+0x188>
				  if(KeyPad_WaitForKeyGetChar(0) == '*'){ // 用户确定�????????�????????
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fa54 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b2a      	cmp	r3, #42	; 0x2a
 8001a98:	d11e      	bne.n	8001ad8 <gui_render+0x144>

					  	  //ST7735_FillRectangle( 0,  19,  128,  122,  ST7735_BLACK); // Main Window
					  		//ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom

						  	  speed = char_to_int(digit_1)*10 + char_to_int(digit_2);
 8001a9a:	4b29      	ldr	r3, [pc, #164]	; (8001b40 <gui_render+0x1ac>)
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7ff fb48 	bl	8001134 <char_to_int>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	461c      	mov	r4, r3
 8001ab0:	4b24      	ldr	r3, [pc, #144]	; (8001b44 <gui_render+0x1b0>)
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff fb3d 	bl	8001134 <char_to_int>
 8001aba:	4603      	mov	r3, r0
 8001abc:	4423      	add	r3, r4
 8001abe:	4a22      	ldr	r2, [pc, #136]	; (8001b48 <gui_render+0x1b4>)
 8001ac0:	6013      	str	r3, [r2, #0]
						  	  injecting = 1;
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <gui_render+0x1a4>)
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	601a      	str	r2, [r3, #0]
						  	screen_number = 0;
 8001ac8:	4b1a      	ldr	r3, [pc, #104]	; (8001b34 <gui_render+0x1a0>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
						  	StepperMotor(speed);
 8001ace:	4b1e      	ldr	r3, [pc, #120]	; (8001b48 <gui_render+0x1b4>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f7ff febe 	bl	8001854 <StepperMotor>
				  	}
				  if(KeyPad_WaitForKeyGetChar(0) == '#'){ // 用户取消
 8001ad8:	2000      	movs	r0, #0
 8001ada:	f7ff fa2f 	bl	8000f3c <KeyPad_WaitForKeyGetChar>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b23      	cmp	r3, #35	; 0x23
 8001ae2:	d11b      	bne.n	8001b1c <gui_render+0x188>
				  			digit_1 = '_';
 8001ae4:	4b16      	ldr	r3, [pc, #88]	; (8001b40 <gui_render+0x1ac>)
 8001ae6:	225f      	movs	r2, #95	; 0x5f
 8001ae8:	701a      	strb	r2, [r3, #0]
				  			digit_2 = '_';
 8001aea:	4b16      	ldr	r3, [pc, #88]	; (8001b44 <gui_render+0x1b0>)
 8001aec:	225f      	movs	r2, #95	; 0x5f
 8001aee:	701a      	strb	r2, [r3, #0]
				  			screen_2_input_done = 0;
 8001af0:	4b12      	ldr	r3, [pc, #72]	; (8001b3c <gui_render+0x1a8>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	601a      	str	r2, [r3, #0]
				  			ST7735_FillRectangle( 0,  19,  128,  122,  ST7735_BLACK); // Main Window
 8001af6:	2300      	movs	r3, #0
 8001af8:	9300      	str	r3, [sp, #0]
 8001afa:	237a      	movs	r3, #122	; 0x7a
 8001afc:	2280      	movs	r2, #128	; 0x80
 8001afe:	2113      	movs	r1, #19
 8001b00:	2000      	movs	r0, #0
 8001b02:	f000 fddf 	bl	80026c4 <ST7735_FillRectangle>
				  			ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
 8001b06:	231f      	movs	r3, #31
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2314      	movs	r3, #20
 8001b0c:	2280      	movs	r2, #128	; 0x80
 8001b0e:	218c      	movs	r1, #140	; 0x8c
 8001b10:	2000      	movs	r0, #0
 8001b12:	f000 fdd7 	bl	80026c4 <ST7735_FillRectangle>
				  			screen_number = 0;
 8001b16:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <gui_render+0x1a0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	601a      	str	r2, [r3, #0]

				  	}
			  }
		  }
	  }
	  top_bar();
 8001b1c:	f7ff fb5e 	bl	80011dc <top_bar>
	  bottom_bar();
 8001b20:	f7ff fc62 	bl	80013e8 <bottom_bar>
	  //HAL_Delay(1000);
    osDelay(1);
 8001b24:	2001      	movs	r0, #1
 8001b26:	f003 fbd5 	bl	80052d4 <osDelay>
	  if(message != 0){ // MessageBox appears -> 阻止main window刷新
 8001b2a:	e758      	b.n	80019de <gui_render+0x4a>
 8001b2c:	08012124 	.word	0x08012124
 8001b30:	200000c8 	.word	0x200000c8
 8001b34:	200000d0 	.word	0x200000d0
 8001b38:	200000d8 	.word	0x200000d8
 8001b3c:	200000d4 	.word	0x200000d4
 8001b40:	20000020 	.word	0x20000020
 8001b44:	20000021 	.word	0x20000021
 8001b48:	200000dc 	.word	0x200000dc

08001b4c <buzzer>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_buzzer */
void buzzer(void *argument)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN buzzer */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){ // MUTE // �?????????�?????????查：按下高电�????????? or 按下低电�?????????
 8001b54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001b58:	4815      	ldr	r0, [pc, #84]	; (8001bb0 <buzzer+0x64>)
 8001b5a:	f001 fbed 	bl	8003338 <HAL_GPIO_ReadPin>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d102      	bne.n	8001b6a <buzzer+0x1e>
		  buzzer_on =0;
 8001b64:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <buzzer+0x68>)
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
	  }
	  if(buzzer_on == 1){
 8001b6a:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <buzzer+0x68>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	2b01      	cmp	r3, #1
 8001b70:	d114      	bne.n	8001b9c <buzzer+0x50>
		  for(int i = 0; i <=10; i++){
 8001b72:	2300      	movs	r3, #0
 8001b74:	60fb      	str	r3, [r7, #12]
 8001b76:	e00a      	b.n	8001b8e <buzzer+0x42>
			  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);;
 8001b78:	2120      	movs	r1, #32
 8001b7a:	480f      	ldr	r0, [pc, #60]	; (8001bb8 <buzzer+0x6c>)
 8001b7c:	f001 fc0d 	bl	800339a <HAL_GPIO_TogglePin>
			  HAL_Delay(500);
 8001b80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001b84:	f001 f94e 	bl	8002e24 <HAL_Delay>
		  for(int i = 0; i <=10; i++){
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	60fb      	str	r3, [r7, #12]
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	2b0a      	cmp	r3, #10
 8001b92:	ddf1      	ble.n	8001b78 <buzzer+0x2c>
		  }
		  buzzer_on = 0;
 8001b94:	4b07      	ldr	r3, [pc, #28]	; (8001bb4 <buzzer+0x68>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	e004      	b.n	8001ba6 <buzzer+0x5a>
	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	2120      	movs	r1, #32
 8001ba0:	4805      	ldr	r0, [pc, #20]	; (8001bb8 <buzzer+0x6c>)
 8001ba2:	f001 fbe1 	bl	8003368 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	f003 fb94 	bl	80052d4 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == 0){ // MUTE // �?????????�?????????查：按下高电�????????? or 按下低电�?????????
 8001bac:	e7d2      	b.n	8001b54 <buzzer+0x8>
 8001bae:	bf00      	nop
 8001bb0:	40020800 	.word	0x40020800
 8001bb4:	200000bc 	.word	0x200000bc
 8001bb8:	40020000 	.word	0x40020000

08001bbc <OrangeAlarmLight>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_OrangeAlarmLight */
void OrangeAlarmLight(void *argument)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b084      	sub	sp, #16
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN OrangeAlarmLight */
  /* Infinite loop */
  for(;;)
  {
	  if(orange_light == 1){
 8001bc4:	4b1c      	ldr	r3, [pc, #112]	; (8001c38 <OrangeAlarmLight+0x7c>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d107      	bne.n	8001bdc <OrangeAlarmLight+0x20>
	  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);;
 8001bcc:	2140      	movs	r1, #64	; 0x40
 8001bce:	481b      	ldr	r0, [pc, #108]	; (8001c3c <OrangeAlarmLight+0x80>)
 8001bd0:	f001 fbe3 	bl	800339a <HAL_GPIO_TogglePin>
	  		  HAL_Delay(500);
 8001bd4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001bd8:	f001 f924 	bl	8002e24 <HAL_Delay>
	  	  }
	  if((orange_light == 1 && message == 1) || (orange_light == 1 && message == 3)){
 8001bdc:	4b16      	ldr	r3, [pc, #88]	; (8001c38 <OrangeAlarmLight+0x7c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b01      	cmp	r3, #1
 8001be2:	d103      	bne.n	8001bec <OrangeAlarmLight+0x30>
 8001be4:	4b16      	ldr	r3, [pc, #88]	; (8001c40 <OrangeAlarmLight+0x84>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d007      	beq.n	8001bfc <OrangeAlarmLight+0x40>
 8001bec:	4b12      	ldr	r3, [pc, #72]	; (8001c38 <OrangeAlarmLight+0x7c>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	2b01      	cmp	r3, #1
 8001bf2:	d118      	bne.n	8001c26 <OrangeAlarmLight+0x6a>
 8001bf4:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <OrangeAlarmLight+0x84>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	2b03      	cmp	r3, #3
 8001bfa:	d114      	bne.n	8001c26 <OrangeAlarmLight+0x6a>
		  	  for(int i = 0; i <= 10; i++){
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	60fb      	str	r3, [r7, #12]
 8001c00:	e00a      	b.n	8001c18 <OrangeAlarmLight+0x5c>
		  		  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);;
 8001c02:	2140      	movs	r1, #64	; 0x40
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <OrangeAlarmLight+0x80>)
 8001c06:	f001 fbc8 	bl	800339a <HAL_GPIO_TogglePin>
		  		  HAL_Delay(500);
 8001c0a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001c0e:	f001 f909 	bl	8002e24 <HAL_Delay>
		  	  for(int i = 0; i <= 10; i++){
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	3301      	adds	r3, #1
 8001c16:	60fb      	str	r3, [r7, #12]
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	2b0a      	cmp	r3, #10
 8001c1c:	ddf1      	ble.n	8001c02 <OrangeAlarmLight+0x46>
		  	  }
		  	  orange_light = 0;
 8001c1e:	4b06      	ldr	r3, [pc, #24]	; (8001c38 <OrangeAlarmLight+0x7c>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	e004      	b.n	8001c30 <OrangeAlarmLight+0x74>
	  	  }
	  else{
		  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2140      	movs	r1, #64	; 0x40
 8001c2a:	4804      	ldr	r0, [pc, #16]	; (8001c3c <OrangeAlarmLight+0x80>)
 8001c2c:	f001 fb9c 	bl	8003368 <HAL_GPIO_WritePin>
	  }
    osDelay(1);
 8001c30:	2001      	movs	r0, #1
 8001c32:	f003 fb4f 	bl	80052d4 <osDelay>
	  if(orange_light == 1){
 8001c36:	e7c5      	b.n	8001bc4 <OrangeAlarmLight+0x8>
 8001c38:	200000b8 	.word	0x200000b8
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	200000c8 	.word	0x200000c8

08001c44 <WiFi>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WiFi */
void WiFi(void *argument)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WiFi */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1){ //WEB_OK
 8001c4c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001c50:	4821      	ldr	r0, [pc, #132]	; (8001cd8 <WiFi+0x94>)
 8001c52:	f001 fb71 	bl	8003338 <HAL_GPIO_ReadPin>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b01      	cmp	r3, #1
 8001c5a:	d102      	bne.n	8001c62 <WiFi+0x1e>
		  icon_internet = 1;
 8001c5c:	4b1f      	ldr	r3, [pc, #124]	; (8001cdc <WiFi+0x98>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	601a      	str	r2, [r3, #0]
	  	  }
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_11) == 1 && emergency != 1){ //WEB_EAT_DRUG
 8001c62:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001c66:	481c      	ldr	r0, [pc, #112]	; (8001cd8 <WiFi+0x94>)
 8001c68:	f001 fb66 	bl	8003338 <HAL_GPIO_ReadPin>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d10c      	bne.n	8001c8c <WiFi+0x48>
 8001c72:	4b1b      	ldr	r3, [pc, #108]	; (8001ce0 <WiFi+0x9c>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d008      	beq.n	8001c8c <WiFi+0x48>
		  orange_light = 1;
 8001c7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ce4 <WiFi+0xa0>)
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	601a      	str	r2, [r3, #0]
	  		  message = 3;
 8001c80:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <WiFi+0xa4>)
 8001c82:	2203      	movs	r2, #3
 8001c84:	601a      	str	r2, [r3, #0]
	  		buzzer_on = 1;
 8001c86:	4b19      	ldr	r3, [pc, #100]	; (8001cec <WiFi+0xa8>)
 8001c88:	2201      	movs	r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
	  	  }
	  if(emergency == 1){ //Emergency
 8001c8c:	4b14      	ldr	r3, [pc, #80]	; (8001ce0 <WiFi+0x9c>)
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	2b01      	cmp	r3, #1
 8001c92:	d105      	bne.n	8001ca0 <WiFi+0x5c>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001c94:	2201      	movs	r2, #1
 8001c96:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001c9a:	480f      	ldr	r0, [pc, #60]	; (8001cd8 <WiFi+0x94>)
 8001c9c:	f001 fb64 	bl	8003368 <HAL_GPIO_WritePin>
	  }
	  if(finish_inject == 1){
 8001ca0:	4b13      	ldr	r3, [pc, #76]	; (8001cf0 <WiFi+0xac>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d112      	bne.n	8001cce <WiFi+0x8a>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 1);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cae:	480a      	ldr	r0, [pc, #40]	; (8001cd8 <WiFi+0x94>)
 8001cb0:	f001 fb5a 	bl	8003368 <HAL_GPIO_WritePin>
		  HAL_Delay(500);
 8001cb4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001cb8:	f001 f8b4 	bl	8002e24 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_12, 0);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <WiFi+0x94>)
 8001cc4:	f001 fb50 	bl	8003368 <HAL_GPIO_WritePin>
		  finish_inject = 0;
 8001cc8:	4b09      	ldr	r3, [pc, #36]	; (8001cf0 <WiFi+0xac>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	601a      	str	r2, [r3, #0]
	  }
    osDelay(1);
 8001cce:	2001      	movs	r0, #1
 8001cd0:	f003 fb00 	bl	80052d4 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_10) == 1){ //WEB_OK
 8001cd4:	e7ba      	b.n	8001c4c <WiFi+0x8>
 8001cd6:	bf00      	nop
 8001cd8:	40020800 	.word	0x40020800
 8001cdc:	200000c0 	.word	0x200000c0
 8001ce0:	200000e4 	.word	0x200000e4
 8001ce4:	200000b8 	.word	0x200000b8
 8001ce8:	200000c8 	.word	0x200000c8
 8001cec:	200000bc 	.word	0x200000bc
 8001cf0:	200000e0 	.word	0x200000e0

08001cf4 <EmergencyStop>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_EmergencyStop */
void EmergencyStop(void *argument)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b082      	sub	sp, #8
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN EmergencyStop */
  /* Infinite loop */
  for(;;)
  {
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8001cfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001d00:	480e      	ldr	r0, [pc, #56]	; (8001d3c <EmergencyStop+0x48>)
 8001d02:	f001 fb19 	bl	8003338 <HAL_GPIO_ReadPin>
 8001d06:	4603      	mov	r3, r0
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d102      	bne.n	8001d12 <EmergencyStop+0x1e>
		  emergency = 1;
 8001d0c:	4b0c      	ldr	r3, [pc, #48]	; (8001d40 <EmergencyStop+0x4c>)
 8001d0e:	2201      	movs	r2, #1
 8001d10:	601a      	str	r2, [r3, #0]
	  }
	  if(emergency == 1){ //Emergency Stop
 8001d12:	4b0b      	ldr	r3, [pc, #44]	; (8001d40 <EmergencyStop+0x4c>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d10c      	bne.n	8001d34 <EmergencyStop+0x40>
	  		  buzzer_on =1;
 8001d1a:	4b0a      	ldr	r3, [pc, #40]	; (8001d44 <EmergencyStop+0x50>)
 8001d1c:	2201      	movs	r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
	  		orange_light = 1;
 8001d20:	4b09      	ldr	r3, [pc, #36]	; (8001d48 <EmergencyStop+0x54>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	601a      	str	r2, [r3, #0]
	  		message = 2;
 8001d26:	4b09      	ldr	r3, [pc, #36]	; (8001d4c <EmergencyStop+0x58>)
 8001d28:	2202      	movs	r2, #2
 8001d2a:	601a      	str	r2, [r3, #0]
	  		//ST7735_FillRectangle( 0,  140,  128,  20,  ST7735_BLUE); // Bottom
	  		message_box();
 8001d2c:	f7ff fbee 	bl	800150c <message_box>
	  		bottom_bar();
 8001d30:	f7ff fb5a 	bl	80013e8 <bottom_bar>
	  	  }
    osDelay(1);
 8001d34:	2001      	movs	r0, #1
 8001d36:	f003 facd 	bl	80052d4 <osDelay>
	  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13) == 1){
 8001d3a:	e7df      	b.n	8001cfc <EmergencyStop+0x8>
 8001d3c:	40020400 	.word	0x40020400
 8001d40:	200000e4 	.word	0x200000e4
 8001d44:	200000bc 	.word	0x200000bc
 8001d48:	200000b8 	.word	0x200000b8
 8001d4c:	200000c8 	.word	0x200000c8

08001d50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b08a      	sub	sp, #40	; 0x28
 8001d54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d56:	f107 0314 	add.w	r3, r7, #20
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	605a      	str	r2, [r3, #4]
 8001d60:	609a      	str	r2, [r3, #8]
 8001d62:	60da      	str	r2, [r3, #12]
 8001d64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	613b      	str	r3, [r7, #16]
 8001d6a:	4b67      	ldr	r3, [pc, #412]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a66      	ldr	r2, [pc, #408]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b64      	ldr	r3, [pc, #400]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	613b      	str	r3, [r7, #16]
 8001d80:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b60      	ldr	r3, [pc, #384]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001d88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d8a:	4a5f      	ldr	r2, [pc, #380]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001d8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d90:	6313      	str	r3, [r2, #48]	; 0x30
 8001d92:	4b5d      	ldr	r3, [pc, #372]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001d94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9e:	2300      	movs	r3, #0
 8001da0:	60bb      	str	r3, [r7, #8]
 8001da2:	4b59      	ldr	r3, [pc, #356]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	4a58      	ldr	r2, [pc, #352]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001da8:	f043 0301 	orr.w	r3, r3, #1
 8001dac:	6313      	str	r3, [r2, #48]	; 0x30
 8001dae:	4b56      	ldr	r3, [pc, #344]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001db2:	f003 0301 	and.w	r3, r3, #1
 8001db6:	60bb      	str	r3, [r7, #8]
 8001db8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dba:	2300      	movs	r3, #0
 8001dbc:	607b      	str	r3, [r7, #4]
 8001dbe:	4b52      	ldr	r3, [pc, #328]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc2:	4a51      	ldr	r2, [pc, #324]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001dc4:	f043 0302 	orr.w	r3, r3, #2
 8001dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dca:	4b4f      	ldr	r3, [pc, #316]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dce:	f003 0302 	and.w	r3, r3, #2
 8001dd2:	607b      	str	r3, [r7, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	4b4b      	ldr	r3, [pc, #300]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dde:	4a4a      	ldr	r2, [pc, #296]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001de0:	f043 0308 	orr.w	r3, r3, #8
 8001de4:	6313      	str	r3, [r2, #48]	; 0x30
 8001de6:	4b48      	ldr	r3, [pc, #288]	; (8001f08 <MX_GPIO_Init+0x1b8>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	603b      	str	r3, [r7, #0]
 8001df0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1|WEB_ERROR_Pin, GPIO_PIN_RESET);
 8001df2:	2200      	movs	r2, #0
 8001df4:	f241 0102 	movw	r1, #4098	; 0x1002
 8001df8:	4844      	ldr	r0, [pc, #272]	; (8001f0c <MX_GPIO_Init+0x1bc>)
 8001dfa:	f001 fab5 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_4|Buzzer_Pin|OrangeLight_Pin
 8001dfe:	2200      	movs	r2, #0
 8001e00:	f241 3172 	movw	r1, #4978	; 0x1372
 8001e04:	4842      	ldr	r0, [pc, #264]	; (8001f10 <MX_GPIO_Init+0x1c0>)
 8001e06:	f001 faaf 	bl	8003368 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin|GPIO_PIN_9, GPIO_PIN_RESET);
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	f44f 4152 	mov.w	r1, #53760	; 0xd200
 8001e10:	4840      	ldr	r0, [pc, #256]	; (8001f14 <MX_GPIO_Init+0x1c4>)
 8001e12:	f001 faa9 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WEB_FINISH_INJECT_GPIO_Port, WEB_FINISH_INJECT_Pin, GPIO_PIN_RESET);
 8001e16:	2200      	movs	r2, #0
 8001e18:	2104      	movs	r1, #4
 8001e1a:	483f      	ldr	r0, [pc, #252]	; (8001f18 <MX_GPIO_Init+0x1c8>)
 8001e1c:	f001 faa4 	bl	8003368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001e20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001e26:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001e2a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001e30:	f107 0314 	add.w	r3, r7, #20
 8001e34:	4619      	mov	r1, r3
 8001e36:	4835      	ldr	r0, [pc, #212]	; (8001f0c <MX_GPIO_Init+0x1bc>)
 8001e38:	f001 f8fa 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC2 PC8 PCPin
                           PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_8|WEB_OK_Pin
 8001e3c:	f640 5305 	movw	r3, #3333	; 0xd05
 8001e40:	617b      	str	r3, [r7, #20]
                          |WEB_EAT_DRUG_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e4a:	f107 0314 	add.w	r3, r7, #20
 8001e4e:	4619      	mov	r1, r3
 8001e50:	482e      	ldr	r0, [pc, #184]	; (8001f0c <MX_GPIO_Init+0x1bc>)
 8001e52:	f001 f8ed 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC1 PCPin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|WEB_ERROR_Pin;
 8001e56:	f241 0302 	movw	r3, #4098	; 0x1002
 8001e5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2300      	movs	r3, #0
 8001e66:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e68:	f107 0314 	add.w	r3, r7, #20
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4827      	ldr	r0, [pc, #156]	; (8001f0c <MX_GPIO_Init+0x1bc>)
 8001e70:	f001 f8de 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA4 PAPin PAPin
                           PA8 PA9 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|Buzzer_Pin|OrangeLight_Pin
 8001e74:	f241 3372 	movw	r3, #4978	; 0x1372
 8001e78:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e7a:	2301      	movs	r3, #1
 8001e7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e82:	2300      	movs	r3, #0
 8001e84:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e86:	f107 0314 	add.w	r3, r7, #20
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	4820      	ldr	r0, [pc, #128]	; (8001f10 <MX_GPIO_Init+0x1c0>)
 8001e8e:	f001 f8cf 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PB9 */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_RS_Pin|LCD_CS_Pin|GPIO_PIN_9;
 8001e92:	f44f 4352 	mov.w	r3, #53760	; 0xd200
 8001e96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e98:	2301      	movs	r3, #1
 8001e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ea4:	f107 0314 	add.w	r3, r7, #20
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	481a      	ldr	r0, [pc, #104]	; (8001f14 <MX_GPIO_Init+0x1c4>)
 8001eac:	f001 f8c0 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = EMERGENCY_Stop_Pin;
 8001eb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001eb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(EMERGENCY_Stop_GPIO_Port, &GPIO_InitStruct);
 8001ebe:	f107 0314 	add.w	r3, r7, #20
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	4813      	ldr	r0, [pc, #76]	; (8001f14 <MX_GPIO_Init+0x1c4>)
 8001ec6:	f001 f8b3 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001eca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001ece:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed8:	f107 0314 	add.w	r3, r7, #20
 8001edc:	4619      	mov	r1, r3
 8001ede:	480c      	ldr	r0, [pc, #48]	; (8001f10 <MX_GPIO_Init+0x1c0>)
 8001ee0:	f001 f8a6 	bl	8003030 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = WEB_FINISH_INJECT_Pin;
 8001ee4:	2304      	movs	r3, #4
 8001ee6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eec:	2300      	movs	r3, #0
 8001eee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(WEB_FINISH_INJECT_GPIO_Port, &GPIO_InitStruct);
 8001ef4:	f107 0314 	add.w	r3, r7, #20
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4807      	ldr	r0, [pc, #28]	; (8001f18 <MX_GPIO_Init+0x1c8>)
 8001efc:	f001 f898 	bl	8003030 <HAL_GPIO_Init>

}
 8001f00:	bf00      	nop
 8001f02:	3728      	adds	r7, #40	; 0x28
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40023800 	.word	0x40023800
 8001f0c:	40020800 	.word	0x40020800
 8001f10:	40020000 	.word	0x40020000
 8001f14:	40020400 	.word	0x40020400
 8001f18:	40020c00 	.word	0x40020c00

08001f1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f20:	f000 ff3e 	bl	8002da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f24:	f000 f810 	bl	8001f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f28:	f7ff ff12 	bl	8001d50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001f2c:	f000 fe9c 	bl	8002c68 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 8001f30:	f000 f888 	bl	8002044 <MX_SPI1_Init>
  MX_TIM3_Init();
 8001f34:	f000 fe28 	bl	8002b88 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8001f38:	f003 f8f0 	bl	800511c <osKernelInitialize>
  MX_FREERTOS_Init();
 8001f3c:	f7ff f8b0 	bl	80010a0 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001f40:	f003 f910 	bl	8005164 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f44:	e7fe      	b.n	8001f44 <main+0x28>
	...

08001f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b094      	sub	sp, #80	; 0x50
 8001f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f4e:	f107 0320 	add.w	r3, r7, #32
 8001f52:	2230      	movs	r2, #48	; 0x30
 8001f54:	2100      	movs	r1, #0
 8001f56:	4618      	mov	r0, r3
 8001f58:	f005 fe58 	bl	8007c0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
 8001f6a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
 8001f70:	4b28      	ldr	r3, [pc, #160]	; (8002014 <SystemClock_Config+0xcc>)
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	4a27      	ldr	r2, [pc, #156]	; (8002014 <SystemClock_Config+0xcc>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6413      	str	r3, [r2, #64]	; 0x40
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <SystemClock_Config+0xcc>)
 8001f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60bb      	str	r3, [r7, #8]
 8001f86:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001f88:	2300      	movs	r3, #0
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	4b22      	ldr	r3, [pc, #136]	; (8002018 <SystemClock_Config+0xd0>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001f94:	4a20      	ldr	r2, [pc, #128]	; (8002018 <SystemClock_Config+0xd0>)
 8001f96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f9a:	6013      	str	r3, [r2, #0]
 8001f9c:	4b1e      	ldr	r3, [pc, #120]	; (8002018 <SystemClock_Config+0xd0>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001fa4:	607b      	str	r3, [r7, #4]
 8001fa6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001fac:	2301      	movs	r3, #1
 8001fae:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001fb0:	2310      	movs	r3, #16
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001fbc:	2308      	movs	r3, #8
 8001fbe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001fc0:	2348      	movs	r3, #72	; 0x48
 8001fc2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001fc4:	2302      	movs	r3, #2
 8001fc6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001fc8:	2307      	movs	r3, #7
 8001fca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fcc:	f107 0320 	add.w	r3, r7, #32
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f001 f9fd 	bl	80033d0 <HAL_RCC_OscConfig>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fdc:	f000 f82d 	bl	800203a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001fe0:	230f      	movs	r3, #15
 8001fe2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001fe4:	2302      	movs	r3, #2
 8001fe6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ff6:	f107 030c 	add.w	r3, r7, #12
 8001ffa:	2102      	movs	r1, #2
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f001 fc5f 	bl	80038c0 <HAL_RCC_ClockConfig>
 8002002:	4603      	mov	r3, r0
 8002004:	2b00      	cmp	r3, #0
 8002006:	d001      	beq.n	800200c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8002008:	f000 f817 	bl	800203a <Error_Handler>
  }
}
 800200c:	bf00      	nop
 800200e:	3750      	adds	r7, #80	; 0x50
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	40007000 	.word	0x40007000

0800201c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800202c:	d101      	bne.n	8002032 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800202e:	f000 fed9 	bl	8002de4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002032:	bf00      	nop
 8002034:	3708      	adds	r7, #8
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}

0800203a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800203e:	b672      	cpsid	i
}
 8002040:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002042:	e7fe      	b.n	8002042 <Error_Handler+0x8>

08002044 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002048:	4b17      	ldr	r3, [pc, #92]	; (80020a8 <MX_SPI1_Init+0x64>)
 800204a:	4a18      	ldr	r2, [pc, #96]	; (80020ac <MX_SPI1_Init+0x68>)
 800204c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800204e:	4b16      	ldr	r3, [pc, #88]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002050:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002054:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002056:	4b14      	ldr	r3, [pc, #80]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002058:	2200      	movs	r2, #0
 800205a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <MX_SPI1_Init+0x64>)
 800205e:	2200      	movs	r2, #0
 8002060:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002062:	4b11      	ldr	r3, [pc, #68]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002064:	2200      	movs	r2, #0
 8002066:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002068:	4b0f      	ldr	r3, [pc, #60]	; (80020a8 <MX_SPI1_Init+0x64>)
 800206a:	2200      	movs	r2, #0
 800206c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800206e:	4b0e      	ldr	r3, [pc, #56]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002070:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002074:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002076:	4b0c      	ldr	r3, [pc, #48]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002078:	2220      	movs	r2, #32
 800207a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800207c:	4b0a      	ldr	r3, [pc, #40]	; (80020a8 <MX_SPI1_Init+0x64>)
 800207e:	2200      	movs	r2, #0
 8002080:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002082:	4b09      	ldr	r3, [pc, #36]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002084:	2200      	movs	r2, #0
 8002086:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002088:	4b07      	ldr	r3, [pc, #28]	; (80020a8 <MX_SPI1_Init+0x64>)
 800208a:	2200      	movs	r2, #0
 800208c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800208e:	4b06      	ldr	r3, [pc, #24]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002090:	220a      	movs	r2, #10
 8002092:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002094:	4804      	ldr	r0, [pc, #16]	; (80020a8 <MX_SPI1_Init+0x64>)
 8002096:	f001 fe65 	bl	8003d64 <HAL_SPI_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80020a0:	f7ff ffcb 	bl	800203a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200000e8 	.word	0x200000e8
 80020ac:	40013000 	.word	0x40013000

080020b0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b08a      	sub	sp, #40	; 0x28
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b8:	f107 0314 	add.w	r3, r7, #20
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
 80020c0:	605a      	str	r2, [r3, #4]
 80020c2:	609a      	str	r2, [r3, #8]
 80020c4:	60da      	str	r2, [r3, #12]
 80020c6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4a19      	ldr	r2, [pc, #100]	; (8002134 <HAL_SPI_MspInit+0x84>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d12b      	bne.n	800212a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b18      	ldr	r3, [pc, #96]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020da:	4a17      	ldr	r2, [pc, #92]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020e0:	6453      	str	r3, [r2, #68]	; 0x44
 80020e2:	4b15      	ldr	r3, [pc, #84]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b11      	ldr	r3, [pc, #68]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a10      	ldr	r2, [pc, #64]	; (8002138 <HAL_SPI_MspInit+0x88>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b0e      	ldr	r3, [pc, #56]	; (8002138 <HAL_SPI_MspInit+0x88>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800210a:	2328      	movs	r3, #40	; 0x28
 800210c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800210e:	2302      	movs	r3, #2
 8002110:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002112:	2300      	movs	r3, #0
 8002114:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002116:	2303      	movs	r3, #3
 8002118:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800211a:	2305      	movs	r3, #5
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800211e:	f107 0314 	add.w	r3, r7, #20
 8002122:	4619      	mov	r1, r3
 8002124:	4805      	ldr	r0, [pc, #20]	; (800213c <HAL_SPI_MspInit+0x8c>)
 8002126:	f000 ff83 	bl	8003030 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800212a:	bf00      	nop
 800212c:	3728      	adds	r7, #40	; 0x28
 800212e:	46bd      	mov	sp, r7
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	40013000 	.word	0x40013000
 8002138:	40023800 	.word	0x40023800
 800213c:	40020400 	.word	0x40020400

08002140 <ST7735_SetAddressWindow>:
int32_t Ymax,Ymin,X;        // X goes from 0 to 127
int32_t Yrange; //YrangeDiv2;
int TimeIndex;
uint16_t PlotBGColor;
 
static void ST7735_SetAddressWindow(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002140:	b590      	push	{r4, r7, lr}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	4604      	mov	r4, r0
 8002148:	4608      	mov	r0, r1
 800214a:	4611      	mov	r1, r2
 800214c:	461a      	mov	r2, r3
 800214e:	4623      	mov	r3, r4
 8002150:	71fb      	strb	r3, [r7, #7]
 8002152:	4603      	mov	r3, r0
 8002154:	71bb      	strb	r3, [r7, #6]
 8002156:	460b      	mov	r3, r1
 8002158:	717b      	strb	r3, [r7, #5]
 800215a:	4613      	mov	r3, r2
 800215c:	713b      	strb	r3, [r7, #4]
    lcd7735_sendCmd(ST7735_CASET); // Column addr set
 800215e:	202a      	movs	r0, #42	; 0x2a
 8002160:	f000 fbfa 	bl	8002958 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);            // XS15 ~ XS8
 8002164:	2000      	movs	r0, #0
 8002166:	f000 fc0d 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(x0+ST7735_XSTART);     // XSTART       XS7 ~ XS0
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	4618      	mov	r0, r3
 800216e:	f000 fc09 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(0x00);            // XE15 ~ XE8
 8002172:	2000      	movs	r0, #0
 8002174:	f000 fc06 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(x1+ST7735_XSTART);     // XEND         XE7 ~ XE0
 8002178:	797b      	ldrb	r3, [r7, #5]
 800217a:	4618      	mov	r0, r3
 800217c:	f000 fc02 	bl	8002984 <lcd7735_sendData>
 
		lcd7735_sendCmd(ST7735_RASET); // Row addr set
 8002180:	202b      	movs	r0, #43	; 0x2b
 8002182:	f000 fbe9 	bl	8002958 <lcd7735_sendCmd>
		lcd7735_sendData(0x00);
 8002186:	2000      	movs	r0, #0
 8002188:	f000 fbfc 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(y0+ST7735_YSTART);     // YSTART
 800218c:	79bb      	ldrb	r3, [r7, #6]
 800218e:	4618      	mov	r0, r3
 8002190:	f000 fbf8 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(0x00);
 8002194:	2000      	movs	r0, #0
 8002196:	f000 fbf5 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(y1+ST7735_YSTART);     // YEND
 800219a:	793b      	ldrb	r3, [r7, #4]
 800219c:	4618      	mov	r0, r3
 800219e:	f000 fbf1 	bl	8002984 <lcd7735_sendData>
	
		lcd7735_sendCmd(ST7735_RAMWR); 
 80021a2:	202c      	movs	r0, #44	; 0x2c
 80021a4:	f000 fbd8 	bl	8002958 <lcd7735_sendCmd>
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}

080021b0 <ST7735_Init>:
void ST7735_Init() {
 80021b0:	b580      	push	{r7, lr}
 80021b2:	af00      	add	r7, sp, #0
    //ST7735_Select();
	  LCD_CS0;
 80021b4:	2200      	movs	r2, #0
 80021b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021ba:	4810      	ldr	r0, [pc, #64]	; (80021fc <ST7735_Init+0x4c>)
 80021bc:	f001 f8d4 	bl	8003368 <HAL_GPIO_WritePin>
    //ST7735_Reset();
	  LCD_RST0;
 80021c0:	2200      	movs	r2, #0
 80021c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021c6:	480d      	ldr	r0, [pc, #52]	; (80021fc <ST7735_Init+0x4c>)
 80021c8:	f001 f8ce 	bl	8003368 <HAL_GPIO_WritePin>
		HAL_Delay(7);
 80021cc:	2007      	movs	r0, #7
 80021ce:	f000 fe29 	bl	8002e24 <HAL_Delay>
		LCD_RST1;
 80021d2:	2201      	movs	r2, #1
 80021d4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80021d8:	4808      	ldr	r0, [pc, #32]	; (80021fc <ST7735_Init+0x4c>)
 80021da:	f001 f8c5 	bl	8003368 <HAL_GPIO_WritePin>
	
    //ST7735_ExecuteCommandList(init_cmds1);
		ST7735_Init_Command1();
 80021de:	f000 f80f 	bl	8002200 <ST7735_Init_Command1>
    //ST7735_ExecuteCommandList(init_cmds2);
		ST7735_Init_Command2();
 80021e2:	f000 f893 	bl	800230c <ST7735_Init_Command2>
    //ST7735_ExecuteCommandList(init_cmds3);
		ST7735_Init_Command3();
 80021e6:	f000 f8b3 	bl	8002350 <ST7735_Init_Command3>
	
    //ST7735_Unselect();
		LCD_CS1;		
 80021ea:	2201      	movs	r2, #1
 80021ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80021f0:	4802      	ldr	r0, [pc, #8]	; (80021fc <ST7735_Init+0x4c>)
 80021f2:	f001 f8b9 	bl	8003368 <HAL_GPIO_WritePin>
}
 80021f6:	bf00      	nop
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40020400 	.word	0x40020400

08002200 <ST7735_Init_Command1>:
 
void ST7735_Init_Command1(void)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_SWRESET);		//  1: Software reset
 8002204:	2001      	movs	r0, #1
 8002206:	f000 fba7 	bl	8002958 <lcd7735_sendCmd>
	HAL_Delay(150);
 800220a:	2096      	movs	r0, #150	; 0x96
 800220c:	f000 fe0a 	bl	8002e24 <HAL_Delay>
	lcd7735_sendCmd(ST7735_SLPOUT);			//  2: Out of sleep mode
 8002210:	2011      	movs	r0, #17
 8002212:	f000 fba1 	bl	8002958 <lcd7735_sendCmd>
	HAL_Delay(500);
 8002216:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800221a:	f000 fe03 	bl	8002e24 <HAL_Delay>
	lcd7735_sendCmd(ST7735_FRMCTR1);		//  3: Frame rate ctrl - normal mode
 800221e:	20b1      	movs	r0, #177	; 0xb1
 8002220:	f000 fb9a 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Rate = fosc/(1x2+40) * (LINE+2C+2D)
 8002224:	2001      	movs	r0, #1
 8002226:	f000 fbad 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800222a:	202c      	movs	r0, #44	; 0x2c
 800222c:	f000 fbaa 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8002230:	202d      	movs	r0, #45	; 0x2d
 8002232:	f000 fba7 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR2);		//  4: Frame rate control - idle mode
 8002236:	20b2      	movs	r0, #178	; 0xb2
 8002238:	f000 fb8e 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//  Rate = fosc/(1x2+40) * (LINE+2C+2D)
 800223c:	2001      	movs	r0, #1
 800223e:	f000 fba1 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 8002242:	202c      	movs	r0, #44	; 0x2c
 8002244:	f000 fb9e 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8002248:	202d      	movs	r0, #45	; 0x2d
 800224a:	f000 fb9b 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_FRMCTR3);		//  5: Frame rate ctrl - partial mode
 800224e:	20b3      	movs	r0, #179	; 0xb3
 8002250:	f000 fb82 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x01);							//     Dot inversion mode
 8002254:	2001      	movs	r0, #1
 8002256:	f000 fb95 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800225a:	202c      	movs	r0, #44	; 0x2c
 800225c:	f000 fb92 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8002260:	202d      	movs	r0, #45	; 0x2d
 8002262:	f000 fb8f 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x01);							//     Line inversion mode
 8002266:	2001      	movs	r0, #1
 8002268:	f000 fb8c 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 800226c:	202c      	movs	r0, #44	; 0x2c
 800226e:	f000 fb89 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8002272:	202d      	movs	r0, #45	; 0x2d
 8002274:	f000 fb86 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVCTR);			//  6: Display inversion ctrl
 8002278:	20b4      	movs	r0, #180	; 0xb4
 800227a:	f000 fb6d 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x07);							//     No inversion
 800227e:	2007      	movs	r0, #7
 8002280:	f000 fb80 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR1);			//  7: Power control
 8002284:	20c0      	movs	r0, #192	; 0xc0
 8002286:	f000 fb67 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0xA2);
 800228a:	20a2      	movs	r0, #162	; 0xa2
 800228c:	f000 fb7a 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x02);							//     -4.6V
 8002290:	2002      	movs	r0, #2
 8002292:	f000 fb77 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x84);							//     AUTO mode
 8002296:	2084      	movs	r0, #132	; 0x84
 8002298:	f000 fb74 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR2);			//  8: Power control
 800229c:	20c1      	movs	r0, #193	; 0xc1
 800229e:	f000 fb5b 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0xC5);							//     VGH25 = 2.4C VGSEL = -10 VGH = 3 * AVDD
 80022a2:	20c5      	movs	r0, #197	; 0xc5
 80022a4:	f000 fb6e 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR3);			//  9: Power control
 80022a8:	20c2      	movs	r0, #194	; 0xc2
 80022aa:	f000 fb55 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x0A);							//     Opamp current small
 80022ae:	200a      	movs	r0, #10
 80022b0:	f000 fb68 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     Boost frequency
 80022b4:	2000      	movs	r0, #0
 80022b6:	f000 fb65 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR4);			// 10: Power control
 80022ba:	20c3      	movs	r0, #195	; 0xc3
 80022bc:	f000 fb4c 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);							//     BCLK/2, Opamp current small & Medium low
 80022c0:	208a      	movs	r0, #138	; 0x8a
 80022c2:	f000 fb5f 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2A);
 80022c6:	202a      	movs	r0, #42	; 0x2a
 80022c8:	f000 fb5c 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_PWCTR5);			// 11: Power control
 80022cc:	20c4      	movs	r0, #196	; 0xc4
 80022ce:	f000 fb43 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x8A);
 80022d2:	208a      	movs	r0, #138	; 0x8a
 80022d4:	f000 fb56 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0xEE);
 80022d8:	20ee      	movs	r0, #238	; 0xee
 80022da:	f000 fb53 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_VMCTR1);			// 12: Power control
 80022de:	20c5      	movs	r0, #197	; 0xc5
 80022e0:	f000 fb3a 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x0E);
 80022e4:	200e      	movs	r0, #14
 80022e6:	f000 fb4d 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_INVOFF);			// 13: Don't invert display
 80022ea:	2020      	movs	r0, #32
 80022ec:	f000 fb34 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendCmd(ST7735_MADCTL);			// 14: Memory access control (directions)
 80022f0:	2036      	movs	r0, #54	; 0x36
 80022f2:	f000 fb31 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(ST7735_ROTATION);	//     row addr/col addr, bottom to top refresh
 80022f6:	20c0      	movs	r0, #192	; 0xc0
 80022f8:	f000 fb44 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_COLMOD);			// 15: set color mode
 80022fc:	203a      	movs	r0, #58	; 0x3a
 80022fe:	f000 fb2b 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x05);							//     16-bit color
 8002302:	2005      	movs	r0, #5
 8002304:	f000 fb3e 	bl	8002984 <lcd7735_sendData>
}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}

0800230c <ST7735_Init_Command2>:
 
void ST7735_Init_Command2(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_CASET);			//  1: Column addr set
 8002310:	202a      	movs	r0, #42	; 0x2a
 8002312:	f000 fb21 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8002316:	2000      	movs	r0, #0
 8002318:	f000 fb34 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 800231c:	2000      	movs	r0, #0
 800231e:	f000 fb31 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8002322:	2000      	movs	r0, #0
 8002324:	f000 fb2e 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8002328:	207f      	movs	r0, #127	; 0x7f
 800232a:	f000 fb2b 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_RASET);			//  2: Row addr set
 800232e:	202b      	movs	r0, #43	; 0x2b
 8002330:	f000 fb12 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x00);							//     XSTART = 0
 8002334:	2000      	movs	r0, #0
 8002336:	f000 fb25 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 800233a:	2000      	movs	r0, #0
 800233c:	f000 fb22 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);							//     XEND = 127
 8002340:	2000      	movs	r0, #0
 8002342:	f000 fb1f 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x7F);
 8002346:	207f      	movs	r0, #127	; 0x7f
 8002348:	f000 fb1c 	bl	8002984 <lcd7735_sendData>
}
 800234c:	bf00      	nop
 800234e:	bd80      	pop	{r7, pc}

08002350 <ST7735_Init_Command3>:
 
void ST7735_Init_Command3(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	lcd7735_sendCmd(ST7735_GMCTRP1);  //  1: Magical unicorn dust
 8002354:	20e0      	movs	r0, #224	; 0xe0
 8002356:	f000 faff 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x02);
 800235a:	2002      	movs	r0, #2
 800235c:	f000 fb12 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x1C);
 8002360:	201c      	movs	r0, #28
 8002362:	f000 fb0f 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 8002366:	2007      	movs	r0, #7
 8002368:	f000 fb0c 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x12);
 800236c:	2012      	movs	r0, #18
 800236e:	f000 fb09 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 8002372:	2037      	movs	r0, #55	; 0x37
 8002374:	f000 fb06 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x32);
 8002378:	2032      	movs	r0, #50	; 0x32
 800237a:	f000 fb03 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 800237e:	2029      	movs	r0, #41	; 0x29
 8002380:	f000 fb00 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 8002384:	202d      	movs	r0, #45	; 0x2d
 8002386:	f000 fafd 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 800238a:	2029      	movs	r0, #41	; 0x29
 800238c:	f000 fafa 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x25);
 8002390:	2025      	movs	r0, #37	; 0x25
 8002392:	f000 faf7 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2B);
 8002396:	202b      	movs	r0, #43	; 0x2b
 8002398:	f000 faf4 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x39);
 800239c:	2039      	movs	r0, #57	; 0x39
 800239e:	f000 faf1 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 80023a2:	2000      	movs	r0, #0
 80023a4:	f000 faee 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x01);
 80023a8:	2001      	movs	r0, #1
 80023aa:	f000 faeb 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x03);
 80023ae:	2003      	movs	r0, #3
 80023b0:	f000 fae8 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 80023b4:	2010      	movs	r0, #16
 80023b6:	f000 fae5 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_GMCTRN1);  //  2: Sparkles and rainbows
 80023ba:	20e1      	movs	r0, #225	; 0xe1
 80023bc:	f000 facc 	bl	8002958 <lcd7735_sendCmd>
	lcd7735_sendData(0x03);
 80023c0:	2003      	movs	r0, #3
 80023c2:	f000 fadf 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x1D);
 80023c6:	201d      	movs	r0, #29
 80023c8:	f000 fadc 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x07);
 80023cc:	2007      	movs	r0, #7
 80023ce:	f000 fad9 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x06);
 80023d2:	2006      	movs	r0, #6
 80023d4:	f000 fad6 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 80023d8:	202e      	movs	r0, #46	; 0x2e
 80023da:	f000 fad3 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2C);
 80023de:	202c      	movs	r0, #44	; 0x2c
 80023e0:	f000 fad0 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x29);
 80023e4:	2029      	movs	r0, #41	; 0x29
 80023e6:	f000 facd 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2D);
 80023ea:	202d      	movs	r0, #45	; 0x2d
 80023ec:	f000 faca 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 80023f0:	202e      	movs	r0, #46	; 0x2e
 80023f2:	f000 fac7 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x2E);
 80023f6:	202e      	movs	r0, #46	; 0x2e
 80023f8:	f000 fac4 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x37);
 80023fc:	2037      	movs	r0, #55	; 0x37
 80023fe:	f000 fac1 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x3F);
 8002402:	203f      	movs	r0, #63	; 0x3f
 8002404:	f000 fabe 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 8002408:	2000      	movs	r0, #0
 800240a:	f000 fabb 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x00);
 800240e:	2000      	movs	r0, #0
 8002410:	f000 fab8 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x02);
 8002414:	2002      	movs	r0, #2
 8002416:	f000 fab5 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendData(0x10);
 800241a:	2010      	movs	r0, #16
 800241c:	f000 fab2 	bl	8002984 <lcd7735_sendData>
	lcd7735_sendCmd(ST7735_NORON);
 8002420:	2013      	movs	r0, #19
 8002422:	f000 fa99 	bl	8002958 <lcd7735_sendCmd>
	HAL_Delay(10);
 8002426:	200a      	movs	r0, #10
 8002428:	f000 fcfc 	bl	8002e24 <HAL_Delay>
	lcd7735_sendCmd(ST7735_DISPON);
 800242c:	2029      	movs	r0, #41	; 0x29
 800242e:	f000 fa93 	bl	8002958 <lcd7735_sendCmd>
	HAL_Delay(100);
 8002432:	2064      	movs	r0, #100	; 0x64
 8002434:	f000 fcf6 	bl	8002e24 <HAL_Delay>
}
 8002438:	bf00      	nop
 800243a:	bd80      	pop	{r7, pc}

0800243c <ST7735_DrawPixel>:
    TimeIndex = 0;
  }
  ST7735_DrawFastVLine(TimeIndex + 11, 17, 100, PlotBGColor);
}

void ST7735_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	80fb      	strh	r3, [r7, #6]
 8002446:	460b      	mov	r3, r1
 8002448:	80bb      	strh	r3, [r7, #4]
 800244a:	4613      	mov	r3, r2
 800244c:	807b      	strh	r3, [r7, #2]
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT))
 800244e:	88fb      	ldrh	r3, [r7, #6]
 8002450:	2b7f      	cmp	r3, #127	; 0x7f
 8002452:	d82d      	bhi.n	80024b0 <ST7735_DrawPixel+0x74>
 8002454:	88bb      	ldrh	r3, [r7, #4]
 8002456:	2b9f      	cmp	r3, #159	; 0x9f
 8002458:	d82a      	bhi.n	80024b0 <ST7735_DrawPixel+0x74>
        return;
 
    LCD_CS0;
 800245a:	2200      	movs	r2, #0
 800245c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002460:	4815      	ldr	r0, [pc, #84]	; (80024b8 <ST7735_DrawPixel+0x7c>)
 8002462:	f000 ff81 	bl	8003368 <HAL_GPIO_WritePin>
 
    ST7735_SetAddressWindow(x, y, x+1, y+1);
 8002466:	88fb      	ldrh	r3, [r7, #6]
 8002468:	b2d8      	uxtb	r0, r3
 800246a:	88bb      	ldrh	r3, [r7, #4]
 800246c:	b2d9      	uxtb	r1, r3
 800246e:	88fb      	ldrh	r3, [r7, #6]
 8002470:	b2db      	uxtb	r3, r3
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	88bb      	ldrh	r3, [r7, #4]
 8002478:	b2db      	uxtb	r3, r3
 800247a:	3301      	adds	r3, #1
 800247c:	b2db      	uxtb	r3, r3
 800247e:	f7ff fe5f 	bl	8002140 <ST7735_SetAddressWindow>
    uint8_t data[2];
		data[0] = color >> 8;
 8002482:	887b      	ldrh	r3, [r7, #2]
 8002484:	0a1b      	lsrs	r3, r3, #8
 8002486:	b29b      	uxth	r3, r3
 8002488:	b2db      	uxtb	r3, r3
 800248a:	733b      	strb	r3, [r7, #12]
		data[1] = color & 0xFF;
 800248c:	887b      	ldrh	r3, [r7, #2]
 800248e:	b2db      	uxtb	r3, r3
 8002490:	737b      	strb	r3, [r7, #13]
		lcd7735_sendData(data[0]);
 8002492:	7b3b      	ldrb	r3, [r7, #12]
 8002494:	4618      	mov	r0, r3
 8002496:	f000 fa75 	bl	8002984 <lcd7735_sendData>
		lcd7735_sendData(data[1]);
 800249a:	7b7b      	ldrb	r3, [r7, #13]
 800249c:	4618      	mov	r0, r3
 800249e:	f000 fa71 	bl	8002984 <lcd7735_sendData>
 
    LCD_CS1;  //unselect
 80024a2:	2201      	movs	r2, #1
 80024a4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024a8:	4803      	ldr	r0, [pc, #12]	; (80024b8 <ST7735_DrawPixel+0x7c>)
 80024aa:	f000 ff5d 	bl	8003368 <HAL_GPIO_WritePin>
 80024ae:	e000      	b.n	80024b2 <ST7735_DrawPixel+0x76>
        return;
 80024b0:	bf00      	nop
}
 80024b2:	3710      	adds	r7, #16
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}
 80024b8:	40020400 	.word	0x40020400

080024bc <ST7735_DrawString>:
uint32_t ST7735_DrawString(uint16_t x, uint16_t y, char *pt, uint16_t textColor, uint16_t bgColor, uint8_t size, uint8_t space){
 80024bc:	b5b0      	push	{r4, r5, r7, lr}
 80024be:	b088      	sub	sp, #32
 80024c0:	af02      	add	r7, sp, #8
 80024c2:	60ba      	str	r2, [r7, #8]
 80024c4:	461a      	mov	r2, r3
 80024c6:	4603      	mov	r3, r0
 80024c8:	81fb      	strh	r3, [r7, #14]
 80024ca:	460b      	mov	r3, r1
 80024cc:	81bb      	strh	r3, [r7, #12]
 80024ce:	4613      	mov	r3, r2
 80024d0:	80fb      	strh	r3, [r7, #6]
  uint32_t count = 0;
 80024d2:	2300      	movs	r3, #0
 80024d4:	617b      	str	r3, [r7, #20]
  //if(y>15) return 0;
  while(*pt){
 80024d6:	e01d      	b.n	8002514 <ST7735_DrawString+0x58>
    ST7735_DrawCharS(x, y, *pt, textColor, bgColor, size);
 80024d8:	f9b7 000e 	ldrsh.w	r0, [r7, #14]
 80024dc:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 80024e0:	68bb      	ldr	r3, [r7, #8]
 80024e2:	781c      	ldrb	r4, [r3, #0]
 80024e4:	f9b7 5006 	ldrsh.w	r5, [r7, #6]
 80024e8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 80024ec:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80024f0:	9201      	str	r2, [sp, #4]
 80024f2:	9300      	str	r3, [sp, #0]
 80024f4:	462b      	mov	r3, r5
 80024f6:	4622      	mov	r2, r4
 80024f8:	f000 f816 	bl	8002528 <ST7735_DrawCharS>
    pt++;
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	3301      	adds	r3, #1
 8002500:	60bb      	str	r3, [r7, #8]
    x = x+space;
 8002502:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8002506:	b29a      	uxth	r2, r3
 8002508:	89fb      	ldrh	r3, [r7, #14]
 800250a:	4413      	add	r3, r2
 800250c:	81fb      	strh	r3, [r7, #14]
    //if(x>20) return count;  // number of characters printed
    count++;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	3301      	adds	r3, #1
 8002512:	617b      	str	r3, [r7, #20]
  while(*pt){
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	781b      	ldrb	r3, [r3, #0]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d1dd      	bne.n	80024d8 <ST7735_DrawString+0x1c>
  }
  return count;  // number of characters printed
 800251c:	697b      	ldr	r3, [r7, #20]
}
 800251e:	4618      	mov	r0, r3
 8002520:	3718      	adds	r7, #24
 8002522:	46bd      	mov	sp, r7
 8002524:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002528 <ST7735_DrawCharS>:
void ST7735_DrawCharS(int16_t x, int16_t y, char c, int16_t textColor, int16_t bgColor, uint8_t size){
 8002528:	b590      	push	{r4, r7, lr}
 800252a:	b089      	sub	sp, #36	; 0x24
 800252c:	af02      	add	r7, sp, #8
 800252e:	4604      	mov	r4, r0
 8002530:	4608      	mov	r0, r1
 8002532:	4611      	mov	r1, r2
 8002534:	461a      	mov	r2, r3
 8002536:	4623      	mov	r3, r4
 8002538:	80fb      	strh	r3, [r7, #6]
 800253a:	4603      	mov	r3, r0
 800253c:	80bb      	strh	r3, [r7, #4]
 800253e:	460b      	mov	r3, r1
 8002540:	70fb      	strb	r3, [r7, #3]
 8002542:	4613      	mov	r3, r2
 8002544:	803b      	strh	r3, [r7, #0]
  uint8_t line; 
  int32_t i, j;
  if((x >= ST7735_WIDTH)            || 
 8002546:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800254a:	2b7f      	cmp	r3, #127	; 0x7f
 800254c:	f300 80b3 	bgt.w	80026b6 <ST7735_DrawCharS+0x18e>
 8002550:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002554:	2b9f      	cmp	r3, #159	; 0x9f
 8002556:	f300 80ae 	bgt.w	80026b6 <ST7735_DrawCharS+0x18e>
     (y >= ST7735_HEIGHT)           || 
     ((x + 5 * size - 1) < 0) || 
 800255a:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800255e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8002562:	4613      	mov	r3, r2
 8002564:	009b      	lsls	r3, r3, #2
 8002566:	4413      	add	r3, r2
 8002568:	440b      	add	r3, r1
     (y >= ST7735_HEIGHT)           || 
 800256a:	2b00      	cmp	r3, #0
 800256c:	f340 80a3 	ble.w	80026b6 <ST7735_DrawCharS+0x18e>
     ((y + 8 * size - 1) < 0))   
 8002570:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8002574:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002578:	00db      	lsls	r3, r3, #3
 800257a:	4413      	add	r3, r2
     ((x + 5 * size - 1) < 0) || 
 800257c:	2b00      	cmp	r3, #0
 800257e:	f340 809a 	ble.w	80026b6 <ST7735_DrawCharS+0x18e>
    return;
 
  for (i=0; i<6; i++ ) {
 8002582:	2300      	movs	r3, #0
 8002584:	613b      	str	r3, [r7, #16]
 8002586:	e091      	b.n	80026ac <ST7735_DrawCharS+0x184>
    if (i == 5)
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	2b05      	cmp	r3, #5
 800258c:	d102      	bne.n	8002594 <ST7735_DrawCharS+0x6c>
      line = 0x0;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]
 8002592:	e008      	b.n	80025a6 <ST7735_DrawCharS+0x7e>
    else
      line = Font[(c*5)+i];
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	441a      	add	r2, r3
 800259c:	693b      	ldr	r3, [r7, #16]
 800259e:	4413      	add	r3, r2
 80025a0:	4a47      	ldr	r2, [pc, #284]	; (80026c0 <ST7735_DrawCharS+0x198>)
 80025a2:	5cd3      	ldrb	r3, [r2, r3]
 80025a4:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 80025a6:	2300      	movs	r3, #0
 80025a8:	60fb      	str	r3, [r7, #12]
 80025aa:	e079      	b.n	80026a0 <ST7735_DrawCharS+0x178>
      if (line & 0x1) {
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d034      	beq.n	8002620 <ST7735_DrawCharS+0xf8>
        if (size == 1) 
 80025b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d10e      	bne.n	80025dc <ST7735_DrawCharS+0xb4>
          ST7735_DrawPixel(x+i, y+j, textColor);
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	b29a      	uxth	r2, r3
 80025c2:	88fb      	ldrh	r3, [r7, #6]
 80025c4:	4413      	add	r3, r2
 80025c6:	b298      	uxth	r0, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	b29a      	uxth	r2, r3
 80025cc:	88bb      	ldrh	r3, [r7, #4]
 80025ce:	4413      	add	r3, r2
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	883a      	ldrh	r2, [r7, #0]
 80025d4:	4619      	mov	r1, r3
 80025d6:	f7ff ff31 	bl	800243c <ST7735_DrawPixel>
 80025da:	e05b      	b.n	8002694 <ST7735_DrawCharS+0x16c>
        else {  
          ST7735_FillRectangle(x+(i*size), y+(j*size), size, size, textColor);
 80025dc:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	b29b      	uxth	r3, r3
 80025e6:	fb12 f303 	smulbb	r3, r2, r3
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	4413      	add	r3, r2
 80025f0:	b298      	uxth	r0, r3
 80025f2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80025f6:	b29a      	uxth	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	b29b      	uxth	r3, r3
 80025fc:	fb12 f303 	smulbb	r3, r2, r3
 8002600:	b29a      	uxth	r2, r3
 8002602:	88bb      	ldrh	r3, [r7, #4]
 8002604:	4413      	add	r3, r2
 8002606:	b299      	uxth	r1, r3
 8002608:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800260c:	b29a      	uxth	r2, r3
 800260e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002612:	b29c      	uxth	r4, r3
 8002614:	883b      	ldrh	r3, [r7, #0]
 8002616:	9300      	str	r3, [sp, #0]
 8002618:	4623      	mov	r3, r4
 800261a:	f000 f853 	bl	80026c4 <ST7735_FillRectangle>
 800261e:	e039      	b.n	8002694 <ST7735_DrawCharS+0x16c>
        }
      } else if (bgColor != textColor) {
 8002620:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	; 0x28
 8002624:	f9b7 3000 	ldrsh.w	r3, [r7]
 8002628:	429a      	cmp	r2, r3
 800262a:	d033      	beq.n	8002694 <ST7735_DrawCharS+0x16c>
        if (size == 1) // default size
 800262c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002630:	2b01      	cmp	r3, #1
 8002632:	d10e      	bne.n	8002652 <ST7735_DrawCharS+0x12a>
          ST7735_DrawPixel(x+i, y+j, bgColor);
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	b29a      	uxth	r2, r3
 8002638:	88fb      	ldrh	r3, [r7, #6]
 800263a:	4413      	add	r3, r2
 800263c:	b298      	uxth	r0, r3
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	b29a      	uxth	r2, r3
 8002642:	88bb      	ldrh	r3, [r7, #4]
 8002644:	4413      	add	r3, r2
 8002646:	b29b      	uxth	r3, r3
 8002648:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800264a:	4619      	mov	r1, r3
 800264c:	f7ff fef6 	bl	800243c <ST7735_DrawPixel>
 8002650:	e020      	b.n	8002694 <ST7735_DrawCharS+0x16c>
        else {  // big size
         ST7735_FillRectangle(x+i*size, y+j*size, size, size, bgColor);
 8002652:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002656:	b29a      	uxth	r2, r3
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	b29b      	uxth	r3, r3
 800265c:	fb12 f303 	smulbb	r3, r2, r3
 8002660:	b29a      	uxth	r2, r3
 8002662:	88fb      	ldrh	r3, [r7, #6]
 8002664:	4413      	add	r3, r2
 8002666:	b298      	uxth	r0, r3
 8002668:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800266c:	b29a      	uxth	r2, r3
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	b29b      	uxth	r3, r3
 8002672:	fb12 f303 	smulbb	r3, r2, r3
 8002676:	b29a      	uxth	r2, r3
 8002678:	88bb      	ldrh	r3, [r7, #4]
 800267a:	4413      	add	r3, r2
 800267c:	b299      	uxth	r1, r3
 800267e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002682:	b29a      	uxth	r2, r3
 8002684:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8002688:	b29c      	uxth	r4, r3
 800268a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	4623      	mov	r3, r4
 8002690:	f000 f818 	bl	80026c4 <ST7735_FillRectangle>
        }
      }
      line >>= 1;
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	085b      	lsrs	r3, r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
    for (j = 0; j<8; j++) {
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	3301      	adds	r3, #1
 800269e:	60fb      	str	r3, [r7, #12]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	2b07      	cmp	r3, #7
 80026a4:	dd82      	ble.n	80025ac <ST7735_DrawCharS+0x84>
  for (i=0; i<6; i++ ) {
 80026a6:	693b      	ldr	r3, [r7, #16]
 80026a8:	3301      	adds	r3, #1
 80026aa:	613b      	str	r3, [r7, #16]
 80026ac:	693b      	ldr	r3, [r7, #16]
 80026ae:	2b05      	cmp	r3, #5
 80026b0:	f77f af6a 	ble.w	8002588 <ST7735_DrawCharS+0x60>
 80026b4:	e000      	b.n	80026b8 <ST7735_DrawCharS+0x190>
    return;
 80026b6:	bf00      	nop
    }
  }
}
 80026b8:	371c      	adds	r7, #28
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd90      	pop	{r4, r7, pc}
 80026be:	bf00      	nop
 80026c0:	080123a4 	.word	0x080123a4

080026c4 <ST7735_FillRectangle>:
    lcd7735_sendData(lo);
  }
	LCD_CS1;
}
	
void ST7735_FillRectangle(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80026c4:	b590      	push	{r4, r7, lr}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	4604      	mov	r4, r0
 80026cc:	4608      	mov	r0, r1
 80026ce:	4611      	mov	r1, r2
 80026d0:	461a      	mov	r2, r3
 80026d2:	4623      	mov	r3, r4
 80026d4:	80fb      	strh	r3, [r7, #6]
 80026d6:	4603      	mov	r3, r0
 80026d8:	80bb      	strh	r3, [r7, #4]
 80026da:	460b      	mov	r3, r1
 80026dc:	807b      	strh	r3, [r7, #2]
 80026de:	4613      	mov	r3, r2
 80026e0:	803b      	strh	r3, [r7, #0]
    // clipping
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80026e2:	88fb      	ldrh	r3, [r7, #6]
 80026e4:	2b7f      	cmp	r3, #127	; 0x7f
 80026e6:	d85c      	bhi.n	80027a2 <ST7735_FillRectangle+0xde>
 80026e8:	88bb      	ldrh	r3, [r7, #4]
 80026ea:	2b9f      	cmp	r3, #159	; 0x9f
 80026ec:	d859      	bhi.n	80027a2 <ST7735_FillRectangle+0xde>
    if((x + w - 1) >= ST7735_WIDTH) w = ST7735_WIDTH - x;
 80026ee:	88fa      	ldrh	r2, [r7, #6]
 80026f0:	887b      	ldrh	r3, [r7, #2]
 80026f2:	4413      	add	r3, r2
 80026f4:	2b80      	cmp	r3, #128	; 0x80
 80026f6:	dd03      	ble.n	8002700 <ST7735_FillRectangle+0x3c>
 80026f8:	88fb      	ldrh	r3, [r7, #6]
 80026fa:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 80026fe:	807b      	strh	r3, [r7, #2]
    if((y + h - 1) >= ST7735_HEIGHT) h = ST7735_HEIGHT - y;
 8002700:	88ba      	ldrh	r2, [r7, #4]
 8002702:	883b      	ldrh	r3, [r7, #0]
 8002704:	4413      	add	r3, r2
 8002706:	2ba0      	cmp	r3, #160	; 0xa0
 8002708:	dd03      	ble.n	8002712 <ST7735_FillRectangle+0x4e>
 800270a:	88bb      	ldrh	r3, [r7, #4]
 800270c:	f1c3 03a0 	rsb	r3, r3, #160	; 0xa0
 8002710:	803b      	strh	r3, [r7, #0]
 
    LCD_CS0;
 8002712:	2200      	movs	r2, #0
 8002714:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002718:	4824      	ldr	r0, [pc, #144]	; (80027ac <ST7735_FillRectangle+0xe8>)
 800271a:	f000 fe25 	bl	8003368 <HAL_GPIO_WritePin>
    ST7735_SetAddressWindow(x, y, x+w-1, y+h-1);
 800271e:	88fb      	ldrh	r3, [r7, #6]
 8002720:	b2d8      	uxtb	r0, r3
 8002722:	88bb      	ldrh	r3, [r7, #4]
 8002724:	b2d9      	uxtb	r1, r3
 8002726:	88fb      	ldrh	r3, [r7, #6]
 8002728:	b2da      	uxtb	r2, r3
 800272a:	887b      	ldrh	r3, [r7, #2]
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4413      	add	r3, r2
 8002730:	b2db      	uxtb	r3, r3
 8002732:	3b01      	subs	r3, #1
 8002734:	b2dc      	uxtb	r4, r3
 8002736:	88bb      	ldrh	r3, [r7, #4]
 8002738:	b2da      	uxtb	r2, r3
 800273a:	883b      	ldrh	r3, [r7, #0]
 800273c:	b2db      	uxtb	r3, r3
 800273e:	4413      	add	r3, r2
 8002740:	b2db      	uxtb	r3, r3
 8002742:	3b01      	subs	r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	4622      	mov	r2, r4
 8002748:	f7ff fcfa 	bl	8002140 <ST7735_SetAddressWindow>
    LCD_DC1;
 800274c:	2201      	movs	r2, #1
 800274e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002752:	4816      	ldr	r0, [pc, #88]	; (80027ac <ST7735_FillRectangle+0xe8>)
 8002754:	f000 fe08 	bl	8003368 <HAL_GPIO_WritePin>
    for(y = h; y > 0; y--) {
 8002758:	883b      	ldrh	r3, [r7, #0]
 800275a:	80bb      	strh	r3, [r7, #4]
 800275c:	e017      	b.n	800278e <ST7735_FillRectangle+0xca>
        for(x = w; x > 0; x--) {            
 800275e:	887b      	ldrh	r3, [r7, #2]
 8002760:	80fb      	strh	r3, [r7, #6]
 8002762:	e00e      	b.n	8002782 <ST7735_FillRectangle+0xbe>
					lcd7735_sendData(color>>8);
 8002764:	8b3b      	ldrh	r3, [r7, #24]
 8002766:	0a1b      	lsrs	r3, r3, #8
 8002768:	b29b      	uxth	r3, r3
 800276a:	b2db      	uxtb	r3, r3
 800276c:	4618      	mov	r0, r3
 800276e:	f000 f909 	bl	8002984 <lcd7735_sendData>
					lcd7735_sendData(color);
 8002772:	8b3b      	ldrh	r3, [r7, #24]
 8002774:	b2db      	uxtb	r3, r3
 8002776:	4618      	mov	r0, r3
 8002778:	f000 f904 	bl	8002984 <lcd7735_sendData>
        for(x = w; x > 0; x--) {            
 800277c:	88fb      	ldrh	r3, [r7, #6]
 800277e:	3b01      	subs	r3, #1
 8002780:	80fb      	strh	r3, [r7, #6]
 8002782:	88fb      	ldrh	r3, [r7, #6]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ed      	bne.n	8002764 <ST7735_FillRectangle+0xa0>
    for(y = h; y > 0; y--) {
 8002788:	88bb      	ldrh	r3, [r7, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	80bb      	strh	r3, [r7, #4]
 800278e:	88bb      	ldrh	r3, [r7, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d1e4      	bne.n	800275e <ST7735_FillRectangle+0x9a>
        }
    }
		
		LCD_CS1;  //Unselect
 8002794:	2201      	movs	r2, #1
 8002796:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800279a:	4804      	ldr	r0, [pc, #16]	; (80027ac <ST7735_FillRectangle+0xe8>)
 800279c:	f000 fde4 	bl	8003368 <HAL_GPIO_WritePin>
 80027a0:	e000      	b.n	80027a4 <ST7735_FillRectangle+0xe0>
    if((x >= ST7735_WIDTH) || (y >= ST7735_HEIGHT)) return;
 80027a2:	bf00      	nop
}
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd90      	pop	{r4, r7, pc}
 80027aa:	bf00      	nop
 80027ac:	40020400 	.word	0x40020400

080027b0 <ST7735_FillScreen>:
void ST7735_FillScreen(uint16_t color) {
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b084      	sub	sp, #16
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	80fb      	strh	r3, [r7, #6]
    ST7735_FillRectangle(0, 0, ST7735_WIDTH, ST7735_HEIGHT, color);
 80027ba:	88fb      	ldrh	r3, [r7, #6]
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	23a0      	movs	r3, #160	; 0xa0
 80027c0:	2280      	movs	r2, #128	; 0x80
 80027c2:	2100      	movs	r1, #0
 80027c4:	2000      	movs	r0, #0
 80027c6:	f7ff ff7d 	bl	80026c4 <ST7735_FillRectangle>
}
 80027ca:	bf00      	nop
 80027cc:	3708      	adds	r7, #8
 80027ce:	46bd      	mov	sp, r7
 80027d0:	bd80      	pop	{r7, pc}
	...

080027d4 <ST7735_DrawImage>:
void ST7735_DrawImage(uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint16_t* data) {
 80027d4:	b590      	push	{r4, r7, lr}
 80027d6:	b087      	sub	sp, #28
 80027d8:	af00      	add	r7, sp, #0
 80027da:	4604      	mov	r4, r0
 80027dc:	4608      	mov	r0, r1
 80027de:	4611      	mov	r1, r2
 80027e0:	461a      	mov	r2, r3
 80027e2:	4623      	mov	r3, r4
 80027e4:	80fb      	strh	r3, [r7, #6]
 80027e6:	4603      	mov	r3, r0
 80027e8:	80bb      	strh	r3, [r7, #4]
 80027ea:	460b      	mov	r3, r1
 80027ec:	807b      	strh	r3, [r7, #2]
 80027ee:	4613      	mov	r3, r2
 80027f0:	803b      	strh	r3, [r7, #0]
int16_t skipC = 0;                      
 80027f2:	2300      	movs	r3, #0
 80027f4:	82fb      	strh	r3, [r7, #22]
  int16_t originalWidth = w;              
 80027f6:	887b      	ldrh	r3, [r7, #2]
 80027f8:	81fb      	strh	r3, [r7, #14]
  int i = w*(h - 1);
 80027fa:	887b      	ldrh	r3, [r7, #2]
 80027fc:	883a      	ldrh	r2, [r7, #0]
 80027fe:	3a01      	subs	r2, #1
 8002800:	fb02 f303 	mul.w	r3, r2, r3
 8002804:	613b      	str	r3, [r7, #16]
 
  if((x >= ST7735_WIDTH) || ((y - h + 1) >= ST7735_HEIGHT) || ((x + w) <= 0) || (y < 0)){
 8002806:	88fb      	ldrh	r3, [r7, #6]
 8002808:	2b7f      	cmp	r3, #127	; 0x7f
 800280a:	f200 809c 	bhi.w	8002946 <ST7735_DrawImage+0x172>
 800280e:	88ba      	ldrh	r2, [r7, #4]
 8002810:	883b      	ldrh	r3, [r7, #0]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b9e      	cmp	r3, #158	; 0x9e
 8002816:	f300 8096 	bgt.w	8002946 <ST7735_DrawImage+0x172>
 800281a:	88fa      	ldrh	r2, [r7, #6]
 800281c:	887b      	ldrh	r3, [r7, #2]
 800281e:	4413      	add	r3, r2
 8002820:	2b00      	cmp	r3, #0
 8002822:	f340 8090 	ble.w	8002946 <ST7735_DrawImage+0x172>
    return;                             
  }
  if((w > ST7735_WIDTH) || (h > ST7735_HEIGHT)){    
 8002826:	887b      	ldrh	r3, [r7, #2]
 8002828:	2b80      	cmp	r3, #128	; 0x80
 800282a:	f200 808e 	bhi.w	800294a <ST7735_DrawImage+0x176>
 800282e:	883b      	ldrh	r3, [r7, #0]
 8002830:	2ba0      	cmp	r3, #160	; 0xa0
 8002832:	f200 808a 	bhi.w	800294a <ST7735_DrawImage+0x176>
   
    return;
  }
  if((x + w - 1) >= ST7735_WIDTH){            
 8002836:	88fa      	ldrh	r2, [r7, #6]
 8002838:	887b      	ldrh	r3, [r7, #2]
 800283a:	4413      	add	r3, r2
 800283c:	2b80      	cmp	r3, #128	; 0x80
 800283e:	dd0a      	ble.n	8002856 <ST7735_DrawImage+0x82>
    skipC = (x + w) - ST7735_WIDTH;           
 8002840:	88fa      	ldrh	r2, [r7, #6]
 8002842:	887b      	ldrh	r3, [r7, #2]
 8002844:	4413      	add	r3, r2
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b80      	subs	r3, #128	; 0x80
 800284a:	b29b      	uxth	r3, r3
 800284c:	82fb      	strh	r3, [r7, #22]
    w = ST7735_WIDTH - x;
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8002854:	807b      	strh	r3, [r7, #2]
  }
  if((y - h + 1) < 0){                  
 8002856:	88ba      	ldrh	r2, [r7, #4]
 8002858:	883b      	ldrh	r3, [r7, #0]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002860:	da0d      	bge.n	800287e <ST7735_DrawImage+0xaa>
    i = i - (h - y - 1)*originalWidth;  
 8002862:	883a      	ldrh	r2, [r7, #0]
 8002864:	88bb      	ldrh	r3, [r7, #4]
 8002866:	1ad3      	subs	r3, r2, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800286e:	fb02 f303 	mul.w	r3, r2, r3
 8002872:	693a      	ldr	r2, [r7, #16]
 8002874:	1ad3      	subs	r3, r2, r3
 8002876:	613b      	str	r3, [r7, #16]
    h = y + 1;
 8002878:	88bb      	ldrh	r3, [r7, #4]
 800287a:	3301      	adds	r3, #1
 800287c:	803b      	strh	r3, [r7, #0]
    w = w + x;
    skipC = -1*x;                       
    i = i - x;                          
    x = 0;
  }
  if(y >= ST7735_HEIGHT){                     
 800287e:	88bb      	ldrh	r3, [r7, #4]
 8002880:	2b9f      	cmp	r3, #159	; 0x9f
 8002882:	d907      	bls.n	8002894 <ST7735_DrawImage+0xc0>
    h = h - (y - ST7735_HEIGHT + 1);
 8002884:	883a      	ldrh	r2, [r7, #0]
 8002886:	88bb      	ldrh	r3, [r7, #4]
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	b29b      	uxth	r3, r3
 800288c:	339f      	adds	r3, #159	; 0x9f
 800288e:	803b      	strh	r3, [r7, #0]
    y = ST7735_HEIGHT - 1;
 8002890:	239f      	movs	r3, #159	; 0x9f
 8002892:	80bb      	strh	r3, [r7, #4]
  }
	
	LCD_CS0;  //Select
 8002894:	2200      	movs	r2, #0
 8002896:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800289a:	482e      	ldr	r0, [pc, #184]	; (8002954 <ST7735_DrawImage+0x180>)
 800289c:	f000 fd64 	bl	8003368 <HAL_GPIO_WritePin>
 
  ST7735_SetAddressWindow(x, y-h+1, x+w-1, y);
 80028a0:	88fb      	ldrh	r3, [r7, #6]
 80028a2:	b2d8      	uxtb	r0, r3
 80028a4:	88bb      	ldrh	r3, [r7, #4]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	883b      	ldrh	r3, [r7, #0]
 80028aa:	b2db      	uxtb	r3, r3
 80028ac:	1ad3      	subs	r3, r2, r3
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	3301      	adds	r3, #1
 80028b2:	b2d9      	uxtb	r1, r3
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	b2da      	uxtb	r2, r3
 80028b8:	887b      	ldrh	r3, [r7, #2]
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	4413      	add	r3, r2
 80028be:	b2db      	uxtb	r3, r3
 80028c0:	3b01      	subs	r3, #1
 80028c2:	b2da      	uxtb	r2, r3
 80028c4:	88bb      	ldrh	r3, [r7, #4]
 80028c6:	b2db      	uxtb	r3, r3
 80028c8:	f7ff fc3a 	bl	8002140 <ST7735_SetAddressWindow>
 
  for(y=0; y<h; y=y+1){
 80028cc:	2300      	movs	r3, #0
 80028ce:	80bb      	strh	r3, [r7, #4]
 80028d0:	e02e      	b.n	8002930 <ST7735_DrawImage+0x15c>
    for(x=0; x<w; x=x+1){
 80028d2:	2300      	movs	r3, #0
 80028d4:	80fb      	strh	r3, [r7, #6]
 80028d6:	e019      	b.n	800290c <ST7735_DrawImage+0x138>
                                        
      lcd7735_sendData((uint8_t)(data[i] >> 8));
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	005b      	lsls	r3, r3, #1
 80028dc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028de:	4413      	add	r3, r2
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	0a1b      	lsrs	r3, r3, #8
 80028e4:	b29b      	uxth	r3, r3
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	f000 f84b 	bl	8002984 <lcd7735_sendData>
                                        
      lcd7735_sendData((uint8_t)data[i]);
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028f4:	4413      	add	r3, r2
 80028f6:	881b      	ldrh	r3, [r3, #0]
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	f000 f842 	bl	8002984 <lcd7735_sendData>
      i = i + 1;                       
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	3301      	adds	r3, #1
 8002904:	613b      	str	r3, [r7, #16]
    for(x=0; x<w; x=x+1){
 8002906:	88fb      	ldrh	r3, [r7, #6]
 8002908:	3301      	adds	r3, #1
 800290a:	80fb      	strh	r3, [r7, #6]
 800290c:	88fa      	ldrh	r2, [r7, #6]
 800290e:	887b      	ldrh	r3, [r7, #2]
 8002910:	429a      	cmp	r2, r3
 8002912:	d3e1      	bcc.n	80028d8 <ST7735_DrawImage+0x104>
    }
    i = i + skipC;
 8002914:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002918:	693a      	ldr	r2, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	613b      	str	r3, [r7, #16]
    i = i - 2*originalWidth;
 800291e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	693a      	ldr	r2, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	613b      	str	r3, [r7, #16]
  for(y=0; y<h; y=y+1){
 800292a:	88bb      	ldrh	r3, [r7, #4]
 800292c:	3301      	adds	r3, #1
 800292e:	80bb      	strh	r3, [r7, #4]
 8002930:	88ba      	ldrh	r2, [r7, #4]
 8002932:	883b      	ldrh	r3, [r7, #0]
 8002934:	429a      	cmp	r2, r3
 8002936:	d3cc      	bcc.n	80028d2 <ST7735_DrawImage+0xfe>
  }
	LCD_CS1;  //Unselect
 8002938:	2201      	movs	r2, #1
 800293a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800293e:	4805      	ldr	r0, [pc, #20]	; (8002954 <ST7735_DrawImage+0x180>)
 8002940:	f000 fd12 	bl	8003368 <HAL_GPIO_WritePin>
 8002944:	e002      	b.n	800294c <ST7735_DrawImage+0x178>
    return;                             
 8002946:	bf00      	nop
 8002948:	e000      	b.n	800294c <ST7735_DrawImage+0x178>
    return;
 800294a:	bf00      	nop
}
 800294c:	371c      	adds	r7, #28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd90      	pop	{r4, r7, pc}
 8002952:	bf00      	nop
 8002954:	40020400 	.word	0x40020400

08002958 <lcd7735_sendCmd>:
  //ST7735_WriteCommand(invert ? ST7735_INVON : ST7735_INVOFF);
	lcd7735_sendCmd(invert ? ST7735_INVON : ST7735_INVOFF);
  LCD_CS1;  //Unselect
}
 
void lcd7735_sendCmd(uint8_t cmd) {  //uint8_t       //unsigned char
 8002958:	b580      	push	{r7, lr}
 800295a:	b082      	sub	sp, #8
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
   LCD_DC0; //Set DC low
 8002962:	2200      	movs	r2, #0
 8002964:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002968:	4805      	ldr	r0, [pc, #20]	; (8002980 <lcd7735_sendCmd+0x28>)
 800296a:	f000 fcfd 	bl	8003368 <HAL_GPIO_WritePin>
   lcd7735_senddata(cmd);
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	4618      	mov	r0, r3
 8002972:	f000 f81d 	bl	80029b0 <lcd7735_senddata>
}
 8002976:	bf00      	nop
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
 800297e:	bf00      	nop
 8002980:	40020400 	.word	0x40020400

08002984 <lcd7735_sendData>:
 
 
void lcd7735_sendData(uint8_t data) {  //uint8_t      //unsigned char
 8002984:	b580      	push	{r7, lr}
 8002986:	b082      	sub	sp, #8
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
   LCD_DC1;//Set DC HIGH
 800298e:	2201      	movs	r2, #1
 8002990:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002994:	4805      	ldr	r0, [pc, #20]	; (80029ac <lcd7735_sendData+0x28>)
 8002996:	f000 fce7 	bl	8003368 <HAL_GPIO_WritePin>
   lcd7735_senddata(data);
 800299a:	79fb      	ldrb	r3, [r7, #7]
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f807 	bl	80029b0 <lcd7735_senddata>
}
 80029a2:	bf00      	nop
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	40020400 	.word	0x40020400

080029b0 <lcd7735_senddata>:
 
void lcd7735_senddata(uint8_t data) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	4603      	mov	r3, r0
 80029b8:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(&hspi1, &data,sizeof(data),0x1);
 80029ba:	1df9      	adds	r1, r7, #7
 80029bc:	2301      	movs	r3, #1
 80029be:	2201      	movs	r2, #1
 80029c0:	4803      	ldr	r0, [pc, #12]	; (80029d0 <lcd7735_senddata+0x20>)
 80029c2:	f001 fa58 	bl	8003e76 <HAL_SPI_Transmit>
}
 80029c6:	bf00      	nop
 80029c8:	3708      	adds	r7, #8
 80029ca:	46bd      	mov	sp, r7
 80029cc:	bd80      	pop	{r7, pc}
 80029ce:	bf00      	nop
 80029d0:	200000e8 	.word	0x200000e8

080029d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b082      	sub	sp, #8
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029da:	2300      	movs	r3, #0
 80029dc:	607b      	str	r3, [r7, #4]
 80029de:	4b12      	ldr	r3, [pc, #72]	; (8002a28 <HAL_MspInit+0x54>)
 80029e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029e2:	4a11      	ldr	r2, [pc, #68]	; (8002a28 <HAL_MspInit+0x54>)
 80029e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029e8:	6453      	str	r3, [r2, #68]	; 0x44
 80029ea:	4b0f      	ldr	r3, [pc, #60]	; (8002a28 <HAL_MspInit+0x54>)
 80029ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029f2:	607b      	str	r3, [r7, #4]
 80029f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029f6:	2300      	movs	r3, #0
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	4b0b      	ldr	r3, [pc, #44]	; (8002a28 <HAL_MspInit+0x54>)
 80029fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029fe:	4a0a      	ldr	r2, [pc, #40]	; (8002a28 <HAL_MspInit+0x54>)
 8002a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a04:	6413      	str	r3, [r2, #64]	; 0x40
 8002a06:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <HAL_MspInit+0x54>)
 8002a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a0e:	603b      	str	r3, [r7, #0]
 8002a10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002a12:	2200      	movs	r2, #0
 8002a14:	210f      	movs	r1, #15
 8002a16:	f06f 0001 	mvn.w	r0, #1
 8002a1a:	f000 fadf 	bl	8002fdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a1e:	bf00      	nop
 8002a20:	3708      	adds	r7, #8
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	40023800 	.word	0x40023800

08002a2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b08e      	sub	sp, #56	; 0x38
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002a34:	2300      	movs	r3, #0
 8002a36:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	4b34      	ldr	r3, [pc, #208]	; (8002b14 <HAL_InitTick+0xe8>)
 8002a42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a44:	4a33      	ldr	r2, [pc, #204]	; (8002b14 <HAL_InitTick+0xe8>)
 8002a46:	f043 0301 	orr.w	r3, r3, #1
 8002a4a:	6413      	str	r3, [r2, #64]	; 0x40
 8002a4c:	4b31      	ldr	r3, [pc, #196]	; (8002b14 <HAL_InitTick+0xe8>)
 8002a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a50:	f003 0301 	and.w	r3, r3, #1
 8002a54:	60fb      	str	r3, [r7, #12]
 8002a56:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a58:	f107 0210 	add.w	r2, r7, #16
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f001 f94c 	bl	8003d00 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002a68:	6a3b      	ldr	r3, [r7, #32]
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d103      	bne.n	8002a7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002a72:	f001 f91d 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8002a76:	6378      	str	r0, [r7, #52]	; 0x34
 8002a78:	e004      	b.n	8002a84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002a7a:	f001 f919 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8002a7e:	4603      	mov	r3, r0
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a86:	4a24      	ldr	r2, [pc, #144]	; (8002b18 <HAL_InitTick+0xec>)
 8002a88:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8c:	0c9b      	lsrs	r3, r3, #18
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8002a92:	4b22      	ldr	r3, [pc, #136]	; (8002b1c <HAL_InitTick+0xf0>)
 8002a94:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002a98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8002a9a:	4b20      	ldr	r3, [pc, #128]	; (8002b1c <HAL_InitTick+0xf0>)
 8002a9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002aa0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8002aa2:	4a1e      	ldr	r2, [pc, #120]	; (8002b1c <HAL_InitTick+0xf0>)
 8002aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002aa6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8002aa8:	4b1c      	ldr	r3, [pc, #112]	; (8002b1c <HAL_InitTick+0xf0>)
 8002aaa:	2200      	movs	r2, #0
 8002aac:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002aae:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <HAL_InitTick+0xf0>)
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ab4:	4b19      	ldr	r3, [pc, #100]	; (8002b1c <HAL_InitTick+0xf0>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8002aba:	4818      	ldr	r0, [pc, #96]	; (8002b1c <HAL_InitTick+0xf0>)
 8002abc:	f001 fbe2 	bl	8004284 <HAL_TIM_Base_Init>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002ac6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d11b      	bne.n	8002b06 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8002ace:	4813      	ldr	r0, [pc, #76]	; (8002b1c <HAL_InitTick+0xf0>)
 8002ad0:	f001 fc28 	bl	8004324 <HAL_TIM_Base_Start_IT>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002ada:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d111      	bne.n	8002b06 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ae2:	201c      	movs	r0, #28
 8002ae4:	f000 fa96 	bl	8003014 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2b0f      	cmp	r3, #15
 8002aec:	d808      	bhi.n	8002b00 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8002aee:	2200      	movs	r2, #0
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	201c      	movs	r0, #28
 8002af4:	f000 fa72 	bl	8002fdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002af8:	4a09      	ldr	r2, [pc, #36]	; (8002b20 <HAL_InitTick+0xf4>)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6013      	str	r3, [r2, #0]
 8002afe:	e002      	b.n	8002b06 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3738      	adds	r7, #56	; 0x38
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	40023800 	.word	0x40023800
 8002b18:	431bde83 	.word	0x431bde83
 8002b1c:	20000140 	.word	0x20000140
 8002b20:	20000028 	.word	0x20000028

08002b24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b28:	e7fe      	b.n	8002b28 <NMI_Handler+0x4>

08002b2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b2a:	b480      	push	{r7}
 8002b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b2e:	e7fe      	b.n	8002b2e <HardFault_Handler+0x4>

08002b30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b34:	e7fe      	b.n	8002b34 <MemManage_Handler+0x4>

08002b36 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b36:	b480      	push	{r7}
 8002b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b3a:	e7fe      	b.n	8002b3a <BusFault_Handler+0x4>

08002b3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b40:	e7fe      	b.n	8002b40 <UsageFault_Handler+0x4>

08002b42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b42:	b480      	push	{r7}
 8002b44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b46:	bf00      	nop
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b54:	4802      	ldr	r0, [pc, #8]	; (8002b60 <TIM2_IRQHandler+0x10>)
 8002b56:	f001 fc47 	bl	80043e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002b5a:	bf00      	nop
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	20000140 	.word	0x20000140

08002b64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b68:	4b06      	ldr	r3, [pc, #24]	; (8002b84 <SystemInit+0x20>)
 8002b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b6e:	4a05      	ldr	r2, [pc, #20]	; (8002b84 <SystemInit+0x20>)
 8002b70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002b78:	bf00      	nop
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b80:	4770      	bx	lr
 8002b82:	bf00      	nop
 8002b84:	e000ed00 	.word	0xe000ed00

08002b88 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b086      	sub	sp, #24
 8002b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b8e:	f107 0308 	add.w	r3, r7, #8
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
 8002b96:	605a      	str	r2, [r3, #4]
 8002b98:	609a      	str	r2, [r3, #8]
 8002b9a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b9c:	463b      	mov	r3, r7
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	601a      	str	r2, [r3, #0]
 8002ba2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002ba4:	4b1d      	ldr	r3, [pc, #116]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002ba6:	4a1e      	ldr	r2, [pc, #120]	; (8002c20 <MX_TIM3_Init+0x98>)
 8002ba8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8002baa:	4b1c      	ldr	r3, [pc, #112]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002bb0:	4b1a      	ldr	r3, [pc, #104]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002bb6:	4b19      	ldr	r3, [pc, #100]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002bbc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002bbe:	4b17      	ldr	r3, [pc, #92]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002bc4:	4b15      	ldr	r3, [pc, #84]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002bca:	4814      	ldr	r0, [pc, #80]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002bcc:	f001 fb5a 	bl	8004284 <HAL_TIM_Base_Init>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8002bd6:	f7ff fa30 	bl	800203a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002bda:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002bde:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002be0:	f107 0308 	add.w	r3, r7, #8
 8002be4:	4619      	mov	r1, r3
 8002be6:	480d      	ldr	r0, [pc, #52]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002be8:	f001 fd06 	bl	80045f8 <HAL_TIM_ConfigClockSource>
 8002bec:	4603      	mov	r3, r0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8002bf2:	f7ff fa22 	bl	800203a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002bfe:	463b      	mov	r3, r7
 8002c00:	4619      	mov	r1, r3
 8002c02:	4806      	ldr	r0, [pc, #24]	; (8002c1c <MX_TIM3_Init+0x94>)
 8002c04:	f001 ff02 	bl	8004a0c <HAL_TIMEx_MasterConfigSynchronization>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d001      	beq.n	8002c12 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8002c0e:	f7ff fa14 	bl	800203a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000188 	.word	0x20000188
 8002c20:	40000400 	.word	0x40000400

08002c24 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002c24:	b480      	push	{r7}
 8002c26:	b085      	sub	sp, #20
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	4a0b      	ldr	r2, [pc, #44]	; (8002c60 <HAL_TIM_Base_MspInit+0x3c>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d10d      	bne.n	8002c52 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c36:	2300      	movs	r3, #0
 8002c38:	60fb      	str	r3, [r7, #12]
 8002c3a:	4b0a      	ldr	r3, [pc, #40]	; (8002c64 <HAL_TIM_Base_MspInit+0x40>)
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	4a09      	ldr	r2, [pc, #36]	; (8002c64 <HAL_TIM_Base_MspInit+0x40>)
 8002c40:	f043 0302 	orr.w	r3, r3, #2
 8002c44:	6413      	str	r3, [r2, #64]	; 0x40
 8002c46:	4b07      	ldr	r3, [pc, #28]	; (8002c64 <HAL_TIM_Base_MspInit+0x40>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	f003 0302 	and.w	r3, r3, #2
 8002c4e:	60fb      	str	r3, [r7, #12]
 8002c50:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8002c52:	bf00      	nop
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	40000400 	.word	0x40000400
 8002c64:	40023800 	.word	0x40023800

08002c68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002c6c:	4b11      	ldr	r3, [pc, #68]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c6e:	4a12      	ldr	r2, [pc, #72]	; (8002cb8 <MX_USART2_UART_Init+0x50>)
 8002c70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002c78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002c7a:	4b0e      	ldr	r3, [pc, #56]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002c80:	4b0c      	ldr	r3, [pc, #48]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002c86:	4b0b      	ldr	r3, [pc, #44]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002c8c:	4b09      	ldr	r3, [pc, #36]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c8e:	220c      	movs	r2, #12
 8002c90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002c92:	4b08      	ldr	r3, [pc, #32]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002c98:	4b06      	ldr	r3, [pc, #24]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002c9e:	4805      	ldr	r0, [pc, #20]	; (8002cb4 <MX_USART2_UART_Init+0x4c>)
 8002ca0:	f001 ff36 	bl	8004b10 <HAL_UART_Init>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d001      	beq.n	8002cae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002caa:	f7ff f9c6 	bl	800203a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002cae:	bf00      	nop
 8002cb0:	bd80      	pop	{r7, pc}
 8002cb2:	bf00      	nop
 8002cb4:	200001d0 	.word	0x200001d0
 8002cb8:	40004400 	.word	0x40004400

08002cbc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b08a      	sub	sp, #40	; 0x28
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cc4:	f107 0314 	add.w	r3, r7, #20
 8002cc8:	2200      	movs	r2, #0
 8002cca:	601a      	str	r2, [r3, #0]
 8002ccc:	605a      	str	r2, [r3, #4]
 8002cce:	609a      	str	r2, [r3, #8]
 8002cd0:	60da      	str	r2, [r3, #12]
 8002cd2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a19      	ldr	r2, [pc, #100]	; (8002d40 <HAL_UART_MspInit+0x84>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d12b      	bne.n	8002d36 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cde:	2300      	movs	r3, #0
 8002ce0:	613b      	str	r3, [r7, #16]
 8002ce2:	4b18      	ldr	r3, [pc, #96]	; (8002d44 <HAL_UART_MspInit+0x88>)
 8002ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce6:	4a17      	ldr	r2, [pc, #92]	; (8002d44 <HAL_UART_MspInit+0x88>)
 8002ce8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cec:	6413      	str	r3, [r2, #64]	; 0x40
 8002cee:	4b15      	ldr	r3, [pc, #84]	; (8002d44 <HAL_UART_MspInit+0x88>)
 8002cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	613b      	str	r3, [r7, #16]
 8002cf8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	60fb      	str	r3, [r7, #12]
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <HAL_UART_MspInit+0x88>)
 8002d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d02:	4a10      	ldr	r2, [pc, #64]	; (8002d44 <HAL_UART_MspInit+0x88>)
 8002d04:	f043 0301 	orr.w	r3, r3, #1
 8002d08:	6313      	str	r3, [r2, #48]	; 0x30
 8002d0a:	4b0e      	ldr	r3, [pc, #56]	; (8002d44 <HAL_UART_MspInit+0x88>)
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d0e:	f003 0301 	and.w	r3, r3, #1
 8002d12:	60fb      	str	r3, [r7, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d16:	230c      	movs	r3, #12
 8002d18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d1a:	2302      	movs	r3, #2
 8002d1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d22:	2300      	movs	r3, #0
 8002d24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d26:	2307      	movs	r3, #7
 8002d28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	4619      	mov	r1, r3
 8002d30:	4805      	ldr	r0, [pc, #20]	; (8002d48 <HAL_UART_MspInit+0x8c>)
 8002d32:	f000 f97d 	bl	8003030 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8002d36:	bf00      	nop
 8002d38:	3728      	adds	r7, #40	; 0x28
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}
 8002d3e:	bf00      	nop
 8002d40:	40004400 	.word	0x40004400
 8002d44:	40023800 	.word	0x40023800
 8002d48:	40020000 	.word	0x40020000

08002d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d84 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d50:	480d      	ldr	r0, [pc, #52]	; (8002d88 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002d52:	490e      	ldr	r1, [pc, #56]	; (8002d8c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002d54:	4a0e      	ldr	r2, [pc, #56]	; (8002d90 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d58:	e002      	b.n	8002d60 <LoopCopyDataInit>

08002d5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d5e:	3304      	adds	r3, #4

08002d60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d64:	d3f9      	bcc.n	8002d5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d66:	4a0b      	ldr	r2, [pc, #44]	; (8002d94 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002d68:	4c0b      	ldr	r4, [pc, #44]	; (8002d98 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002d6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d6c:	e001      	b.n	8002d72 <LoopFillZerobss>

08002d6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d70:	3204      	adds	r2, #4

08002d72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d74:	d3fb      	bcc.n	8002d6e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002d76:	f7ff fef5 	bl	8002b64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d7a:	f004 ffa5 	bl	8007cc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d7e:	f7ff f8cd 	bl	8001f1c <main>
  bx  lr    
 8002d82:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d84:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002d88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d8c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002d90:	080128c8 	.word	0x080128c8
  ldr r2, =_sbss
 8002d94:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002d98:	20004d40 	.word	0x20004d40

08002d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d9c:	e7fe      	b.n	8002d9c <ADC_IRQHandler>
	...

08002da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002da4:	4b0e      	ldr	r3, [pc, #56]	; (8002de0 <HAL_Init+0x40>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a0d      	ldr	r2, [pc, #52]	; (8002de0 <HAL_Init+0x40>)
 8002daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <HAL_Init+0x40>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4a0a      	ldr	r2, [pc, #40]	; (8002de0 <HAL_Init+0x40>)
 8002db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dbc:	4b08      	ldr	r3, [pc, #32]	; (8002de0 <HAL_Init+0x40>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4a07      	ldr	r2, [pc, #28]	; (8002de0 <HAL_Init+0x40>)
 8002dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dc8:	2003      	movs	r0, #3
 8002dca:	f000 f8fc 	bl	8002fc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dce:	200f      	movs	r0, #15
 8002dd0:	f7ff fe2c 	bl	8002a2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002dd4:	f7ff fdfe 	bl	80029d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002dd8:	2300      	movs	r3, #0
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	bd80      	pop	{r7, pc}
 8002dde:	bf00      	nop
 8002de0:	40023c00 	.word	0x40023c00

08002de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de4:	b480      	push	{r7}
 8002de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002de8:	4b06      	ldr	r3, [pc, #24]	; (8002e04 <HAL_IncTick+0x20>)
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	461a      	mov	r2, r3
 8002dee:	4b06      	ldr	r3, [pc, #24]	; (8002e08 <HAL_IncTick+0x24>)
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4413      	add	r3, r2
 8002df4:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_IncTick+0x24>)
 8002df6:	6013      	str	r3, [r2, #0]
}
 8002df8:	bf00      	nop
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	2000002c 	.word	0x2000002c
 8002e08:	20000214 	.word	0x20000214

08002e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e10:	4b03      	ldr	r3, [pc, #12]	; (8002e20 <HAL_GetTick+0x14>)
 8002e12:	681b      	ldr	r3, [r3, #0]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000214 	.word	0x20000214

08002e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e2c:	f7ff ffee 	bl	8002e0c <HAL_GetTick>
 8002e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e3c:	d005      	beq.n	8002e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e3e:	4b0a      	ldr	r3, [pc, #40]	; (8002e68 <HAL_Delay+0x44>)
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	461a      	mov	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	4413      	add	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4a:	bf00      	nop
 8002e4c:	f7ff ffde 	bl	8002e0c <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d8f7      	bhi.n	8002e4c <HAL_Delay+0x28>
  {
  }
}
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	3710      	adds	r7, #16
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bd80      	pop	{r7, pc}
 8002e66:	bf00      	nop
 8002e68:	2000002c 	.word	0x2000002c

08002e6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	f003 0307 	and.w	r3, r3, #7
 8002e7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e7c:	4b0c      	ldr	r3, [pc, #48]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e88:	4013      	ands	r3, r2
 8002e8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e9e:	4a04      	ldr	r2, [pc, #16]	; (8002eb0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	60d3      	str	r3, [r2, #12]
}
 8002ea4:	bf00      	nop
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eae:	4770      	bx	lr
 8002eb0:	e000ed00 	.word	0xe000ed00

08002eb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <__NVIC_GetPriorityGrouping+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	0a1b      	lsrs	r3, r3, #8
 8002ebe:	f003 0307 	and.w	r3, r3, #7
}
 8002ec2:	4618      	mov	r0, r3
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	db0b      	blt.n	8002efa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ee2:	79fb      	ldrb	r3, [r7, #7]
 8002ee4:	f003 021f 	and.w	r2, r3, #31
 8002ee8:	4907      	ldr	r1, [pc, #28]	; (8002f08 <__NVIC_EnableIRQ+0x38>)
 8002eea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eee:	095b      	lsrs	r3, r3, #5
 8002ef0:	2001      	movs	r0, #1
 8002ef2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002efa:	bf00      	nop
 8002efc:	370c      	adds	r7, #12
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr
 8002f06:	bf00      	nop
 8002f08:	e000e100 	.word	0xe000e100

08002f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f0c:	b480      	push	{r7}
 8002f0e:	b083      	sub	sp, #12
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	4603      	mov	r3, r0
 8002f14:	6039      	str	r1, [r7, #0]
 8002f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	db0a      	blt.n	8002f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	b2da      	uxtb	r2, r3
 8002f24:	490c      	ldr	r1, [pc, #48]	; (8002f58 <__NVIC_SetPriority+0x4c>)
 8002f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f2a:	0112      	lsls	r2, r2, #4
 8002f2c:	b2d2      	uxtb	r2, r2
 8002f2e:	440b      	add	r3, r1
 8002f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f34:	e00a      	b.n	8002f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	b2da      	uxtb	r2, r3
 8002f3a:	4908      	ldr	r1, [pc, #32]	; (8002f5c <__NVIC_SetPriority+0x50>)
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	f003 030f 	and.w	r3, r3, #15
 8002f42:	3b04      	subs	r3, #4
 8002f44:	0112      	lsls	r2, r2, #4
 8002f46:	b2d2      	uxtb	r2, r2
 8002f48:	440b      	add	r3, r1
 8002f4a:	761a      	strb	r2, [r3, #24]
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr
 8002f58:	e000e100 	.word	0xe000e100
 8002f5c:	e000ed00 	.word	0xe000ed00

08002f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b089      	sub	sp, #36	; 0x24
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	f1c3 0307 	rsb	r3, r3, #7
 8002f7a:	2b04      	cmp	r3, #4
 8002f7c:	bf28      	it	cs
 8002f7e:	2304      	movcs	r3, #4
 8002f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f82:	69fb      	ldr	r3, [r7, #28]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2b06      	cmp	r3, #6
 8002f88:	d902      	bls.n	8002f90 <NVIC_EncodePriority+0x30>
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	3b03      	subs	r3, #3
 8002f8e:	e000      	b.n	8002f92 <NVIC_EncodePriority+0x32>
 8002f90:	2300      	movs	r3, #0
 8002f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f94:	f04f 32ff 	mov.w	r2, #4294967295
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9e:	43da      	mvns	r2, r3
 8002fa0:	68bb      	ldr	r3, [r7, #8]
 8002fa2:	401a      	ands	r2, r3
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	fa01 f303 	lsl.w	r3, r1, r3
 8002fb2:	43d9      	mvns	r1, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb8:	4313      	orrs	r3, r2
         );
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	3724      	adds	r7, #36	; 0x24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fc6:	b580      	push	{r7, lr}
 8002fc8:	b082      	sub	sp, #8
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fce:	6878      	ldr	r0, [r7, #4]
 8002fd0:	f7ff ff4c 	bl	8002e6c <__NVIC_SetPriorityGrouping>
}
 8002fd4:	bf00      	nop
 8002fd6:	3708      	adds	r7, #8
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	bd80      	pop	{r7, pc}

08002fdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	b086      	sub	sp, #24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	60b9      	str	r1, [r7, #8]
 8002fe6:	607a      	str	r2, [r7, #4]
 8002fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002fee:	f7ff ff61 	bl	8002eb4 <__NVIC_GetPriorityGrouping>
 8002ff2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ff4:	687a      	ldr	r2, [r7, #4]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	6978      	ldr	r0, [r7, #20]
 8002ffa:	f7ff ffb1 	bl	8002f60 <NVIC_EncodePriority>
 8002ffe:	4602      	mov	r2, r0
 8003000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f7ff ff80 	bl	8002f0c <__NVIC_SetPriority>
}
 800300c:	bf00      	nop
 800300e:	3718      	adds	r7, #24
 8003010:	46bd      	mov	sp, r7
 8003012:	bd80      	pop	{r7, pc}

08003014 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b082      	sub	sp, #8
 8003018:	af00      	add	r7, sp, #0
 800301a:	4603      	mov	r3, r0
 800301c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800301e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff54 	bl	8002ed0 <__NVIC_EnableIRQ>
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003030:	b480      	push	{r7}
 8003032:	b089      	sub	sp, #36	; 0x24
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800303a:	2300      	movs	r3, #0
 800303c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800303e:	2300      	movs	r3, #0
 8003040:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003042:	2300      	movs	r3, #0
 8003044:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003046:	2300      	movs	r3, #0
 8003048:	61fb      	str	r3, [r7, #28]
 800304a:	e159      	b.n	8003300 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800304c:	2201      	movs	r2, #1
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	fa02 f303 	lsl.w	r3, r2, r3
 8003054:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	697a      	ldr	r2, [r7, #20]
 800305c:	4013      	ands	r3, r2
 800305e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	429a      	cmp	r2, r3
 8003066:	f040 8148 	bne.w	80032fa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	685b      	ldr	r3, [r3, #4]
 800306e:	f003 0303 	and.w	r3, r3, #3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d005      	beq.n	8003082 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800307e:	2b02      	cmp	r3, #2
 8003080:	d130      	bne.n	80030e4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	2203      	movs	r2, #3
 800308e:	fa02 f303 	lsl.w	r3, r2, r3
 8003092:	43db      	mvns	r3, r3
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	4013      	ands	r3, r2
 8003098:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	68da      	ldr	r2, [r3, #12]
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	005b      	lsls	r3, r3, #1
 80030a2:	fa02 f303 	lsl.w	r3, r2, r3
 80030a6:	69ba      	ldr	r2, [r7, #24]
 80030a8:	4313      	orrs	r3, r2
 80030aa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030b8:	2201      	movs	r2, #1
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	091b      	lsrs	r3, r3, #4
 80030ce:	f003 0201 	and.w	r2, r3, #1
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	69ba      	ldr	r2, [r7, #24]
 80030e2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	2b03      	cmp	r3, #3
 80030ee:	d017      	beq.n	8003120 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	005b      	lsls	r3, r3, #1
 80030fa:	2203      	movs	r2, #3
 80030fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	689a      	ldr	r2, [r3, #8]
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f003 0303 	and.w	r3, r3, #3
 8003128:	2b02      	cmp	r3, #2
 800312a:	d123      	bne.n	8003174 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	08da      	lsrs	r2, r3, #3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	3208      	adds	r2, #8
 8003134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003138:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	009b      	lsls	r3, r3, #2
 8003142:	220f      	movs	r2, #15
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	43db      	mvns	r3, r3
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	4013      	ands	r3, r2
 800314e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	691a      	ldr	r2, [r3, #16]
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 0307 	and.w	r3, r3, #7
 800315a:	009b      	lsls	r3, r3, #2
 800315c:	fa02 f303 	lsl.w	r3, r2, r3
 8003160:	69ba      	ldr	r2, [r7, #24]
 8003162:	4313      	orrs	r3, r2
 8003164:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	08da      	lsrs	r2, r3, #3
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	3208      	adds	r2, #8
 800316e:	69b9      	ldr	r1, [r7, #24]
 8003170:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	005b      	lsls	r3, r3, #1
 800317e:	2203      	movs	r2, #3
 8003180:	fa02 f303 	lsl.w	r3, r2, r3
 8003184:	43db      	mvns	r3, r3
 8003186:	69ba      	ldr	r2, [r7, #24]
 8003188:	4013      	ands	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800318c:	683b      	ldr	r3, [r7, #0]
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	f003 0203 	and.w	r2, r3, #3
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	005b      	lsls	r3, r3, #1
 8003198:	fa02 f303 	lsl.w	r3, r2, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4313      	orrs	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	69ba      	ldr	r2, [r7, #24]
 80031a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 80a2 	beq.w	80032fa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031b6:	2300      	movs	r3, #0
 80031b8:	60fb      	str	r3, [r7, #12]
 80031ba:	4b57      	ldr	r3, [pc, #348]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031be:	4a56      	ldr	r2, [pc, #344]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80031c4:	6453      	str	r3, [r2, #68]	; 0x44
 80031c6:	4b54      	ldr	r3, [pc, #336]	; (8003318 <HAL_GPIO_Init+0x2e8>)
 80031c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80031ce:	60fb      	str	r3, [r7, #12]
 80031d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031d2:	4a52      	ldr	r2, [pc, #328]	; (800331c <HAL_GPIO_Init+0x2ec>)
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	089b      	lsrs	r3, r3, #2
 80031d8:	3302      	adds	r3, #2
 80031da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	f003 0303 	and.w	r3, r3, #3
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	220f      	movs	r2, #15
 80031ea:	fa02 f303 	lsl.w	r3, r2, r3
 80031ee:	43db      	mvns	r3, r3
 80031f0:	69ba      	ldr	r2, [r7, #24]
 80031f2:	4013      	ands	r3, r2
 80031f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a49      	ldr	r2, [pc, #292]	; (8003320 <HAL_GPIO_Init+0x2f0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d019      	beq.n	8003232 <HAL_GPIO_Init+0x202>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	4a48      	ldr	r2, [pc, #288]	; (8003324 <HAL_GPIO_Init+0x2f4>)
 8003202:	4293      	cmp	r3, r2
 8003204:	d013      	beq.n	800322e <HAL_GPIO_Init+0x1fe>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	4a47      	ldr	r2, [pc, #284]	; (8003328 <HAL_GPIO_Init+0x2f8>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d00d      	beq.n	800322a <HAL_GPIO_Init+0x1fa>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4a46      	ldr	r2, [pc, #280]	; (800332c <HAL_GPIO_Init+0x2fc>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d007      	beq.n	8003226 <HAL_GPIO_Init+0x1f6>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	4a45      	ldr	r2, [pc, #276]	; (8003330 <HAL_GPIO_Init+0x300>)
 800321a:	4293      	cmp	r3, r2
 800321c:	d101      	bne.n	8003222 <HAL_GPIO_Init+0x1f2>
 800321e:	2304      	movs	r3, #4
 8003220:	e008      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003222:	2307      	movs	r3, #7
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003226:	2303      	movs	r3, #3
 8003228:	e004      	b.n	8003234 <HAL_GPIO_Init+0x204>
 800322a:	2302      	movs	r3, #2
 800322c:	e002      	b.n	8003234 <HAL_GPIO_Init+0x204>
 800322e:	2301      	movs	r3, #1
 8003230:	e000      	b.n	8003234 <HAL_GPIO_Init+0x204>
 8003232:	2300      	movs	r3, #0
 8003234:	69fa      	ldr	r2, [r7, #28]
 8003236:	f002 0203 	and.w	r2, r2, #3
 800323a:	0092      	lsls	r2, r2, #2
 800323c:	4093      	lsls	r3, r2
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	4313      	orrs	r3, r2
 8003242:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003244:	4935      	ldr	r1, [pc, #212]	; (800331c <HAL_GPIO_Init+0x2ec>)
 8003246:	69fb      	ldr	r3, [r7, #28]
 8003248:	089b      	lsrs	r3, r3, #2
 800324a:	3302      	adds	r3, #2
 800324c:	69ba      	ldr	r2, [r7, #24]
 800324e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003252:	4b38      	ldr	r3, [pc, #224]	; (8003334 <HAL_GPIO_Init+0x304>)
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003258:	693b      	ldr	r3, [r7, #16]
 800325a:	43db      	mvns	r3, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4013      	ands	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800326e:	69ba      	ldr	r2, [r7, #24]
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	4313      	orrs	r3, r2
 8003274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003276:	4a2f      	ldr	r2, [pc, #188]	; (8003334 <HAL_GPIO_Init+0x304>)
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800327c:	4b2d      	ldr	r3, [pc, #180]	; (8003334 <HAL_GPIO_Init+0x304>)
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	43db      	mvns	r3, r3
 8003286:	69ba      	ldr	r2, [r7, #24]
 8003288:	4013      	ands	r3, r2
 800328a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d003      	beq.n	80032a0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	4313      	orrs	r3, r2
 800329e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032a0:	4a24      	ldr	r2, [pc, #144]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032a6:	4b23      	ldr	r3, [pc, #140]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d003      	beq.n	80032ca <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80032c2:	69ba      	ldr	r2, [r7, #24]
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	4313      	orrs	r3, r2
 80032c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80032ca:	4a1a      	ldr	r2, [pc, #104]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032cc:	69bb      	ldr	r3, [r7, #24]
 80032ce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032d0:	4b18      	ldr	r3, [pc, #96]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	43db      	mvns	r3, r3
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	4013      	ands	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032e0:	683b      	ldr	r3, [r7, #0]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d003      	beq.n	80032f4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032ec:	69ba      	ldr	r2, [r7, #24]
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032f4:	4a0f      	ldr	r2, [pc, #60]	; (8003334 <HAL_GPIO_Init+0x304>)
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3301      	adds	r3, #1
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	69fb      	ldr	r3, [r7, #28]
 8003302:	2b0f      	cmp	r3, #15
 8003304:	f67f aea2 	bls.w	800304c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003308:	bf00      	nop
 800330a:	bf00      	nop
 800330c:	3724      	adds	r7, #36	; 0x24
 800330e:	46bd      	mov	sp, r7
 8003310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40023800 	.word	0x40023800
 800331c:	40013800 	.word	0x40013800
 8003320:	40020000 	.word	0x40020000
 8003324:	40020400 	.word	0x40020400
 8003328:	40020800 	.word	0x40020800
 800332c:	40020c00 	.word	0x40020c00
 8003330:	40021000 	.word	0x40021000
 8003334:	40013c00 	.word	0x40013c00

08003338 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003338:	b480      	push	{r7}
 800333a:	b085      	sub	sp, #20
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	691a      	ldr	r2, [r3, #16]
 8003348:	887b      	ldrh	r3, [r7, #2]
 800334a:	4013      	ands	r3, r2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d002      	beq.n	8003356 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003350:	2301      	movs	r3, #1
 8003352:	73fb      	strb	r3, [r7, #15]
 8003354:	e001      	b.n	800335a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003356:	2300      	movs	r3, #0
 8003358:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800335a:	7bfb      	ldrb	r3, [r7, #15]
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	460b      	mov	r3, r1
 8003372:	807b      	strh	r3, [r7, #2]
 8003374:	4613      	mov	r3, r2
 8003376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003378:	787b      	ldrb	r3, [r7, #1]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d003      	beq.n	8003386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800337e:	887a      	ldrh	r2, [r7, #2]
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003384:	e003      	b.n	800338e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003386:	887b      	ldrh	r3, [r7, #2]
 8003388:	041a      	lsls	r2, r3, #16
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	619a      	str	r2, [r3, #24]
}
 800338e:	bf00      	nop
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800339a:	b480      	push	{r7}
 800339c:	b085      	sub	sp, #20
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	460b      	mov	r3, r1
 80033a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80033ac:	887a      	ldrh	r2, [r7, #2]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	4013      	ands	r3, r2
 80033b2:	041a      	lsls	r2, r3, #16
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	43d9      	mvns	r1, r3
 80033b8:	887b      	ldrh	r3, [r7, #2]
 80033ba:	400b      	ands	r3, r1
 80033bc:	431a      	orrs	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	619a      	str	r2, [r3, #24]
}
 80033c2:	bf00      	nop
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033cc:	4770      	bx	lr
	...

080033d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b086      	sub	sp, #24
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e267      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d075      	beq.n	80034da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80033ee:	4b88      	ldr	r3, [pc, #544]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 030c 	and.w	r3, r3, #12
 80033f6:	2b04      	cmp	r3, #4
 80033f8:	d00c      	beq.n	8003414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033fa:	4b85      	ldr	r3, [pc, #532]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003402:	2b08      	cmp	r3, #8
 8003404:	d112      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003406:	4b82      	ldr	r3, [pc, #520]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800340e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003412:	d10b      	bne.n	800342c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003414:	4b7e      	ldr	r3, [pc, #504]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800341c:	2b00      	cmp	r3, #0
 800341e:	d05b      	beq.n	80034d8 <HAL_RCC_OscConfig+0x108>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d157      	bne.n	80034d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e242      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003434:	d106      	bne.n	8003444 <HAL_RCC_OscConfig+0x74>
 8003436:	4b76      	ldr	r3, [pc, #472]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a75      	ldr	r2, [pc, #468]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800343c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003440:	6013      	str	r3, [r2, #0]
 8003442:	e01d      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800344c:	d10c      	bne.n	8003468 <HAL_RCC_OscConfig+0x98>
 800344e:	4b70      	ldr	r3, [pc, #448]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a6f      	ldr	r2, [pc, #444]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003458:	6013      	str	r3, [r2, #0]
 800345a:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a6c      	ldr	r2, [pc, #432]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003464:	6013      	str	r3, [r2, #0]
 8003466:	e00b      	b.n	8003480 <HAL_RCC_OscConfig+0xb0>
 8003468:	4b69      	ldr	r3, [pc, #420]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4a68      	ldr	r2, [pc, #416]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800346e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003472:	6013      	str	r3, [r2, #0]
 8003474:	4b66      	ldr	r3, [pc, #408]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	4a65      	ldr	r2, [pc, #404]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800347a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800347e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d013      	beq.n	80034b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003488:	f7ff fcc0 	bl	8002e0c <HAL_GetTick>
 800348c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348e:	e008      	b.n	80034a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003490:	f7ff fcbc 	bl	8002e0c <HAL_GetTick>
 8003494:	4602      	mov	r2, r0
 8003496:	693b      	ldr	r3, [r7, #16]
 8003498:	1ad3      	subs	r3, r2, r3
 800349a:	2b64      	cmp	r3, #100	; 0x64
 800349c:	d901      	bls.n	80034a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800349e:	2303      	movs	r3, #3
 80034a0:	e207      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a2:	4b5b      	ldr	r3, [pc, #364]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d0f0      	beq.n	8003490 <HAL_RCC_OscConfig+0xc0>
 80034ae:	e014      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b0:	f7ff fcac 	bl	8002e0c <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80034b8:	f7ff fca8 	bl	8002e0c <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b64      	cmp	r3, #100	; 0x64
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1f3      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ca:	4b51      	ldr	r3, [pc, #324]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d1f0      	bne.n	80034b8 <HAL_RCC_OscConfig+0xe8>
 80034d6:	e000      	b.n	80034da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d063      	beq.n	80035ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034e6:	4b4a      	ldr	r3, [pc, #296]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f003 030c 	and.w	r3, r3, #12
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d00b      	beq.n	800350a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f2:	4b47      	ldr	r3, [pc, #284]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80034fa:	2b08      	cmp	r3, #8
 80034fc:	d11c      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034fe:	4b44      	ldr	r3, [pc, #272]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003506:	2b00      	cmp	r3, #0
 8003508:	d116      	bne.n	8003538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350a:	4b41      	ldr	r3, [pc, #260]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d005      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	2b01      	cmp	r3, #1
 800351c:	d001      	beq.n	8003522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	e1c7      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003522:	4b3b      	ldr	r3, [pc, #236]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	4937      	ldr	r1, [pc, #220]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003536:	e03a      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d020      	beq.n	8003582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003540:	4b34      	ldr	r3, [pc, #208]	; (8003614 <HAL_RCC_OscConfig+0x244>)
 8003542:	2201      	movs	r2, #1
 8003544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003546:	f7ff fc61 	bl	8002e0c <HAL_GetTick>
 800354a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800354c:	e008      	b.n	8003560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800354e:	f7ff fc5d 	bl	8002e0c <HAL_GetTick>
 8003552:	4602      	mov	r2, r0
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	1ad3      	subs	r3, r2, r3
 8003558:	2b02      	cmp	r3, #2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e1a8      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003560:	4b2b      	ldr	r3, [pc, #172]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0f0      	beq.n	800354e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800356c:	4b28      	ldr	r3, [pc, #160]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	691b      	ldr	r3, [r3, #16]
 8003578:	00db      	lsls	r3, r3, #3
 800357a:	4925      	ldr	r1, [pc, #148]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 800357c:	4313      	orrs	r3, r2
 800357e:	600b      	str	r3, [r1, #0]
 8003580:	e015      	b.n	80035ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003582:	4b24      	ldr	r3, [pc, #144]	; (8003614 <HAL_RCC_OscConfig+0x244>)
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003588:	f7ff fc40 	bl	8002e0c <HAL_GetTick>
 800358c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800358e:	e008      	b.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003590:	f7ff fc3c 	bl	8002e0c <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	693b      	ldr	r3, [r7, #16]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	2b02      	cmp	r3, #2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e187      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d1f0      	bne.n	8003590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0308 	and.w	r3, r3, #8
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d036      	beq.n	8003628 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	695b      	ldr	r3, [r3, #20]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d016      	beq.n	80035f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035c2:	4b15      	ldr	r3, [pc, #84]	; (8003618 <HAL_RCC_OscConfig+0x248>)
 80035c4:	2201      	movs	r2, #1
 80035c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035c8:	f7ff fc20 	bl	8002e0c <HAL_GetTick>
 80035cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035ce:	e008      	b.n	80035e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035d0:	f7ff fc1c 	bl	8002e0c <HAL_GetTick>
 80035d4:	4602      	mov	r2, r0
 80035d6:	693b      	ldr	r3, [r7, #16]
 80035d8:	1ad3      	subs	r3, r2, r3
 80035da:	2b02      	cmp	r3, #2
 80035dc:	d901      	bls.n	80035e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80035de:	2303      	movs	r3, #3
 80035e0:	e167      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e2:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_OscConfig+0x240>)
 80035e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e6:	f003 0302 	and.w	r3, r3, #2
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d0f0      	beq.n	80035d0 <HAL_RCC_OscConfig+0x200>
 80035ee:	e01b      	b.n	8003628 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035f0:	4b09      	ldr	r3, [pc, #36]	; (8003618 <HAL_RCC_OscConfig+0x248>)
 80035f2:	2200      	movs	r2, #0
 80035f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035f6:	f7ff fc09 	bl	8002e0c <HAL_GetTick>
 80035fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035fc:	e00e      	b.n	800361c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035fe:	f7ff fc05 	bl	8002e0c <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	2b02      	cmp	r3, #2
 800360a:	d907      	bls.n	800361c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800360c:	2303      	movs	r3, #3
 800360e:	e150      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003610:	40023800 	.word	0x40023800
 8003614:	42470000 	.word	0x42470000
 8003618:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800361c:	4b88      	ldr	r3, [pc, #544]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800361e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003620:	f003 0302 	and.w	r3, r3, #2
 8003624:	2b00      	cmp	r3, #0
 8003626:	d1ea      	bne.n	80035fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8097 	beq.w	8003764 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003636:	2300      	movs	r3, #0
 8003638:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800363a:	4b81      	ldr	r3, [pc, #516]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800363c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d10f      	bne.n	8003666 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003646:	2300      	movs	r3, #0
 8003648:	60bb      	str	r3, [r7, #8]
 800364a:	4b7d      	ldr	r3, [pc, #500]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800364e:	4a7c      	ldr	r2, [pc, #496]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003650:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003654:	6413      	str	r3, [r2, #64]	; 0x40
 8003656:	4b7a      	ldr	r3, [pc, #488]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800365e:	60bb      	str	r3, [r7, #8]
 8003660:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003662:	2301      	movs	r3, #1
 8003664:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003666:	4b77      	ldr	r3, [pc, #476]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366e:	2b00      	cmp	r3, #0
 8003670:	d118      	bne.n	80036a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003672:	4b74      	ldr	r3, [pc, #464]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4a73      	ldr	r2, [pc, #460]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 8003678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800367c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800367e:	f7ff fbc5 	bl	8002e0c <HAL_GetTick>
 8003682:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003684:	e008      	b.n	8003698 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003686:	f7ff fbc1 	bl	8002e0c <HAL_GetTick>
 800368a:	4602      	mov	r2, r0
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	1ad3      	subs	r3, r2, r3
 8003690:	2b02      	cmp	r3, #2
 8003692:	d901      	bls.n	8003698 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003694:	2303      	movs	r3, #3
 8003696:	e10c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003698:	4b6a      	ldr	r3, [pc, #424]	; (8003844 <HAL_RCC_OscConfig+0x474>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d0f0      	beq.n	8003686 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	689b      	ldr	r3, [r3, #8]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d106      	bne.n	80036ba <HAL_RCC_OscConfig+0x2ea>
 80036ac:	4b64      	ldr	r3, [pc, #400]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b0:	4a63      	ldr	r2, [pc, #396]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036b2:	f043 0301 	orr.w	r3, r3, #1
 80036b6:	6713      	str	r3, [r2, #112]	; 0x70
 80036b8:	e01c      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2b05      	cmp	r3, #5
 80036c0:	d10c      	bne.n	80036dc <HAL_RCC_OscConfig+0x30c>
 80036c2:	4b5f      	ldr	r3, [pc, #380]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036c6:	4a5e      	ldr	r2, [pc, #376]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036c8:	f043 0304 	orr.w	r3, r3, #4
 80036cc:	6713      	str	r3, [r2, #112]	; 0x70
 80036ce:	4b5c      	ldr	r3, [pc, #368]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d2:	4a5b      	ldr	r2, [pc, #364]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036d4:	f043 0301 	orr.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	; 0x70
 80036da:	e00b      	b.n	80036f4 <HAL_RCC_OscConfig+0x324>
 80036dc:	4b58      	ldr	r3, [pc, #352]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036e0:	4a57      	ldr	r2, [pc, #348]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f023 0301 	bic.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	; 0x70
 80036e8:	4b55      	ldr	r3, [pc, #340]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ec:	4a54      	ldr	r2, [pc, #336]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80036ee:	f023 0304 	bic.w	r3, r3, #4
 80036f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	689b      	ldr	r3, [r3, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036fc:	f7ff fb86 	bl	8002e0c <HAL_GetTick>
 8003700:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003702:	e00a      	b.n	800371a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003704:	f7ff fb82 	bl	8002e0c <HAL_GetTick>
 8003708:	4602      	mov	r2, r0
 800370a:	693b      	ldr	r3, [r7, #16]
 800370c:	1ad3      	subs	r3, r2, r3
 800370e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003712:	4293      	cmp	r3, r2
 8003714:	d901      	bls.n	800371a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e0cb      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800371a:	4b49      	ldr	r3, [pc, #292]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800371c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800371e:	f003 0302 	and.w	r3, r3, #2
 8003722:	2b00      	cmp	r3, #0
 8003724:	d0ee      	beq.n	8003704 <HAL_RCC_OscConfig+0x334>
 8003726:	e014      	b.n	8003752 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003728:	f7ff fb70 	bl	8002e0c <HAL_GetTick>
 800372c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800372e:	e00a      	b.n	8003746 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003730:	f7ff fb6c 	bl	8002e0c <HAL_GetTick>
 8003734:	4602      	mov	r2, r0
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	f241 3288 	movw	r2, #5000	; 0x1388
 800373e:	4293      	cmp	r3, r2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e0b5      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003746:	4b3e      	ldr	r3, [pc, #248]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800374a:	f003 0302 	and.w	r3, r3, #2
 800374e:	2b00      	cmp	r3, #0
 8003750:	d1ee      	bne.n	8003730 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003752:	7dfb      	ldrb	r3, [r7, #23]
 8003754:	2b01      	cmp	r3, #1
 8003756:	d105      	bne.n	8003764 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003758:	4b39      	ldr	r3, [pc, #228]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800375a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375c:	4a38      	ldr	r2, [pc, #224]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 800375e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003762:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b00      	cmp	r3, #0
 800376a:	f000 80a1 	beq.w	80038b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800376e:	4b34      	ldr	r3, [pc, #208]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	2b08      	cmp	r3, #8
 8003778:	d05c      	beq.n	8003834 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	699b      	ldr	r3, [r3, #24]
 800377e:	2b02      	cmp	r3, #2
 8003780:	d141      	bne.n	8003806 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003782:	4b31      	ldr	r3, [pc, #196]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003788:	f7ff fb40 	bl	8002e0c <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003790:	f7ff fb3c 	bl	8002e0c <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e087      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037a2:	4b27      	ldr	r3, [pc, #156]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	69da      	ldr	r2, [r3, #28]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6a1b      	ldr	r3, [r3, #32]
 80037b6:	431a      	orrs	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037bc:	019b      	lsls	r3, r3, #6
 80037be:	431a      	orrs	r2, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c4:	085b      	lsrs	r3, r3, #1
 80037c6:	3b01      	subs	r3, #1
 80037c8:	041b      	lsls	r3, r3, #16
 80037ca:	431a      	orrs	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d0:	061b      	lsls	r3, r3, #24
 80037d2:	491b      	ldr	r1, [pc, #108]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037d4:	4313      	orrs	r3, r2
 80037d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7ff fb15 	bl	8002e0c <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037e4:	e008      	b.n	80037f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037e6:	f7ff fb11 	bl	8002e0c <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	2b02      	cmp	r3, #2
 80037f2:	d901      	bls.n	80037f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80037f4:	2303      	movs	r3, #3
 80037f6:	e05c      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037f8:	4b11      	ldr	r3, [pc, #68]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003800:	2b00      	cmp	r3, #0
 8003802:	d0f0      	beq.n	80037e6 <HAL_RCC_OscConfig+0x416>
 8003804:	e054      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b10      	ldr	r3, [pc, #64]	; (8003848 <HAL_RCC_OscConfig+0x478>)
 8003808:	2200      	movs	r2, #0
 800380a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380c:	f7ff fafe 	bl	8002e0c <HAL_GetTick>
 8003810:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003812:	e008      	b.n	8003826 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003814:	f7ff fafa 	bl	8002e0c <HAL_GetTick>
 8003818:	4602      	mov	r2, r0
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	1ad3      	subs	r3, r2, r3
 800381e:	2b02      	cmp	r3, #2
 8003820:	d901      	bls.n	8003826 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e045      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003826:	4b06      	ldr	r3, [pc, #24]	; (8003840 <HAL_RCC_OscConfig+0x470>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d1f0      	bne.n	8003814 <HAL_RCC_OscConfig+0x444>
 8003832:	e03d      	b.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	699b      	ldr	r3, [r3, #24]
 8003838:	2b01      	cmp	r3, #1
 800383a:	d107      	bne.n	800384c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e038      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
 8003840:	40023800 	.word	0x40023800
 8003844:	40007000 	.word	0x40007000
 8003848:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800384c:	4b1b      	ldr	r3, [pc, #108]	; (80038bc <HAL_RCC_OscConfig+0x4ec>)
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b01      	cmp	r3, #1
 8003858:	d028      	beq.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003864:	429a      	cmp	r2, r3
 8003866:	d121      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003872:	429a      	cmp	r2, r3
 8003874:	d11a      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800387c:	4013      	ands	r3, r2
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003882:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003884:	4293      	cmp	r3, r2
 8003886:	d111      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003892:	085b      	lsrs	r3, r3, #1
 8003894:	3b01      	subs	r3, #1
 8003896:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003898:	429a      	cmp	r2, r3
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e000      	b.n	80038b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038b0:	2300      	movs	r3, #0
}
 80038b2:	4618      	mov	r0, r3
 80038b4:	3718      	adds	r7, #24
 80038b6:	46bd      	mov	sp, r7
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800

080038c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b084      	sub	sp, #16
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
 80038c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d101      	bne.n	80038d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038d0:	2301      	movs	r3, #1
 80038d2:	e0cc      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038d4:	4b68      	ldr	r3, [pc, #416]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0307 	and.w	r3, r3, #7
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	429a      	cmp	r2, r3
 80038e0:	d90c      	bls.n	80038fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038e2:	4b65      	ldr	r3, [pc, #404]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038ea:	4b63      	ldr	r3, [pc, #396]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0307 	and.w	r3, r3, #7
 80038f2:	683a      	ldr	r2, [r7, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d001      	beq.n	80038fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e0b8      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0302 	and.w	r3, r3, #2
 8003904:	2b00      	cmp	r3, #0
 8003906:	d020      	beq.n	800394a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d005      	beq.n	8003920 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003914:	4b59      	ldr	r3, [pc, #356]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	4a58      	ldr	r2, [pc, #352]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800391a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800391e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0308 	and.w	r3, r3, #8
 8003928:	2b00      	cmp	r3, #0
 800392a:	d005      	beq.n	8003938 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800392c:	4b53      	ldr	r3, [pc, #332]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	4a52      	ldr	r2, [pc, #328]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003932:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003936:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003938:	4b50      	ldr	r3, [pc, #320]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 800393a:	689b      	ldr	r3, [r3, #8]
 800393c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	689b      	ldr	r3, [r3, #8]
 8003944:	494d      	ldr	r1, [pc, #308]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	4313      	orrs	r3, r2
 8003948:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0301 	and.w	r3, r3, #1
 8003952:	2b00      	cmp	r3, #0
 8003954:	d044      	beq.n	80039e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d107      	bne.n	800396e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b47      	ldr	r3, [pc, #284]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d119      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
 800396c:	e07f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	685b      	ldr	r3, [r3, #4]
 8003972:	2b02      	cmp	r3, #2
 8003974:	d003      	beq.n	800397e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800397a:	2b03      	cmp	r3, #3
 800397c:	d107      	bne.n	800398e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800397e:	4b3f      	ldr	r3, [pc, #252]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003986:	2b00      	cmp	r3, #0
 8003988:	d109      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e06f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800398e:	4b3b      	ldr	r3, [pc, #236]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f003 0302 	and.w	r3, r3, #2
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e067      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800399e:	4b37      	ldr	r3, [pc, #220]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	f023 0203 	bic.w	r2, r3, #3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	4934      	ldr	r1, [pc, #208]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039b0:	f7ff fa2c 	bl	8002e0c <HAL_GetTick>
 80039b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039b6:	e00a      	b.n	80039ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b8:	f7ff fa28 	bl	8002e0c <HAL_GetTick>
 80039bc:	4602      	mov	r2, r0
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	1ad3      	subs	r3, r2, r3
 80039c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d901      	bls.n	80039ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039ca:	2303      	movs	r3, #3
 80039cc:	e04f      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039ce:	4b2b      	ldr	r3, [pc, #172]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f003 020c 	and.w	r2, r3, #12
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	009b      	lsls	r3, r3, #2
 80039dc:	429a      	cmp	r2, r3
 80039de:	d1eb      	bne.n	80039b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039e0:	4b25      	ldr	r3, [pc, #148]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0307 	and.w	r3, r3, #7
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	429a      	cmp	r2, r3
 80039ec:	d20c      	bcs.n	8003a08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ee:	4b22      	ldr	r3, [pc, #136]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f0:	683a      	ldr	r2, [r7, #0]
 80039f2:	b2d2      	uxtb	r2, r2
 80039f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039f6:	4b20      	ldr	r3, [pc, #128]	; (8003a78 <HAL_RCC_ClockConfig+0x1b8>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 0307 	and.w	r3, r3, #7
 80039fe:	683a      	ldr	r2, [r7, #0]
 8003a00:	429a      	cmp	r2, r3
 8003a02:	d001      	beq.n	8003a08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a04:	2301      	movs	r3, #1
 8003a06:	e032      	b.n	8003a6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0304 	and.w	r3, r3, #4
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d008      	beq.n	8003a26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a14:	4b19      	ldr	r3, [pc, #100]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	4916      	ldr	r1, [pc, #88]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a22:	4313      	orrs	r3, r2
 8003a24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0308 	and.w	r3, r3, #8
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d009      	beq.n	8003a46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a32:	4b12      	ldr	r3, [pc, #72]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	691b      	ldr	r3, [r3, #16]
 8003a3e:	00db      	lsls	r3, r3, #3
 8003a40:	490e      	ldr	r1, [pc, #56]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	4313      	orrs	r3, r2
 8003a44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003a46:	f000 f821 	bl	8003a8c <HAL_RCC_GetSysClockFreq>
 8003a4a:	4602      	mov	r2, r0
 8003a4c:	4b0b      	ldr	r3, [pc, #44]	; (8003a7c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	091b      	lsrs	r3, r3, #4
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	490a      	ldr	r1, [pc, #40]	; (8003a80 <HAL_RCC_ClockConfig+0x1c0>)
 8003a58:	5ccb      	ldrb	r3, [r1, r3]
 8003a5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a5e:	4a09      	ldr	r2, [pc, #36]	; (8003a84 <HAL_RCC_ClockConfig+0x1c4>)
 8003a60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003a62:	4b09      	ldr	r3, [pc, #36]	; (8003a88 <HAL_RCC_ClockConfig+0x1c8>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7fe ffe0 	bl	8002a2c <HAL_InitTick>

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3710      	adds	r7, #16
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	40023c00 	.word	0x40023c00
 8003a7c:	40023800 	.word	0x40023800
 8003a80:	080128a0 	.word	0x080128a0
 8003a84:	20000024 	.word	0x20000024
 8003a88:	20000028 	.word	0x20000028

08003a8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a90:	b094      	sub	sp, #80	; 0x50
 8003a92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003a94:	2300      	movs	r3, #0
 8003a96:	647b      	str	r3, [r7, #68]	; 0x44
 8003a98:	2300      	movs	r3, #0
 8003a9a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003aa4:	4b79      	ldr	r3, [pc, #484]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 030c 	and.w	r3, r3, #12
 8003aac:	2b08      	cmp	r3, #8
 8003aae:	d00d      	beq.n	8003acc <HAL_RCC_GetSysClockFreq+0x40>
 8003ab0:	2b08      	cmp	r3, #8
 8003ab2:	f200 80e1 	bhi.w	8003c78 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d002      	beq.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aba:	2b04      	cmp	r3, #4
 8003abc:	d003      	beq.n	8003ac6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003abe:	e0db      	b.n	8003c78 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003ac0:	4b73      	ldr	r3, [pc, #460]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003ac2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003ac4:	e0db      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003ac6:	4b73      	ldr	r3, [pc, #460]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x208>)
 8003ac8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003aca:	e0d8      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003acc:	4b6f      	ldr	r3, [pc, #444]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ad4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d063      	beq.n	8003baa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ae2:	4b6a      	ldr	r3, [pc, #424]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	099b      	lsrs	r3, r3, #6
 8003ae8:	2200      	movs	r2, #0
 8003aea:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
 8003af6:	2300      	movs	r3, #0
 8003af8:	637b      	str	r3, [r7, #52]	; 0x34
 8003afa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003afe:	4622      	mov	r2, r4
 8003b00:	462b      	mov	r3, r5
 8003b02:	f04f 0000 	mov.w	r0, #0
 8003b06:	f04f 0100 	mov.w	r1, #0
 8003b0a:	0159      	lsls	r1, r3, #5
 8003b0c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b10:	0150      	lsls	r0, r2, #5
 8003b12:	4602      	mov	r2, r0
 8003b14:	460b      	mov	r3, r1
 8003b16:	4621      	mov	r1, r4
 8003b18:	1a51      	subs	r1, r2, r1
 8003b1a:	6139      	str	r1, [r7, #16]
 8003b1c:	4629      	mov	r1, r5
 8003b1e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b22:	617b      	str	r3, [r7, #20]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b30:	4659      	mov	r1, fp
 8003b32:	018b      	lsls	r3, r1, #6
 8003b34:	4651      	mov	r1, sl
 8003b36:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b3a:	4651      	mov	r1, sl
 8003b3c:	018a      	lsls	r2, r1, #6
 8003b3e:	4651      	mov	r1, sl
 8003b40:	ebb2 0801 	subs.w	r8, r2, r1
 8003b44:	4659      	mov	r1, fp
 8003b46:	eb63 0901 	sbc.w	r9, r3, r1
 8003b4a:	f04f 0200 	mov.w	r2, #0
 8003b4e:	f04f 0300 	mov.w	r3, #0
 8003b52:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b56:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b5a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b5e:	4690      	mov	r8, r2
 8003b60:	4699      	mov	r9, r3
 8003b62:	4623      	mov	r3, r4
 8003b64:	eb18 0303 	adds.w	r3, r8, r3
 8003b68:	60bb      	str	r3, [r7, #8]
 8003b6a:	462b      	mov	r3, r5
 8003b6c:	eb49 0303 	adc.w	r3, r9, r3
 8003b70:	60fb      	str	r3, [r7, #12]
 8003b72:	f04f 0200 	mov.w	r2, #0
 8003b76:	f04f 0300 	mov.w	r3, #0
 8003b7a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b7e:	4629      	mov	r1, r5
 8003b80:	024b      	lsls	r3, r1, #9
 8003b82:	4621      	mov	r1, r4
 8003b84:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b88:	4621      	mov	r1, r4
 8003b8a:	024a      	lsls	r2, r1, #9
 8003b8c:	4610      	mov	r0, r2
 8003b8e:	4619      	mov	r1, r3
 8003b90:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b92:	2200      	movs	r2, #0
 8003b94:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b96:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b98:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b9c:	f7fc ff16 	bl	80009cc <__aeabi_uldivmod>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4613      	mov	r3, r2
 8003ba6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ba8:	e058      	b.n	8003c5c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003baa:	4b38      	ldr	r3, [pc, #224]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	099b      	lsrs	r3, r3, #6
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	4618      	mov	r0, r3
 8003bb4:	4611      	mov	r1, r2
 8003bb6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bba:	623b      	str	r3, [r7, #32]
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	627b      	str	r3, [r7, #36]	; 0x24
 8003bc0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bc4:	4642      	mov	r2, r8
 8003bc6:	464b      	mov	r3, r9
 8003bc8:	f04f 0000 	mov.w	r0, #0
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	0159      	lsls	r1, r3, #5
 8003bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd6:	0150      	lsls	r0, r2, #5
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4641      	mov	r1, r8
 8003bde:	ebb2 0a01 	subs.w	sl, r2, r1
 8003be2:	4649      	mov	r1, r9
 8003be4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003bf4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bf8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bfc:	ebb2 040a 	subs.w	r4, r2, sl
 8003c00:	eb63 050b 	sbc.w	r5, r3, fp
 8003c04:	f04f 0200 	mov.w	r2, #0
 8003c08:	f04f 0300 	mov.w	r3, #0
 8003c0c:	00eb      	lsls	r3, r5, #3
 8003c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c12:	00e2      	lsls	r2, r4, #3
 8003c14:	4614      	mov	r4, r2
 8003c16:	461d      	mov	r5, r3
 8003c18:	4643      	mov	r3, r8
 8003c1a:	18e3      	adds	r3, r4, r3
 8003c1c:	603b      	str	r3, [r7, #0]
 8003c1e:	464b      	mov	r3, r9
 8003c20:	eb45 0303 	adc.w	r3, r5, r3
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	f04f 0200 	mov.w	r2, #0
 8003c2a:	f04f 0300 	mov.w	r3, #0
 8003c2e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c32:	4629      	mov	r1, r5
 8003c34:	028b      	lsls	r3, r1, #10
 8003c36:	4621      	mov	r1, r4
 8003c38:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c3c:	4621      	mov	r1, r4
 8003c3e:	028a      	lsls	r2, r1, #10
 8003c40:	4610      	mov	r0, r2
 8003c42:	4619      	mov	r1, r3
 8003c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c46:	2200      	movs	r2, #0
 8003c48:	61bb      	str	r3, [r7, #24]
 8003c4a:	61fa      	str	r2, [r7, #28]
 8003c4c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c50:	f7fc febc 	bl	80009cc <__aeabi_uldivmod>
 8003c54:	4602      	mov	r2, r0
 8003c56:	460b      	mov	r3, r1
 8003c58:	4613      	mov	r3, r2
 8003c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c5c:	4b0b      	ldr	r3, [pc, #44]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c5e:	685b      	ldr	r3, [r3, #4]
 8003c60:	0c1b      	lsrs	r3, r3, #16
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	3301      	adds	r3, #1
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003c6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c74:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c76:	e002      	b.n	8003c7e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c78:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c7a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c7c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3750      	adds	r7, #80	; 0x50
 8003c84:	46bd      	mov	sp, r7
 8003c86:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200

08003c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000024 	.word	0x20000024

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff0 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0a9b      	lsrs	r3, r3, #10
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	080128b0 	.word	0x080128b0

08003cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003cdc:	f7ff ffdc 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0b5b      	lsrs	r3, r3, #13
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	080128b0 	.word	0x080128b0

08003d00 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b083      	sub	sp, #12
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
 8003d08:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCC_GetClockConfig+0x5c>)
 8003d12:	689b      	ldr	r3, [r3, #8]
 8003d14:	f003 0203 	and.w	r2, r3, #3
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d1c:	4b0f      	ldr	r3, [pc, #60]	; (8003d5c <HAL_RCC_GetClockConfig+0x5c>)
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d28:	4b0c      	ldr	r3, [pc, #48]	; (8003d5c <HAL_RCC_GetClockConfig+0x5c>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d34:	4b09      	ldr	r3, [pc, #36]	; (8003d5c <HAL_RCC_GetClockConfig+0x5c>)
 8003d36:	689b      	ldr	r3, [r3, #8]
 8003d38:	08db      	lsrs	r3, r3, #3
 8003d3a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d42:	4b07      	ldr	r3, [pc, #28]	; (8003d60 <HAL_RCC_GetClockConfig+0x60>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0207 	and.w	r2, r3, #7
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	601a      	str	r2, [r3, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	40023800 	.word	0x40023800
 8003d60:	40023c00 	.word	0x40023c00

08003d64 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d101      	bne.n	8003d76 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e07b      	b.n	8003e6e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d108      	bne.n	8003d90 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d86:	d009      	beq.n	8003d9c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	61da      	str	r2, [r3, #28]
 8003d8e:	e005      	b.n	8003d9c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d106      	bne.n	8003dbc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f7fe f97a 	bl	80020b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2202      	movs	r2, #2
 8003dc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dd2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003de4:	431a      	orrs	r2, r3
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0302 	and.w	r3, r3, #2
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f003 0301 	and.w	r3, r3, #1
 8003e02:	431a      	orrs	r2, r3
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0c:	431a      	orrs	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	69db      	ldr	r3, [r3, #28]
 8003e12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003e16:	431a      	orrs	r2, r3
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e20:	ea42 0103 	orr.w	r1, r2, r3
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e28:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	430a      	orrs	r2, r1
 8003e32:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	0c1b      	lsrs	r3, r3, #16
 8003e3a:	f003 0104 	and.w	r1, r3, #4
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e42:	f003 0210 	and.w	r2, r3, #16
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	430a      	orrs	r2, r1
 8003e4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	69da      	ldr	r2, [r3, #28]
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3708      	adds	r7, #8
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b088      	sub	sp, #32
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	60f8      	str	r0, [r7, #12]
 8003e7e:	60b9      	str	r1, [r7, #8]
 8003e80:	603b      	str	r3, [r7, #0]
 8003e82:	4613      	mov	r3, r2
 8003e84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e86:	2300      	movs	r3, #0
 8003e88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d101      	bne.n	8003e98 <HAL_SPI_Transmit+0x22>
 8003e94:	2302      	movs	r3, #2
 8003e96:	e126      	b.n	80040e6 <HAL_SPI_Transmit+0x270>
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ea0:	f7fe ffb4 	bl	8002e0c <HAL_GetTick>
 8003ea4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d002      	beq.n	8003ebc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003eba:	e10b      	b.n	80040d4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d002      	beq.n	8003ec8 <HAL_SPI_Transmit+0x52>
 8003ec2:	88fb      	ldrh	r3, [r7, #6]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d102      	bne.n	8003ece <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003ecc:	e102      	b.n	80040d4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2203      	movs	r2, #3
 8003ed2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2200      	movs	r2, #0
 8003eda:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	68ba      	ldr	r2, [r7, #8]
 8003ee0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	88fa      	ldrh	r2, [r7, #6]
 8003ee6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	88fa      	ldrh	r2, [r7, #6]
 8003eec:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f14:	d10f      	bne.n	8003f36 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003f24:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	681a      	ldr	r2, [r3, #0]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f34:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f40:	2b40      	cmp	r3, #64	; 0x40
 8003f42:	d007      	beq.n	8003f54 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	681a      	ldr	r2, [r3, #0]
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f52:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f5c:	d14b      	bne.n	8003ff6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d002      	beq.n	8003f6c <HAL_SPI_Transmit+0xf6>
 8003f66:	8afb      	ldrh	r3, [r7, #22]
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d13e      	bne.n	8003fea <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f70:	881a      	ldrh	r2, [r3, #0]
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f7c:	1c9a      	adds	r2, r3, #2
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003f90:	e02b      	b.n	8003fea <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	689b      	ldr	r3, [r3, #8]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d112      	bne.n	8003fc6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fa4:	881a      	ldrh	r2, [r3, #0]
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fb0:	1c9a      	adds	r2, r3, #2
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	3b01      	subs	r3, #1
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8003fc4:	e011      	b.n	8003fea <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003fc6:	f7fe ff21 	bl	8002e0c <HAL_GetTick>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	1ad3      	subs	r3, r2, r3
 8003fd0:	683a      	ldr	r2, [r7, #0]
 8003fd2:	429a      	cmp	r2, r3
 8003fd4:	d803      	bhi.n	8003fde <HAL_SPI_Transmit+0x168>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fdc:	d102      	bne.n	8003fe4 <HAL_SPI_Transmit+0x16e>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d102      	bne.n	8003fea <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003fe8:	e074      	b.n	80040d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003fee:	b29b      	uxth	r3, r3
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d1ce      	bne.n	8003f92 <HAL_SPI_Transmit+0x11c>
 8003ff4:	e04c      	b.n	8004090 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d002      	beq.n	8004004 <HAL_SPI_Transmit+0x18e>
 8003ffe:	8afb      	ldrh	r3, [r7, #22]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d140      	bne.n	8004086 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	330c      	adds	r3, #12
 800400e:	7812      	ldrb	r2, [r2, #0]
 8004010:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	1c5a      	adds	r2, r3, #1
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004020:	b29b      	uxth	r3, r3
 8004022:	3b01      	subs	r3, #1
 8004024:	b29a      	uxth	r2, r3
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800402a:	e02c      	b.n	8004086 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	689b      	ldr	r3, [r3, #8]
 8004032:	f003 0302 	and.w	r3, r3, #2
 8004036:	2b02      	cmp	r3, #2
 8004038:	d113      	bne.n	8004062 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	330c      	adds	r3, #12
 8004044:	7812      	ldrb	r2, [r2, #0]
 8004046:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800404c:	1c5a      	adds	r2, r3, #1
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004056:	b29b      	uxth	r3, r3
 8004058:	3b01      	subs	r3, #1
 800405a:	b29a      	uxth	r2, r3
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004060:	e011      	b.n	8004086 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004062:	f7fe fed3 	bl	8002e0c <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	69bb      	ldr	r3, [r7, #24]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	683a      	ldr	r2, [r7, #0]
 800406e:	429a      	cmp	r2, r3
 8004070:	d803      	bhi.n	800407a <HAL_SPI_Transmit+0x204>
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004078:	d102      	bne.n	8004080 <HAL_SPI_Transmit+0x20a>
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d102      	bne.n	8004086 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004080:	2303      	movs	r3, #3
 8004082:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004084:	e026      	b.n	80040d4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800408a:	b29b      	uxth	r3, r3
 800408c:	2b00      	cmp	r3, #0
 800408e:	d1cd      	bne.n	800402c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004090:	69ba      	ldr	r2, [r7, #24]
 8004092:	6839      	ldr	r1, [r7, #0]
 8004094:	68f8      	ldr	r0, [r7, #12]
 8004096:	f000 f8b3 	bl	8004200 <SPI_EndRxTxTransaction>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d002      	beq.n	80040a6 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	2220      	movs	r2, #32
 80040a4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10a      	bne.n	80040c4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
 80040b8:	613b      	str	r3, [r7, #16]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	689b      	ldr	r3, [r3, #8]
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d002      	beq.n	80040d2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e000      	b.n	80040d4 <HAL_SPI_Transmit+0x25e>
  }

error:
 80040d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2201      	movs	r2, #1
 80040d8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3720      	adds	r7, #32
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b088      	sub	sp, #32
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	603b      	str	r3, [r7, #0]
 80040fc:	4613      	mov	r3, r2
 80040fe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004100:	f7fe fe84 	bl	8002e0c <HAL_GetTick>
 8004104:	4602      	mov	r2, r0
 8004106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004108:	1a9b      	subs	r3, r3, r2
 800410a:	683a      	ldr	r2, [r7, #0]
 800410c:	4413      	add	r3, r2
 800410e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004110:	f7fe fe7c 	bl	8002e0c <HAL_GetTick>
 8004114:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004116:	4b39      	ldr	r3, [pc, #228]	; (80041fc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	015b      	lsls	r3, r3, #5
 800411c:	0d1b      	lsrs	r3, r3, #20
 800411e:	69fa      	ldr	r2, [r7, #28]
 8004120:	fb02 f303 	mul.w	r3, r2, r3
 8004124:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004126:	e054      	b.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d050      	beq.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004130:	f7fe fe6c 	bl	8002e0c <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	69fa      	ldr	r2, [r7, #28]
 800413c:	429a      	cmp	r2, r3
 800413e:	d902      	bls.n	8004146 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d13d      	bne.n	80041c2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	685a      	ldr	r2, [r3, #4]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004154:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	685b      	ldr	r3, [r3, #4]
 800415a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800415e:	d111      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004168:	d004      	beq.n	8004174 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004172:	d107      	bne.n	8004184 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004182:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800418c:	d10f      	bne.n	80041ae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	681a      	ldr	r2, [r3, #0]
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800419c:	601a      	str	r2, [r3, #0]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80041ac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	2201      	movs	r2, #1
 80041b2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e017      	b.n	80041f2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d101      	bne.n	80041cc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80041c8:	2300      	movs	r3, #0
 80041ca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80041cc:	697b      	ldr	r3, [r7, #20]
 80041ce:	3b01      	subs	r3, #1
 80041d0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	689a      	ldr	r2, [r3, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
 80041da:	4013      	ands	r3, r2
 80041dc:	68ba      	ldr	r2, [r7, #8]
 80041de:	429a      	cmp	r2, r3
 80041e0:	bf0c      	ite	eq
 80041e2:	2301      	moveq	r3, #1
 80041e4:	2300      	movne	r3, #0
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	461a      	mov	r2, r3
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d19b      	bne.n	8004128 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3720      	adds	r7, #32
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000024 	.word	0x20000024

08004200 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b088      	sub	sp, #32
 8004204:	af02      	add	r7, sp, #8
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800420c:	4b1b      	ldr	r3, [pc, #108]	; (800427c <SPI_EndRxTxTransaction+0x7c>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1b      	ldr	r2, [pc, #108]	; (8004280 <SPI_EndRxTxTransaction+0x80>)
 8004212:	fba2 2303 	umull	r2, r3, r2, r3
 8004216:	0d5b      	lsrs	r3, r3, #21
 8004218:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800421c:	fb02 f303 	mul.w	r3, r2, r3
 8004220:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800422a:	d112      	bne.n	8004252 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	9300      	str	r3, [sp, #0]
 8004230:	68bb      	ldr	r3, [r7, #8]
 8004232:	2200      	movs	r2, #0
 8004234:	2180      	movs	r1, #128	; 0x80
 8004236:	68f8      	ldr	r0, [r7, #12]
 8004238:	f7ff ff5a 	bl	80040f0 <SPI_WaitFlagStateUntilTimeout>
 800423c:	4603      	mov	r3, r0
 800423e:	2b00      	cmp	r3, #0
 8004240:	d016      	beq.n	8004270 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004246:	f043 0220 	orr.w	r2, r3, #32
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800424e:	2303      	movs	r3, #3
 8004250:	e00f      	b.n	8004272 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004252:	697b      	ldr	r3, [r7, #20]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d00a      	beq.n	800426e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	3b01      	subs	r3, #1
 800425c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004268:	2b80      	cmp	r3, #128	; 0x80
 800426a:	d0f2      	beq.n	8004252 <SPI_EndRxTxTransaction+0x52>
 800426c:	e000      	b.n	8004270 <SPI_EndRxTxTransaction+0x70>
        break;
 800426e:	bf00      	nop
  }

  return HAL_OK;
 8004270:	2300      	movs	r3, #0
}
 8004272:	4618      	mov	r0, r3
 8004274:	3718      	adds	r7, #24
 8004276:	46bd      	mov	sp, r7
 8004278:	bd80      	pop	{r7, pc}
 800427a:	bf00      	nop
 800427c:	20000024 	.word	0x20000024
 8004280:	165e9f81 	.word	0x165e9f81

08004284 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b082      	sub	sp, #8
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d101      	bne.n	8004296 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004292:	2301      	movs	r3, #1
 8004294:	e041      	b.n	800431a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800429c:	b2db      	uxtb	r3, r3
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d106      	bne.n	80042b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2200      	movs	r2, #0
 80042a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f7fe fcba 	bl	8002c24 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681a      	ldr	r2, [r3, #0]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	3304      	adds	r3, #4
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f000 fa88 	bl	80047d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2201      	movs	r2, #1
 80042d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2201      	movs	r2, #1
 80042e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2201      	movs	r2, #1
 80042fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	2201      	movs	r2, #1
 8004304:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	2201      	movs	r2, #1
 8004314:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004318:	2300      	movs	r3, #0
}
 800431a:	4618      	mov	r0, r3
 800431c:	3708      	adds	r7, #8
 800431e:	46bd      	mov	sp, r7
 8004320:	bd80      	pop	{r7, pc}
	...

08004324 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004332:	b2db      	uxtb	r3, r3
 8004334:	2b01      	cmp	r3, #1
 8004336:	d001      	beq.n	800433c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e044      	b.n	80043c6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2202      	movs	r2, #2
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68da      	ldr	r2, [r3, #12]
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	f042 0201 	orr.w	r2, r2, #1
 8004352:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a1e      	ldr	r2, [pc, #120]	; (80043d4 <HAL_TIM_Base_Start_IT+0xb0>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d018      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x6c>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004366:	d013      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x6c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a1a      	ldr	r2, [pc, #104]	; (80043d8 <HAL_TIM_Base_Start_IT+0xb4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d00e      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x6c>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a19      	ldr	r2, [pc, #100]	; (80043dc <HAL_TIM_Base_Start_IT+0xb8>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d009      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x6c>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a17      	ldr	r2, [pc, #92]	; (80043e0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d004      	beq.n	8004390 <HAL_TIM_Base_Start_IT+0x6c>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a16      	ldr	r2, [pc, #88]	; (80043e4 <HAL_TIM_Base_Start_IT+0xc0>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d111      	bne.n	80043b4 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f003 0307 	and.w	r3, r3, #7
 800439a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d010      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	681a      	ldr	r2, [r3, #0]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f042 0201 	orr.w	r2, r2, #1
 80043b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b2:	e007      	b.n	80043c4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681a      	ldr	r2, [r3, #0]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f042 0201 	orr.w	r2, r2, #1
 80043c2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043c4:	2300      	movs	r3, #0
}
 80043c6:	4618      	mov	r0, r3
 80043c8:	3714      	adds	r7, #20
 80043ca:	46bd      	mov	sp, r7
 80043cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d0:	4770      	bx	lr
 80043d2:	bf00      	nop
 80043d4:	40010000 	.word	0x40010000
 80043d8:	40000400 	.word	0x40000400
 80043dc:	40000800 	.word	0x40000800
 80043e0:	40000c00 	.word	0x40000c00
 80043e4:	40014000 	.word	0x40014000

080043e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b082      	sub	sp, #8
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	691b      	ldr	r3, [r3, #16]
 80043f6:	f003 0302 	and.w	r3, r3, #2
 80043fa:	2b02      	cmp	r3, #2
 80043fc:	d122      	bne.n	8004444 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	68db      	ldr	r3, [r3, #12]
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b02      	cmp	r3, #2
 800440a:	d11b      	bne.n	8004444 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f06f 0202 	mvn.w	r2, #2
 8004414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	2b00      	cmp	r3, #0
 8004428:	d003      	beq.n	8004432 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f9b5 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004430:	e005      	b.n	800443e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f9a7 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	f000 f9b8 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	f003 0304 	and.w	r3, r3, #4
 800444e:	2b04      	cmp	r3, #4
 8004450:	d122      	bne.n	8004498 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68db      	ldr	r3, [r3, #12]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b04      	cmp	r3, #4
 800445e:	d11b      	bne.n	8004498 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f06f 0204 	mvn.w	r2, #4
 8004468:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2202      	movs	r2, #2
 800446e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800447a:	2b00      	cmp	r3, #0
 800447c:	d003      	beq.n	8004486 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	f000 f98b 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 8004484:	e005      	b.n	8004492 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f97d 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800448c:	6878      	ldr	r0, [r7, #4]
 800448e:	f000 f98e 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2200      	movs	r2, #0
 8004496:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b08      	cmp	r3, #8
 80044a4:	d122      	bne.n	80044ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	f003 0308 	and.w	r3, r3, #8
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d11b      	bne.n	80044ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f06f 0208 	mvn.w	r2, #8
 80044bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2204      	movs	r2, #4
 80044c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f003 0303 	and.w	r3, r3, #3
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d003      	beq.n	80044da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044d2:	6878      	ldr	r0, [r7, #4]
 80044d4:	f000 f961 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 80044d8:	e005      	b.n	80044e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f953 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 f964 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	f003 0310 	and.w	r3, r3, #16
 80044f6:	2b10      	cmp	r3, #16
 80044f8:	d122      	bne.n	8004540 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	f003 0310 	and.w	r3, r3, #16
 8004504:	2b10      	cmp	r3, #16
 8004506:	d11b      	bne.n	8004540 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f06f 0210 	mvn.w	r2, #16
 8004510:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2208      	movs	r2, #8
 8004516:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	69db      	ldr	r3, [r3, #28]
 800451e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004522:	2b00      	cmp	r3, #0
 8004524:	d003      	beq.n	800452e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	f000 f937 	bl	800479a <HAL_TIM_IC_CaptureCallback>
 800452c:	e005      	b.n	800453a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f929 	bl	8004786 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004534:	6878      	ldr	r0, [r7, #4]
 8004536:	f000 f93a 	bl	80047ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	691b      	ldr	r3, [r3, #16]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b01      	cmp	r3, #1
 800454c:	d10e      	bne.n	800456c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	68db      	ldr	r3, [r3, #12]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b01      	cmp	r3, #1
 800455a:	d107      	bne.n	800456c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f06f 0201 	mvn.w	r2, #1
 8004564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7fd fd58 	bl	800201c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004576:	2b80      	cmp	r3, #128	; 0x80
 8004578:	d10e      	bne.n	8004598 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004584:	2b80      	cmp	r3, #128	; 0x80
 8004586:	d107      	bne.n	8004598 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004590:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004592:	6878      	ldr	r0, [r7, #4]
 8004594:	f000 fab2 	bl	8004afc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a2:	2b40      	cmp	r3, #64	; 0x40
 80045a4:	d10e      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68db      	ldr	r3, [r3, #12]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b40      	cmp	r3, #64	; 0x40
 80045b2:	d107      	bne.n	80045c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	f000 f8ff 	bl	80047c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f003 0320 	and.w	r3, r3, #32
 80045ce:	2b20      	cmp	r3, #32
 80045d0:	d10e      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	f003 0320 	and.w	r3, r3, #32
 80045dc:	2b20      	cmp	r3, #32
 80045de:	d107      	bne.n	80045f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f06f 0220 	mvn.w	r2, #32
 80045e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 fa7c 	bl	8004ae8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045f0:	bf00      	nop
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004602:	2300      	movs	r3, #0
 8004604:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800460c:	2b01      	cmp	r3, #1
 800460e:	d101      	bne.n	8004614 <HAL_TIM_ConfigClockSource+0x1c>
 8004610:	2302      	movs	r3, #2
 8004612:	e0b4      	b.n	800477e <HAL_TIM_ConfigClockSource+0x186>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004632:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800463a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68ba      	ldr	r2, [r7, #8]
 8004642:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800464c:	d03e      	beq.n	80046cc <HAL_TIM_ConfigClockSource+0xd4>
 800464e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004652:	f200 8087 	bhi.w	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004656:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800465a:	f000 8086 	beq.w	800476a <HAL_TIM_ConfigClockSource+0x172>
 800465e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004662:	d87f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004664:	2b70      	cmp	r3, #112	; 0x70
 8004666:	d01a      	beq.n	800469e <HAL_TIM_ConfigClockSource+0xa6>
 8004668:	2b70      	cmp	r3, #112	; 0x70
 800466a:	d87b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 800466c:	2b60      	cmp	r3, #96	; 0x60
 800466e:	d050      	beq.n	8004712 <HAL_TIM_ConfigClockSource+0x11a>
 8004670:	2b60      	cmp	r3, #96	; 0x60
 8004672:	d877      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004674:	2b50      	cmp	r3, #80	; 0x50
 8004676:	d03c      	beq.n	80046f2 <HAL_TIM_ConfigClockSource+0xfa>
 8004678:	2b50      	cmp	r3, #80	; 0x50
 800467a:	d873      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 800467c:	2b40      	cmp	r3, #64	; 0x40
 800467e:	d058      	beq.n	8004732 <HAL_TIM_ConfigClockSource+0x13a>
 8004680:	2b40      	cmp	r3, #64	; 0x40
 8004682:	d86f      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004684:	2b30      	cmp	r3, #48	; 0x30
 8004686:	d064      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 8004688:	2b30      	cmp	r3, #48	; 0x30
 800468a:	d86b      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 800468c:	2b20      	cmp	r3, #32
 800468e:	d060      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 8004690:	2b20      	cmp	r3, #32
 8004692:	d867      	bhi.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d05c      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 8004698:	2b10      	cmp	r3, #16
 800469a:	d05a      	beq.n	8004752 <HAL_TIM_ConfigClockSource+0x15a>
 800469c:	e062      	b.n	8004764 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6818      	ldr	r0, [r3, #0]
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	6899      	ldr	r1, [r3, #8]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	f000 f98d 	bl	80049cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	68ba      	ldr	r2, [r7, #8]
 80046c8:	609a      	str	r2, [r3, #8]
      break;
 80046ca:	e04f      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6818      	ldr	r0, [r3, #0]
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	6899      	ldr	r1, [r3, #8]
 80046d4:	683b      	ldr	r3, [r7, #0]
 80046d6:	685a      	ldr	r2, [r3, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f000 f976 	bl	80049cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	689a      	ldr	r2, [r3, #8]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80046ee:	609a      	str	r2, [r3, #8]
      break;
 80046f0:	e03c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6818      	ldr	r0, [r3, #0]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	6859      	ldr	r1, [r3, #4]
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	461a      	mov	r2, r3
 8004700:	f000 f8ea 	bl	80048d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2150      	movs	r1, #80	; 0x50
 800470a:	4618      	mov	r0, r3
 800470c:	f000 f943 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 8004710:	e02c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6859      	ldr	r1, [r3, #4]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	68db      	ldr	r3, [r3, #12]
 800471e:	461a      	mov	r2, r3
 8004720:	f000 f909 	bl	8004936 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	2160      	movs	r1, #96	; 0x60
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f933 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 8004730:	e01c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6818      	ldr	r0, [r3, #0]
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	461a      	mov	r2, r3
 8004740:	f000 f8ca 	bl	80048d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	2140      	movs	r1, #64	; 0x40
 800474a:	4618      	mov	r0, r3
 800474c:	f000 f923 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 8004750:	e00c      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4619      	mov	r1, r3
 800475c:	4610      	mov	r0, r2
 800475e:	f000 f91a 	bl	8004996 <TIM_ITRx_SetConfig>
      break;
 8004762:	e003      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	73fb      	strb	r3, [r7, #15]
      break;
 8004768:	e000      	b.n	800476c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800476a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2201      	movs	r2, #1
 8004770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800477c:	7bfb      	ldrb	r3, [r7, #15]
}
 800477e:	4618      	mov	r0, r3
 8004780:	3710      	adds	r7, #16
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}

08004786 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004786:	b480      	push	{r7}
 8004788:	b083      	sub	sp, #12
 800478a:	af00      	add	r7, sp, #0
 800478c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800478e:	bf00      	nop
 8004790:	370c      	adds	r7, #12
 8004792:	46bd      	mov	sp, r7
 8004794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004798:	4770      	bx	lr

0800479a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800479a:	b480      	push	{r7}
 800479c:	b083      	sub	sp, #12
 800479e:	af00      	add	r7, sp, #0
 80047a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80047a2:	bf00      	nop
 80047a4:	370c      	adds	r7, #12
 80047a6:	46bd      	mov	sp, r7
 80047a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ac:	4770      	bx	lr

080047ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b083      	sub	sp, #12
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80047b6:	bf00      	nop
 80047b8:	370c      	adds	r7, #12
 80047ba:	46bd      	mov	sp, r7
 80047bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c0:	4770      	bx	lr

080047c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80047c2:	b480      	push	{r7}
 80047c4:	b083      	sub	sp, #12
 80047c6:	af00      	add	r7, sp, #0
 80047c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
	...

080047d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80047d8:	b480      	push	{r7}
 80047da:	b085      	sub	sp, #20
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
 80047e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	4a34      	ldr	r2, [pc, #208]	; (80048bc <TIM_Base_SetConfig+0xe4>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d00f      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f6:	d00b      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a31      	ldr	r2, [pc, #196]	; (80048c0 <TIM_Base_SetConfig+0xe8>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d007      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	4a30      	ldr	r2, [pc, #192]	; (80048c4 <TIM_Base_SetConfig+0xec>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d003      	beq.n	8004810 <TIM_Base_SetConfig+0x38>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	4a2f      	ldr	r2, [pc, #188]	; (80048c8 <TIM_Base_SetConfig+0xf0>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d108      	bne.n	8004822 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004816:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	4313      	orrs	r3, r2
 8004820:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	4a25      	ldr	r2, [pc, #148]	; (80048bc <TIM_Base_SetConfig+0xe4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d01b      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004830:	d017      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <TIM_Base_SetConfig+0xe8>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d013      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <TIM_Base_SetConfig+0xec>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d00f      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <TIM_Base_SetConfig+0xf0>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d00b      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	4a1f      	ldr	r2, [pc, #124]	; (80048cc <TIM_Base_SetConfig+0xf4>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d007      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	4a1e      	ldr	r2, [pc, #120]	; (80048d0 <TIM_Base_SetConfig+0xf8>)
 8004856:	4293      	cmp	r3, r2
 8004858:	d003      	beq.n	8004862 <TIM_Base_SetConfig+0x8a>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	4a1d      	ldr	r2, [pc, #116]	; (80048d4 <TIM_Base_SetConfig+0xfc>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d108      	bne.n	8004874 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	68fa      	ldr	r2, [r7, #12]
 8004870:	4313      	orrs	r3, r2
 8004872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	695b      	ldr	r3, [r3, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	689a      	ldr	r2, [r3, #8]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	4a08      	ldr	r2, [pc, #32]	; (80048bc <TIM_Base_SetConfig+0xe4>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d103      	bne.n	80048a8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	691a      	ldr	r2, [r3, #16]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2201      	movs	r2, #1
 80048ac:	615a      	str	r2, [r3, #20]
}
 80048ae:	bf00      	nop
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	40010000 	.word	0x40010000
 80048c0:	40000400 	.word	0x40000400
 80048c4:	40000800 	.word	0x40000800
 80048c8:	40000c00 	.word	0x40000c00
 80048cc:	40014000 	.word	0x40014000
 80048d0:	40014400 	.word	0x40014400
 80048d4:	40014800 	.word	0x40014800

080048d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0201 	bic.w	r2, r3, #1
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	011b      	lsls	r3, r3, #4
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 030a 	bic.w	r3, r3, #10
 8004914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004916:	697a      	ldr	r2, [r7, #20]
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	4313      	orrs	r3, r2
 800491c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	693a      	ldr	r2, [r7, #16]
 8004922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	697a      	ldr	r2, [r7, #20]
 8004928:	621a      	str	r2, [r3, #32]
}
 800492a:	bf00      	nop
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004936:	b480      	push	{r7}
 8004938:	b087      	sub	sp, #28
 800493a:	af00      	add	r7, sp, #0
 800493c:	60f8      	str	r0, [r7, #12]
 800493e:	60b9      	str	r1, [r7, #8]
 8004940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	6a1b      	ldr	r3, [r3, #32]
 8004946:	f023 0210 	bic.w	r2, r3, #16
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	6a1b      	ldr	r3, [r3, #32]
 8004958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	031b      	lsls	r3, r3, #12
 8004966:	697a      	ldr	r2, [r7, #20]
 8004968:	4313      	orrs	r3, r2
 800496a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004972:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	693a      	ldr	r2, [r7, #16]
 800497a:	4313      	orrs	r3, r2
 800497c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	697a      	ldr	r2, [r7, #20]
 8004982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	621a      	str	r2, [r3, #32]
}
 800498a:	bf00      	nop
 800498c:	371c      	adds	r7, #28
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr

08004996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004996:	b480      	push	{r7}
 8004998:	b085      	sub	sp, #20
 800499a:	af00      	add	r7, sp, #0
 800499c:	6078      	str	r0, [r7, #4]
 800499e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80049ae:	683a      	ldr	r2, [r7, #0]
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	f043 0307 	orr.w	r3, r3, #7
 80049b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	609a      	str	r2, [r3, #8]
}
 80049c0:	bf00      	nop
 80049c2:	3714      	adds	r7, #20
 80049c4:	46bd      	mov	sp, r7
 80049c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ca:	4770      	bx	lr

080049cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80049cc:	b480      	push	{r7}
 80049ce:	b087      	sub	sp, #28
 80049d0:	af00      	add	r7, sp, #0
 80049d2:	60f8      	str	r0, [r7, #12]
 80049d4:	60b9      	str	r1, [r7, #8]
 80049d6:	607a      	str	r2, [r7, #4]
 80049d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049da:	68fb      	ldr	r3, [r7, #12]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049e0:	697b      	ldr	r3, [r7, #20]
 80049e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	021a      	lsls	r2, r3, #8
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	431a      	orrs	r2, r3
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	697a      	ldr	r2, [r7, #20]
 80049f6:	4313      	orrs	r3, r2
 80049f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	697a      	ldr	r2, [r7, #20]
 80049fe:	609a      	str	r2, [r3, #8]
}
 8004a00:	bf00      	nop
 8004a02:	371c      	adds	r7, #28
 8004a04:	46bd      	mov	sp, r7
 8004a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0a:	4770      	bx	lr

08004a0c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	6078      	str	r0, [r7, #4]
 8004a14:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a1c:	2b01      	cmp	r3, #1
 8004a1e:	d101      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a20:	2302      	movs	r3, #2
 8004a22:	e050      	b.n	8004ac6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2202      	movs	r2, #2
 8004a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68fa      	ldr	r2, [r7, #12]
 8004a5c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d018      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a70:	d013      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a18      	ldr	r2, [pc, #96]	; (8004ad8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d00e      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	4a16      	ldr	r2, [pc, #88]	; (8004adc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a82:	4293      	cmp	r3, r2
 8004a84:	d009      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a15      	ldr	r2, [pc, #84]	; (8004ae0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d10c      	bne.n	8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004aa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	68ba      	ldr	r2, [r7, #8]
 8004aa8:	4313      	orrs	r3, r2
 8004aaa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	68ba      	ldr	r2, [r7, #8]
 8004ab2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004ac4:	2300      	movs	r3, #0
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40010000 	.word	0x40010000
 8004ad8:	40000400 	.word	0x40000400
 8004adc:	40000800 	.word	0x40000800
 8004ae0:	40000c00 	.word	0x40000c00
 8004ae4:	40014000 	.word	0x40014000

08004ae8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b082      	sub	sp, #8
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d101      	bne.n	8004b22 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	e03f      	b.n	8004ba2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b28:	b2db      	uxtb	r3, r3
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d106      	bne.n	8004b3c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2200      	movs	r2, #0
 8004b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f7fe f8c0 	bl	8002cbc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2224      	movs	r2, #36	; 0x24
 8004b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b52:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f000 f829 	bl	8004bac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	691a      	ldr	r2, [r3, #16]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695a      	ldr	r2, [r3, #20]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b78:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68da      	ldr	r2, [r3, #12]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b88:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2220      	movs	r2, #32
 8004b9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004ba0:	2300      	movs	r3, #0
}
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	3708      	adds	r7, #8
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
	...

08004bac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004bb0:	b0c0      	sub	sp, #256	; 0x100
 8004bb2:	af00      	add	r7, sp, #0
 8004bb4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004bb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	691b      	ldr	r3, [r3, #16]
 8004bc0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc8:	68d9      	ldr	r1, [r3, #12]
 8004bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bce:	681a      	ldr	r2, [r3, #0]
 8004bd0:	ea40 0301 	orr.w	r3, r0, r1
 8004bd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004bd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bda:	689a      	ldr	r2, [r3, #8]
 8004bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	431a      	orrs	r2, r3
 8004be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	431a      	orrs	r2, r3
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	69db      	ldr	r3, [r3, #28]
 8004bf2:	4313      	orrs	r3, r2
 8004bf4:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004c04:	f021 010c 	bic.w	r1, r1, #12
 8004c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004c12:	430b      	orrs	r3, r1
 8004c14:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004c22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c26:	6999      	ldr	r1, [r3, #24]
 8004c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	ea40 0301 	orr.w	r3, r0, r1
 8004c32:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004c34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	4b8f      	ldr	r3, [pc, #572]	; (8004e78 <UART_SetConfig+0x2cc>)
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d005      	beq.n	8004c4c <UART_SetConfig+0xa0>
 8004c40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c44:	681a      	ldr	r2, [r3, #0]
 8004c46:	4b8d      	ldr	r3, [pc, #564]	; (8004e7c <UART_SetConfig+0x2d0>)
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d104      	bne.n	8004c56 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c4c:	f7ff f844 	bl	8003cd8 <HAL_RCC_GetPCLK2Freq>
 8004c50:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c54:	e003      	b.n	8004c5e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c56:	f7ff f82b 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 8004c5a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c62:	69db      	ldr	r3, [r3, #28]
 8004c64:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c68:	f040 810c 	bne.w	8004e84 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c70:	2200      	movs	r2, #0
 8004c72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c76:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c7a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c7e:	4622      	mov	r2, r4
 8004c80:	462b      	mov	r3, r5
 8004c82:	1891      	adds	r1, r2, r2
 8004c84:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c86:	415b      	adcs	r3, r3
 8004c88:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c8a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c8e:	4621      	mov	r1, r4
 8004c90:	eb12 0801 	adds.w	r8, r2, r1
 8004c94:	4629      	mov	r1, r5
 8004c96:	eb43 0901 	adc.w	r9, r3, r1
 8004c9a:	f04f 0200 	mov.w	r2, #0
 8004c9e:	f04f 0300 	mov.w	r3, #0
 8004ca2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ca6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004caa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004cae:	4690      	mov	r8, r2
 8004cb0:	4699      	mov	r9, r3
 8004cb2:	4623      	mov	r3, r4
 8004cb4:	eb18 0303 	adds.w	r3, r8, r3
 8004cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004cbc:	462b      	mov	r3, r5
 8004cbe:	eb49 0303 	adc.w	r3, r9, r3
 8004cc2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cca:	685b      	ldr	r3, [r3, #4]
 8004ccc:	2200      	movs	r2, #0
 8004cce:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004cd2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004cd6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004cda:	460b      	mov	r3, r1
 8004cdc:	18db      	adds	r3, r3, r3
 8004cde:	653b      	str	r3, [r7, #80]	; 0x50
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	eb42 0303 	adc.w	r3, r2, r3
 8004ce6:	657b      	str	r3, [r7, #84]	; 0x54
 8004ce8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004cec:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004cf0:	f7fb fe6c 	bl	80009cc <__aeabi_uldivmod>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4b61      	ldr	r3, [pc, #388]	; (8004e80 <UART_SetConfig+0x2d4>)
 8004cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8004cfe:	095b      	lsrs	r3, r3, #5
 8004d00:	011c      	lsls	r4, r3, #4
 8004d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d06:	2200      	movs	r2, #0
 8004d08:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d0c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004d10:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004d14:	4642      	mov	r2, r8
 8004d16:	464b      	mov	r3, r9
 8004d18:	1891      	adds	r1, r2, r2
 8004d1a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004d1c:	415b      	adcs	r3, r3
 8004d1e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d20:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004d24:	4641      	mov	r1, r8
 8004d26:	eb12 0a01 	adds.w	sl, r2, r1
 8004d2a:	4649      	mov	r1, r9
 8004d2c:	eb43 0b01 	adc.w	fp, r3, r1
 8004d30:	f04f 0200 	mov.w	r2, #0
 8004d34:	f04f 0300 	mov.w	r3, #0
 8004d38:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004d3c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004d40:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004d44:	4692      	mov	sl, r2
 8004d46:	469b      	mov	fp, r3
 8004d48:	4643      	mov	r3, r8
 8004d4a:	eb1a 0303 	adds.w	r3, sl, r3
 8004d4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d52:	464b      	mov	r3, r9
 8004d54:	eb4b 0303 	adc.w	r3, fp, r3
 8004d58:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d68:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d6c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d70:	460b      	mov	r3, r1
 8004d72:	18db      	adds	r3, r3, r3
 8004d74:	643b      	str	r3, [r7, #64]	; 0x40
 8004d76:	4613      	mov	r3, r2
 8004d78:	eb42 0303 	adc.w	r3, r2, r3
 8004d7c:	647b      	str	r3, [r7, #68]	; 0x44
 8004d7e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d82:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d86:	f7fb fe21 	bl	80009cc <__aeabi_uldivmod>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	4611      	mov	r1, r2
 8004d90:	4b3b      	ldr	r3, [pc, #236]	; (8004e80 <UART_SetConfig+0x2d4>)
 8004d92:	fba3 2301 	umull	r2, r3, r3, r1
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2264      	movs	r2, #100	; 0x64
 8004d9a:	fb02 f303 	mul.w	r3, r2, r3
 8004d9e:	1acb      	subs	r3, r1, r3
 8004da0:	00db      	lsls	r3, r3, #3
 8004da2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004da6:	4b36      	ldr	r3, [pc, #216]	; (8004e80 <UART_SetConfig+0x2d4>)
 8004da8:	fba3 2302 	umull	r2, r3, r3, r2
 8004dac:	095b      	lsrs	r3, r3, #5
 8004dae:	005b      	lsls	r3, r3, #1
 8004db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004db4:	441c      	add	r4, r3
 8004db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004dba:	2200      	movs	r2, #0
 8004dbc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004dc0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004dc4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004dc8:	4642      	mov	r2, r8
 8004dca:	464b      	mov	r3, r9
 8004dcc:	1891      	adds	r1, r2, r2
 8004dce:	63b9      	str	r1, [r7, #56]	; 0x38
 8004dd0:	415b      	adcs	r3, r3
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dd4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004dd8:	4641      	mov	r1, r8
 8004dda:	1851      	adds	r1, r2, r1
 8004ddc:	6339      	str	r1, [r7, #48]	; 0x30
 8004dde:	4649      	mov	r1, r9
 8004de0:	414b      	adcs	r3, r1
 8004de2:	637b      	str	r3, [r7, #52]	; 0x34
 8004de4:	f04f 0200 	mov.w	r2, #0
 8004de8:	f04f 0300 	mov.w	r3, #0
 8004dec:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004df0:	4659      	mov	r1, fp
 8004df2:	00cb      	lsls	r3, r1, #3
 8004df4:	4651      	mov	r1, sl
 8004df6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004dfa:	4651      	mov	r1, sl
 8004dfc:	00ca      	lsls	r2, r1, #3
 8004dfe:	4610      	mov	r0, r2
 8004e00:	4619      	mov	r1, r3
 8004e02:	4603      	mov	r3, r0
 8004e04:	4642      	mov	r2, r8
 8004e06:	189b      	adds	r3, r3, r2
 8004e08:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004e0c:	464b      	mov	r3, r9
 8004e0e:	460a      	mov	r2, r1
 8004e10:	eb42 0303 	adc.w	r3, r2, r3
 8004e14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	2200      	movs	r2, #0
 8004e20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004e24:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004e28:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	18db      	adds	r3, r3, r3
 8004e30:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e32:	4613      	mov	r3, r2
 8004e34:	eb42 0303 	adc.w	r3, r2, r3
 8004e38:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e3a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e3e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004e42:	f7fb fdc3 	bl	80009cc <__aeabi_uldivmod>
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	4b0d      	ldr	r3, [pc, #52]	; (8004e80 <UART_SetConfig+0x2d4>)
 8004e4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004e50:	095b      	lsrs	r3, r3, #5
 8004e52:	2164      	movs	r1, #100	; 0x64
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	00db      	lsls	r3, r3, #3
 8004e5c:	3332      	adds	r3, #50	; 0x32
 8004e5e:	4a08      	ldr	r2, [pc, #32]	; (8004e80 <UART_SetConfig+0x2d4>)
 8004e60:	fba2 2303 	umull	r2, r3, r2, r3
 8004e64:	095b      	lsrs	r3, r3, #5
 8004e66:	f003 0207 	and.w	r2, r3, #7
 8004e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4422      	add	r2, r4
 8004e72:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e74:	e106      	b.n	8005084 <UART_SetConfig+0x4d8>
 8004e76:	bf00      	nop
 8004e78:	40011000 	.word	0x40011000
 8004e7c:	40011400 	.word	0x40011400
 8004e80:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e8e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e92:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e96:	4642      	mov	r2, r8
 8004e98:	464b      	mov	r3, r9
 8004e9a:	1891      	adds	r1, r2, r2
 8004e9c:	6239      	str	r1, [r7, #32]
 8004e9e:	415b      	adcs	r3, r3
 8004ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ea6:	4641      	mov	r1, r8
 8004ea8:	1854      	adds	r4, r2, r1
 8004eaa:	4649      	mov	r1, r9
 8004eac:	eb43 0501 	adc.w	r5, r3, r1
 8004eb0:	f04f 0200 	mov.w	r2, #0
 8004eb4:	f04f 0300 	mov.w	r3, #0
 8004eb8:	00eb      	lsls	r3, r5, #3
 8004eba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ebe:	00e2      	lsls	r2, r4, #3
 8004ec0:	4614      	mov	r4, r2
 8004ec2:	461d      	mov	r5, r3
 8004ec4:	4643      	mov	r3, r8
 8004ec6:	18e3      	adds	r3, r4, r3
 8004ec8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004ecc:	464b      	mov	r3, r9
 8004ece:	eb45 0303 	adc.w	r3, r5, r3
 8004ed2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004ed6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ee2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ee6:	f04f 0200 	mov.w	r2, #0
 8004eea:	f04f 0300 	mov.w	r3, #0
 8004eee:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004ef2:	4629      	mov	r1, r5
 8004ef4:	008b      	lsls	r3, r1, #2
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efc:	4621      	mov	r1, r4
 8004efe:	008a      	lsls	r2, r1, #2
 8004f00:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f04:	f7fb fd62 	bl	80009cc <__aeabi_uldivmod>
 8004f08:	4602      	mov	r2, r0
 8004f0a:	460b      	mov	r3, r1
 8004f0c:	4b60      	ldr	r3, [pc, #384]	; (8005090 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	011c      	lsls	r4, r3, #4
 8004f16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004f20:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004f24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	1891      	adds	r1, r2, r2
 8004f2e:	61b9      	str	r1, [r7, #24]
 8004f30:	415b      	adcs	r3, r3
 8004f32:	61fb      	str	r3, [r7, #28]
 8004f34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f38:	4641      	mov	r1, r8
 8004f3a:	1851      	adds	r1, r2, r1
 8004f3c:	6139      	str	r1, [r7, #16]
 8004f3e:	4649      	mov	r1, r9
 8004f40:	414b      	adcs	r3, r1
 8004f42:	617b      	str	r3, [r7, #20]
 8004f44:	f04f 0200 	mov.w	r2, #0
 8004f48:	f04f 0300 	mov.w	r3, #0
 8004f4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f50:	4659      	mov	r1, fp
 8004f52:	00cb      	lsls	r3, r1, #3
 8004f54:	4651      	mov	r1, sl
 8004f56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f5a:	4651      	mov	r1, sl
 8004f5c:	00ca      	lsls	r2, r1, #3
 8004f5e:	4610      	mov	r0, r2
 8004f60:	4619      	mov	r1, r3
 8004f62:	4603      	mov	r3, r0
 8004f64:	4642      	mov	r2, r8
 8004f66:	189b      	adds	r3, r3, r2
 8004f68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f6c:	464b      	mov	r3, r9
 8004f6e:	460a      	mov	r2, r1
 8004f70:	eb42 0303 	adc.w	r3, r2, r3
 8004f74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f82:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f84:	f04f 0200 	mov.w	r2, #0
 8004f88:	f04f 0300 	mov.w	r3, #0
 8004f8c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f90:	4649      	mov	r1, r9
 8004f92:	008b      	lsls	r3, r1, #2
 8004f94:	4641      	mov	r1, r8
 8004f96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f9a:	4641      	mov	r1, r8
 8004f9c:	008a      	lsls	r2, r1, #2
 8004f9e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004fa2:	f7fb fd13 	bl	80009cc <__aeabi_uldivmod>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	460b      	mov	r3, r1
 8004faa:	4611      	mov	r1, r2
 8004fac:	4b38      	ldr	r3, [pc, #224]	; (8005090 <UART_SetConfig+0x4e4>)
 8004fae:	fba3 2301 	umull	r2, r3, r3, r1
 8004fb2:	095b      	lsrs	r3, r3, #5
 8004fb4:	2264      	movs	r2, #100	; 0x64
 8004fb6:	fb02 f303 	mul.w	r3, r2, r3
 8004fba:	1acb      	subs	r3, r1, r3
 8004fbc:	011b      	lsls	r3, r3, #4
 8004fbe:	3332      	adds	r3, #50	; 0x32
 8004fc0:	4a33      	ldr	r2, [pc, #204]	; (8005090 <UART_SetConfig+0x4e4>)
 8004fc2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fc6:	095b      	lsrs	r3, r3, #5
 8004fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fcc:	441c      	add	r4, r3
 8004fce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	673b      	str	r3, [r7, #112]	; 0x70
 8004fd6:	677a      	str	r2, [r7, #116]	; 0x74
 8004fd8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004fdc:	4642      	mov	r2, r8
 8004fde:	464b      	mov	r3, r9
 8004fe0:	1891      	adds	r1, r2, r2
 8004fe2:	60b9      	str	r1, [r7, #8]
 8004fe4:	415b      	adcs	r3, r3
 8004fe6:	60fb      	str	r3, [r7, #12]
 8004fe8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fec:	4641      	mov	r1, r8
 8004fee:	1851      	adds	r1, r2, r1
 8004ff0:	6039      	str	r1, [r7, #0]
 8004ff2:	4649      	mov	r1, r9
 8004ff4:	414b      	adcs	r3, r1
 8004ff6:	607b      	str	r3, [r7, #4]
 8004ff8:	f04f 0200 	mov.w	r2, #0
 8004ffc:	f04f 0300 	mov.w	r3, #0
 8005000:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005004:	4659      	mov	r1, fp
 8005006:	00cb      	lsls	r3, r1, #3
 8005008:	4651      	mov	r1, sl
 800500a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800500e:	4651      	mov	r1, sl
 8005010:	00ca      	lsls	r2, r1, #3
 8005012:	4610      	mov	r0, r2
 8005014:	4619      	mov	r1, r3
 8005016:	4603      	mov	r3, r0
 8005018:	4642      	mov	r2, r8
 800501a:	189b      	adds	r3, r3, r2
 800501c:	66bb      	str	r3, [r7, #104]	; 0x68
 800501e:	464b      	mov	r3, r9
 8005020:	460a      	mov	r2, r1
 8005022:	eb42 0303 	adc.w	r3, r2, r3
 8005026:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005028:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	2200      	movs	r2, #0
 8005030:	663b      	str	r3, [r7, #96]	; 0x60
 8005032:	667a      	str	r2, [r7, #100]	; 0x64
 8005034:	f04f 0200 	mov.w	r2, #0
 8005038:	f04f 0300 	mov.w	r3, #0
 800503c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005040:	4649      	mov	r1, r9
 8005042:	008b      	lsls	r3, r1, #2
 8005044:	4641      	mov	r1, r8
 8005046:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800504a:	4641      	mov	r1, r8
 800504c:	008a      	lsls	r2, r1, #2
 800504e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005052:	f7fb fcbb 	bl	80009cc <__aeabi_uldivmod>
 8005056:	4602      	mov	r2, r0
 8005058:	460b      	mov	r3, r1
 800505a:	4b0d      	ldr	r3, [pc, #52]	; (8005090 <UART_SetConfig+0x4e4>)
 800505c:	fba3 1302 	umull	r1, r3, r3, r2
 8005060:	095b      	lsrs	r3, r3, #5
 8005062:	2164      	movs	r1, #100	; 0x64
 8005064:	fb01 f303 	mul.w	r3, r1, r3
 8005068:	1ad3      	subs	r3, r2, r3
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	3332      	adds	r3, #50	; 0x32
 800506e:	4a08      	ldr	r2, [pc, #32]	; (8005090 <UART_SetConfig+0x4e4>)
 8005070:	fba2 2303 	umull	r2, r3, r2, r3
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	f003 020f 	and.w	r2, r3, #15
 800507a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4422      	add	r2, r4
 8005082:	609a      	str	r2, [r3, #8]
}
 8005084:	bf00      	nop
 8005086:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800508a:	46bd      	mov	sp, r7
 800508c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005090:	51eb851f 	.word	0x51eb851f

08005094 <__NVIC_SetPriority>:
{
 8005094:	b480      	push	{r7}
 8005096:	b083      	sub	sp, #12
 8005098:	af00      	add	r7, sp, #0
 800509a:	4603      	mov	r3, r0
 800509c:	6039      	str	r1, [r7, #0]
 800509e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80050a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	db0a      	blt.n	80050be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050a8:	683b      	ldr	r3, [r7, #0]
 80050aa:	b2da      	uxtb	r2, r3
 80050ac:	490c      	ldr	r1, [pc, #48]	; (80050e0 <__NVIC_SetPriority+0x4c>)
 80050ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b2:	0112      	lsls	r2, r2, #4
 80050b4:	b2d2      	uxtb	r2, r2
 80050b6:	440b      	add	r3, r1
 80050b8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80050bc:	e00a      	b.n	80050d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	b2da      	uxtb	r2, r3
 80050c2:	4908      	ldr	r1, [pc, #32]	; (80050e4 <__NVIC_SetPriority+0x50>)
 80050c4:	79fb      	ldrb	r3, [r7, #7]
 80050c6:	f003 030f 	and.w	r3, r3, #15
 80050ca:	3b04      	subs	r3, #4
 80050cc:	0112      	lsls	r2, r2, #4
 80050ce:	b2d2      	uxtb	r2, r2
 80050d0:	440b      	add	r3, r1
 80050d2:	761a      	strb	r2, [r3, #24]
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr
 80050e0:	e000e100 	.word	0xe000e100
 80050e4:	e000ed00 	.word	0xe000ed00

080050e8 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80050e8:	b580      	push	{r7, lr}
 80050ea:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80050ec:	4b05      	ldr	r3, [pc, #20]	; (8005104 <SysTick_Handler+0x1c>)
 80050ee:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80050f0:	f001 fd28 	bl	8006b44 <xTaskGetSchedulerState>
 80050f4:	4603      	mov	r3, r0
 80050f6:	2b01      	cmp	r3, #1
 80050f8:	d001      	beq.n	80050fe <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80050fa:	f002 fb0d 	bl	8007718 <xPortSysTickHandler>
  }
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	e000e010 	.word	0xe000e010

08005108 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800510c:	2100      	movs	r1, #0
 800510e:	f06f 0004 	mvn.w	r0, #4
 8005112:	f7ff ffbf 	bl	8005094 <__NVIC_SetPriority>
#endif
}
 8005116:	bf00      	nop
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800511c:	b480      	push	{r7}
 800511e:	b083      	sub	sp, #12
 8005120:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005122:	f3ef 8305 	mrs	r3, IPSR
 8005126:	603b      	str	r3, [r7, #0]
  return(result);
 8005128:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800512a:	2b00      	cmp	r3, #0
 800512c:	d003      	beq.n	8005136 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800512e:	f06f 0305 	mvn.w	r3, #5
 8005132:	607b      	str	r3, [r7, #4]
 8005134:	e00c      	b.n	8005150 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005136:	4b0a      	ldr	r3, [pc, #40]	; (8005160 <osKernelInitialize+0x44>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d105      	bne.n	800514a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800513e:	4b08      	ldr	r3, [pc, #32]	; (8005160 <osKernelInitialize+0x44>)
 8005140:	2201      	movs	r2, #1
 8005142:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005144:	2300      	movs	r3, #0
 8005146:	607b      	str	r3, [r7, #4]
 8005148:	e002      	b.n	8005150 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800514a:	f04f 33ff 	mov.w	r3, #4294967295
 800514e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005150:	687b      	ldr	r3, [r7, #4]
}
 8005152:	4618      	mov	r0, r3
 8005154:	370c      	adds	r7, #12
 8005156:	46bd      	mov	sp, r7
 8005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	20000218 	.word	0x20000218

08005164 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005164:	b580      	push	{r7, lr}
 8005166:	b082      	sub	sp, #8
 8005168:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800516a:	f3ef 8305 	mrs	r3, IPSR
 800516e:	603b      	str	r3, [r7, #0]
  return(result);
 8005170:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <osKernelStart+0x1a>
    stat = osErrorISR;
 8005176:	f06f 0305 	mvn.w	r3, #5
 800517a:	607b      	str	r3, [r7, #4]
 800517c:	e010      	b.n	80051a0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800517e:	4b0b      	ldr	r3, [pc, #44]	; (80051ac <osKernelStart+0x48>)
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d109      	bne.n	800519a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005186:	f7ff ffbf 	bl	8005108 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800518a:	4b08      	ldr	r3, [pc, #32]	; (80051ac <osKernelStart+0x48>)
 800518c:	2202      	movs	r2, #2
 800518e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005190:	f001 f87c 	bl	800628c <vTaskStartScheduler>
      stat = osOK;
 8005194:	2300      	movs	r3, #0
 8005196:	607b      	str	r3, [r7, #4]
 8005198:	e002      	b.n	80051a0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800519a:	f04f 33ff 	mov.w	r3, #4294967295
 800519e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051a0:	687b      	ldr	r3, [r7, #4]
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3708      	adds	r7, #8
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	20000218 	.word	0x20000218

080051b0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b08e      	sub	sp, #56	; 0x38
 80051b4:	af04      	add	r7, sp, #16
 80051b6:	60f8      	str	r0, [r7, #12]
 80051b8:	60b9      	str	r1, [r7, #8]
 80051ba:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80051bc:	2300      	movs	r3, #0
 80051be:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051c0:	f3ef 8305 	mrs	r3, IPSR
 80051c4:	617b      	str	r3, [r7, #20]
  return(result);
 80051c6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d17e      	bne.n	80052ca <osThreadNew+0x11a>
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d07b      	beq.n	80052ca <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80051d2:	2380      	movs	r3, #128	; 0x80
 80051d4:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80051d6:	2318      	movs	r3, #24
 80051d8:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80051da:	2300      	movs	r3, #0
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80051de:	f04f 33ff 	mov.w	r3, #4294967295
 80051e2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d045      	beq.n	8005276 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d002      	beq.n	80051f8 <osThreadNew+0x48>
        name = attr->name;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	699b      	ldr	r3, [r3, #24]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d002      	beq.n	8005206 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	699b      	ldr	r3, [r3, #24]
 8005204:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d008      	beq.n	800521e <osThreadNew+0x6e>
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	2b38      	cmp	r3, #56	; 0x38
 8005210:	d805      	bhi.n	800521e <osThreadNew+0x6e>
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <osThreadNew+0x72>
        return (NULL);
 800521e:	2300      	movs	r3, #0
 8005220:	e054      	b.n	80052cc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	089b      	lsrs	r3, r3, #2
 8005230:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	689b      	ldr	r3, [r3, #8]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d00e      	beq.n	8005258 <osThreadNew+0xa8>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	2ba7      	cmp	r3, #167	; 0xa7
 8005240:	d90a      	bls.n	8005258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005246:	2b00      	cmp	r3, #0
 8005248:	d006      	beq.n	8005258 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	695b      	ldr	r3, [r3, #20]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d002      	beq.n	8005258 <osThreadNew+0xa8>
        mem = 1;
 8005252:	2301      	movs	r3, #1
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e010      	b.n	800527a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	689b      	ldr	r3, [r3, #8]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d10c      	bne.n	800527a <osThreadNew+0xca>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	68db      	ldr	r3, [r3, #12]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d108      	bne.n	800527a <osThreadNew+0xca>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d104      	bne.n	800527a <osThreadNew+0xca>
          mem = 0;
 8005270:	2300      	movs	r3, #0
 8005272:	61bb      	str	r3, [r7, #24]
 8005274:	e001      	b.n	800527a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005276:	2300      	movs	r3, #0
 8005278:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	2b01      	cmp	r3, #1
 800527e:	d110      	bne.n	80052a2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005284:	687a      	ldr	r2, [r7, #4]
 8005286:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005288:	9202      	str	r2, [sp, #8]
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	69fb      	ldr	r3, [r7, #28]
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	6a3a      	ldr	r2, [r7, #32]
 8005294:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005296:	68f8      	ldr	r0, [r7, #12]
 8005298:	f000 fe0c 	bl	8005eb4 <xTaskCreateStatic>
 800529c:	4603      	mov	r3, r0
 800529e:	613b      	str	r3, [r7, #16]
 80052a0:	e013      	b.n	80052ca <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80052a2:	69bb      	ldr	r3, [r7, #24]
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d110      	bne.n	80052ca <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80052a8:	6a3b      	ldr	r3, [r7, #32]
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	f107 0310 	add.w	r3, r7, #16
 80052b0:	9301      	str	r3, [sp, #4]
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	9300      	str	r3, [sp, #0]
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f000 fe57 	bl	8005f6e <xTaskCreate>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d001      	beq.n	80052ca <osThreadNew+0x11a>
            hTask = NULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80052ca:	693b      	ldr	r3, [r7, #16]
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3728      	adds	r7, #40	; 0x28
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052dc:	f3ef 8305 	mrs	r3, IPSR
 80052e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80052e2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d003      	beq.n	80052f0 <osDelay+0x1c>
    stat = osErrorISR;
 80052e8:	f06f 0305 	mvn.w	r3, #5
 80052ec:	60fb      	str	r3, [r7, #12]
 80052ee:	e007      	b.n	8005300 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80052f0:	2300      	movs	r3, #0
 80052f2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d002      	beq.n	8005300 <osDelay+0x2c>
      vTaskDelay(ticks);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f000 ff92 	bl	8006224 <vTaskDelay>
    }
  }

  return (stat);
 8005300:	68fb      	ldr	r3, [r7, #12]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3710      	adds	r7, #16
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
	...

0800530c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	60f8      	str	r0, [r7, #12]
 8005314:	60b9      	str	r1, [r7, #8]
 8005316:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	4a07      	ldr	r2, [pc, #28]	; (8005338 <vApplicationGetIdleTaskMemory+0x2c>)
 800531c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	4a06      	ldr	r2, [pc, #24]	; (800533c <vApplicationGetIdleTaskMemory+0x30>)
 8005322:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	2280      	movs	r2, #128	; 0x80
 8005328:	601a      	str	r2, [r3, #0]
}
 800532a:	bf00      	nop
 800532c:	3714      	adds	r7, #20
 800532e:	46bd      	mov	sp, r7
 8005330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005334:	4770      	bx	lr
 8005336:	bf00      	nop
 8005338:	2000021c 	.word	0x2000021c
 800533c:	200002c4 	.word	0x200002c4

08005340 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	60f8      	str	r0, [r7, #12]
 8005348:	60b9      	str	r1, [r7, #8]
 800534a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4a07      	ldr	r2, [pc, #28]	; (800536c <vApplicationGetTimerTaskMemory+0x2c>)
 8005350:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005352:	68bb      	ldr	r3, [r7, #8]
 8005354:	4a06      	ldr	r2, [pc, #24]	; (8005370 <vApplicationGetTimerTaskMemory+0x30>)
 8005356:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800535e:	601a      	str	r2, [r3, #0]
}
 8005360:	bf00      	nop
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	200004c4 	.word	0x200004c4
 8005370:	2000056c 	.word	0x2000056c

08005374 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
 800537a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	f103 0208 	add.w	r2, r3, #8
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f04f 32ff 	mov.w	r2, #4294967295
 800538c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f103 0208 	add.w	r2, r3, #8
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f103 0208 	add.w	r2, r3, #8
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80053a8:	bf00      	nop
 80053aa:	370c      	adds	r7, #12
 80053ac:	46bd      	mov	sp, r7
 80053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b2:	4770      	bx	lr

080053b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80053c2:	bf00      	nop
 80053c4:	370c      	adds	r7, #12
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	68fa      	ldr	r2, [r7, #12]
 80053e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	683a      	ldr	r2, [r7, #0]
 80053f2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	683a      	ldr	r2, [r7, #0]
 80053f8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	1c5a      	adds	r2, r3, #1
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	601a      	str	r2, [r3, #0]
}
 800540a:	bf00      	nop
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
 800541e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	f1b3 3fff 	cmp.w	r3, #4294967295
 800542c:	d103      	bne.n	8005436 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	691b      	ldr	r3, [r3, #16]
 8005432:	60fb      	str	r3, [r7, #12]
 8005434:	e00c      	b.n	8005450 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	3308      	adds	r3, #8
 800543a:	60fb      	str	r3, [r7, #12]
 800543c:	e002      	b.n	8005444 <vListInsert+0x2e>
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	685b      	ldr	r3, [r3, #4]
 8005442:	60fb      	str	r3, [r7, #12]
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	429a      	cmp	r2, r3
 800544e:	d2f6      	bcs.n	800543e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	685a      	ldr	r2, [r3, #4]
 8005454:	683b      	ldr	r3, [r7, #0]
 8005456:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	683a      	ldr	r2, [r7, #0]
 800545e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68fa      	ldr	r2, [r7, #12]
 8005464:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800546c:	683b      	ldr	r3, [r7, #0]
 800546e:	687a      	ldr	r2, [r7, #4]
 8005470:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	601a      	str	r2, [r3, #0]
}
 800547c:	bf00      	nop
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr

08005488 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005488:	b480      	push	{r7}
 800548a:	b085      	sub	sp, #20
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	691b      	ldr	r3, [r3, #16]
 8005494:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	685b      	ldr	r3, [r3, #4]
 800549a:	687a      	ldr	r2, [r7, #4]
 800549c:	6892      	ldr	r2, [r2, #8]
 800549e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	689b      	ldr	r3, [r3, #8]
 80054a4:	687a      	ldr	r2, [r7, #4]
 80054a6:	6852      	ldr	r2, [r2, #4]
 80054a8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d103      	bne.n	80054bc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	689a      	ldr	r2, [r3, #8]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	2200      	movs	r2, #0
 80054c0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	1e5a      	subs	r2, r3, #1
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
}
 80054d0:	4618      	mov	r0, r3
 80054d2:	3714      	adds	r7, #20
 80054d4:	46bd      	mov	sp, r7
 80054d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054da:	4770      	bx	lr

080054dc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b084      	sub	sp, #16
 80054e0:	af00      	add	r7, sp, #0
 80054e2:	6078      	str	r0, [r7, #4]
 80054e4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d10a      	bne.n	8005506 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005502:	bf00      	nop
 8005504:	e7fe      	b.n	8005504 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005506:	f002 f875 	bl	80075f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005512:	68f9      	ldr	r1, [r7, #12]
 8005514:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005516:	fb01 f303 	mul.w	r3, r1, r3
 800551a:	441a      	add	r2, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681a      	ldr	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005536:	3b01      	subs	r3, #1
 8005538:	68f9      	ldr	r1, [r7, #12]
 800553a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800553c:	fb01 f303 	mul.w	r3, r1, r3
 8005540:	441a      	add	r2, r3
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	22ff      	movs	r2, #255	; 0xff
 800554a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	22ff      	movs	r2, #255	; 0xff
 8005552:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d114      	bne.n	8005586 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d01a      	beq.n	800559a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	3310      	adds	r3, #16
 8005568:	4618      	mov	r0, r3
 800556a:	f001 f929 	bl	80067c0 <xTaskRemoveFromEventList>
 800556e:	4603      	mov	r3, r0
 8005570:	2b00      	cmp	r3, #0
 8005572:	d012      	beq.n	800559a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005574:	4b0c      	ldr	r3, [pc, #48]	; (80055a8 <xQueueGenericReset+0xcc>)
 8005576:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800557a:	601a      	str	r2, [r3, #0]
 800557c:	f3bf 8f4f 	dsb	sy
 8005580:	f3bf 8f6f 	isb	sy
 8005584:	e009      	b.n	800559a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3310      	adds	r3, #16
 800558a:	4618      	mov	r0, r3
 800558c:	f7ff fef2 	bl	8005374 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3324      	adds	r3, #36	; 0x24
 8005594:	4618      	mov	r0, r3
 8005596:	f7ff feed 	bl	8005374 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800559a:	f002 f85b 	bl	8007654 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800559e:	2301      	movs	r3, #1
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	3710      	adds	r7, #16
 80055a4:	46bd      	mov	sp, r7
 80055a6:	bd80      	pop	{r7, pc}
 80055a8:	e000ed04 	.word	0xe000ed04

080055ac <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b08e      	sub	sp, #56	; 0x38
 80055b0:	af02      	add	r7, sp, #8
 80055b2:	60f8      	str	r0, [r7, #12]
 80055b4:	60b9      	str	r1, [r7, #8]
 80055b6:	607a      	str	r2, [r7, #4]
 80055b8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d10a      	bne.n	80055d6 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80055c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055c4:	f383 8811 	msr	BASEPRI, r3
 80055c8:	f3bf 8f6f 	isb	sy
 80055cc:	f3bf 8f4f 	dsb	sy
 80055d0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80055d2:	bf00      	nop
 80055d4:	e7fe      	b.n	80055d4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	627b      	str	r3, [r7, #36]	; 0x24
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d002      	beq.n	80055fe <xQueueGenericCreateStatic+0x52>
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d001      	beq.n	8005602 <xQueueGenericCreateStatic+0x56>
 80055fe:	2301      	movs	r3, #1
 8005600:	e000      	b.n	8005604 <xQueueGenericCreateStatic+0x58>
 8005602:	2300      	movs	r3, #0
 8005604:	2b00      	cmp	r3, #0
 8005606:	d10a      	bne.n	800561e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800560c:	f383 8811 	msr	BASEPRI, r3
 8005610:	f3bf 8f6f 	isb	sy
 8005614:	f3bf 8f4f 	dsb	sy
 8005618:	623b      	str	r3, [r7, #32]
}
 800561a:	bf00      	nop
 800561c:	e7fe      	b.n	800561c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2b00      	cmp	r3, #0
 8005622:	d102      	bne.n	800562a <xQueueGenericCreateStatic+0x7e>
 8005624:	68bb      	ldr	r3, [r7, #8]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d101      	bne.n	800562e <xQueueGenericCreateStatic+0x82>
 800562a:	2301      	movs	r3, #1
 800562c:	e000      	b.n	8005630 <xQueueGenericCreateStatic+0x84>
 800562e:	2300      	movs	r3, #0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d10a      	bne.n	800564a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005638:	f383 8811 	msr	BASEPRI, r3
 800563c:	f3bf 8f6f 	isb	sy
 8005640:	f3bf 8f4f 	dsb	sy
 8005644:	61fb      	str	r3, [r7, #28]
}
 8005646:	bf00      	nop
 8005648:	e7fe      	b.n	8005648 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800564a:	2350      	movs	r3, #80	; 0x50
 800564c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	2b50      	cmp	r3, #80	; 0x50
 8005652:	d00a      	beq.n	800566a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005654:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005658:	f383 8811 	msr	BASEPRI, r3
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f3bf 8f4f 	dsb	sy
 8005664:	61bb      	str	r3, [r7, #24]
}
 8005666:	bf00      	nop
 8005668:	e7fe      	b.n	8005668 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800566a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005672:	2b00      	cmp	r3, #0
 8005674:	d00d      	beq.n	8005692 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005678:	2201      	movs	r2, #1
 800567a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800567e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005684:	9300      	str	r3, [sp, #0]
 8005686:	4613      	mov	r3, r2
 8005688:	687a      	ldr	r2, [r7, #4]
 800568a:	68b9      	ldr	r1, [r7, #8]
 800568c:	68f8      	ldr	r0, [r7, #12]
 800568e:	f000 f805 	bl	800569c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005694:	4618      	mov	r0, r3
 8005696:	3730      	adds	r7, #48	; 0x30
 8005698:	46bd      	mov	sp, r7
 800569a:	bd80      	pop	{r7, pc}

0800569c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	60f8      	str	r0, [r7, #12]
 80056a4:	60b9      	str	r1, [r7, #8]
 80056a6:	607a      	str	r2, [r7, #4]
 80056a8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d103      	bne.n	80056b8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	69ba      	ldr	r2, [r7, #24]
 80056b4:	601a      	str	r2, [r3, #0]
 80056b6:	e002      	b.n	80056be <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80056b8:	69bb      	ldr	r3, [r7, #24]
 80056ba:	687a      	ldr	r2, [r7, #4]
 80056bc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80056be:	69bb      	ldr	r3, [r7, #24]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80056c4:	69bb      	ldr	r3, [r7, #24]
 80056c6:	68ba      	ldr	r2, [r7, #8]
 80056c8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80056ca:	2101      	movs	r1, #1
 80056cc:	69b8      	ldr	r0, [r7, #24]
 80056ce:	f7ff ff05 	bl	80054dc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	78fa      	ldrb	r2, [r7, #3]
 80056d6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80056da:	bf00      	nop
 80056dc:	3710      	adds	r7, #16
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b08e      	sub	sp, #56	; 0x38
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	60f8      	str	r0, [r7, #12]
 80056ec:	60b9      	str	r1, [r7, #8]
 80056ee:	607a      	str	r2, [r7, #4]
 80056f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80056f2:	2300      	movs	r3, #0
 80056f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d10a      	bne.n	8005716 <xQueueGenericSend+0x32>
	__asm volatile
 8005700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005704:	f383 8811 	msr	BASEPRI, r3
 8005708:	f3bf 8f6f 	isb	sy
 800570c:	f3bf 8f4f 	dsb	sy
 8005710:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005712:	bf00      	nop
 8005714:	e7fe      	b.n	8005714 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d103      	bne.n	8005724 <xQueueGenericSend+0x40>
 800571c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800571e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	d101      	bne.n	8005728 <xQueueGenericSend+0x44>
 8005724:	2301      	movs	r3, #1
 8005726:	e000      	b.n	800572a <xQueueGenericSend+0x46>
 8005728:	2300      	movs	r3, #0
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <xQueueGenericSend+0x60>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d103      	bne.n	8005752 <xQueueGenericSend+0x6e>
 800574a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d101      	bne.n	8005756 <xQueueGenericSend+0x72>
 8005752:	2301      	movs	r3, #1
 8005754:	e000      	b.n	8005758 <xQueueGenericSend+0x74>
 8005756:	2300      	movs	r3, #0
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10a      	bne.n	8005772 <xQueueGenericSend+0x8e>
	__asm volatile
 800575c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005760:	f383 8811 	msr	BASEPRI, r3
 8005764:	f3bf 8f6f 	isb	sy
 8005768:	f3bf 8f4f 	dsb	sy
 800576c:	623b      	str	r3, [r7, #32]
}
 800576e:	bf00      	nop
 8005770:	e7fe      	b.n	8005770 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005772:	f001 f9e7 	bl	8006b44 <xTaskGetSchedulerState>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d102      	bne.n	8005782 <xQueueGenericSend+0x9e>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d101      	bne.n	8005786 <xQueueGenericSend+0xa2>
 8005782:	2301      	movs	r3, #1
 8005784:	e000      	b.n	8005788 <xQueueGenericSend+0xa4>
 8005786:	2300      	movs	r3, #0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800578c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005790:	f383 8811 	msr	BASEPRI, r3
 8005794:	f3bf 8f6f 	isb	sy
 8005798:	f3bf 8f4f 	dsb	sy
 800579c:	61fb      	str	r3, [r7, #28]
}
 800579e:	bf00      	nop
 80057a0:	e7fe      	b.n	80057a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057a2:	f001 ff27 	bl	80075f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80057a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	429a      	cmp	r2, r3
 80057b0:	d302      	bcc.n	80057b8 <xQueueGenericSend+0xd4>
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d129      	bne.n	800580c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80057b8:	683a      	ldr	r2, [r7, #0]
 80057ba:	68b9      	ldr	r1, [r7, #8]
 80057bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80057be:	f000 fa0b 	bl	8005bd8 <prvCopyDataToQueue>
 80057c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d010      	beq.n	80057ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ce:	3324      	adds	r3, #36	; 0x24
 80057d0:	4618      	mov	r0, r3
 80057d2:	f000 fff5 	bl	80067c0 <xTaskRemoveFromEventList>
 80057d6:	4603      	mov	r3, r0
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d013      	beq.n	8005804 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80057dc:	4b3f      	ldr	r3, [pc, #252]	; (80058dc <xQueueGenericSend+0x1f8>)
 80057de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	f3bf 8f4f 	dsb	sy
 80057e8:	f3bf 8f6f 	isb	sy
 80057ec:	e00a      	b.n	8005804 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80057ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80057f4:	4b39      	ldr	r3, [pc, #228]	; (80058dc <xQueueGenericSend+0x1f8>)
 80057f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057fa:	601a      	str	r2, [r3, #0]
 80057fc:	f3bf 8f4f 	dsb	sy
 8005800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005804:	f001 ff26 	bl	8007654 <vPortExitCritical>
				return pdPASS;
 8005808:	2301      	movs	r3, #1
 800580a:	e063      	b.n	80058d4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d103      	bne.n	800581a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005812:	f001 ff1f 	bl	8007654 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005816:	2300      	movs	r3, #0
 8005818:	e05c      	b.n	80058d4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800581a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581c:	2b00      	cmp	r3, #0
 800581e:	d106      	bne.n	800582e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005820:	f107 0314 	add.w	r3, r7, #20
 8005824:	4618      	mov	r0, r3
 8005826:	f001 f82f 	bl	8006888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800582a:	2301      	movs	r3, #1
 800582c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800582e:	f001 ff11 	bl	8007654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005832:	f000 fd9b 	bl	800636c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005836:	f001 fedd 	bl	80075f4 <vPortEnterCritical>
 800583a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800583c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005840:	b25b      	sxtb	r3, r3
 8005842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005846:	d103      	bne.n	8005850 <xQueueGenericSend+0x16c>
 8005848:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800584a:	2200      	movs	r2, #0
 800584c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005852:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005856:	b25b      	sxtb	r3, r3
 8005858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800585c:	d103      	bne.n	8005866 <xQueueGenericSend+0x182>
 800585e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005860:	2200      	movs	r2, #0
 8005862:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005866:	f001 fef5 	bl	8007654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800586a:	1d3a      	adds	r2, r7, #4
 800586c:	f107 0314 	add.w	r3, r7, #20
 8005870:	4611      	mov	r1, r2
 8005872:	4618      	mov	r0, r3
 8005874:	f001 f81e 	bl	80068b4 <xTaskCheckForTimeOut>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d124      	bne.n	80058c8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800587e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005880:	f000 faa2 	bl	8005dc8 <prvIsQueueFull>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d018      	beq.n	80058bc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800588a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588c:	3310      	adds	r3, #16
 800588e:	687a      	ldr	r2, [r7, #4]
 8005890:	4611      	mov	r1, r2
 8005892:	4618      	mov	r0, r3
 8005894:	f000 ff44 	bl	8006720 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005898:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800589a:	f000 fa2d 	bl	8005cf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800589e:	f000 fd73 	bl	8006388 <xTaskResumeAll>
 80058a2:	4603      	mov	r3, r0
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	f47f af7c 	bne.w	80057a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80058aa:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <xQueueGenericSend+0x1f8>)
 80058ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058b0:	601a      	str	r2, [r3, #0]
 80058b2:	f3bf 8f4f 	dsb	sy
 80058b6:	f3bf 8f6f 	isb	sy
 80058ba:	e772      	b.n	80057a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80058bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058be:	f000 fa1b 	bl	8005cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058c2:	f000 fd61 	bl	8006388 <xTaskResumeAll>
 80058c6:	e76c      	b.n	80057a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80058c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80058ca:	f000 fa15 	bl	8005cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80058ce:	f000 fd5b 	bl	8006388 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80058d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3738      	adds	r7, #56	; 0x38
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	e000ed04 	.word	0xe000ed04

080058e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b090      	sub	sp, #64	; 0x40
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	60f8      	str	r0, [r7, #12]
 80058e8:	60b9      	str	r1, [r7, #8]
 80058ea:	607a      	str	r2, [r7, #4]
 80058ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80058f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80058f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058fc:	f383 8811 	msr	BASEPRI, r3
 8005900:	f3bf 8f6f 	isb	sy
 8005904:	f3bf 8f4f 	dsb	sy
 8005908:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800590a:	bf00      	nop
 800590c:	e7fe      	b.n	800590c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d103      	bne.n	800591c <xQueueGenericSendFromISR+0x3c>
 8005914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	2b00      	cmp	r3, #0
 800591a:	d101      	bne.n	8005920 <xQueueGenericSendFromISR+0x40>
 800591c:	2301      	movs	r3, #1
 800591e:	e000      	b.n	8005922 <xQueueGenericSendFromISR+0x42>
 8005920:	2300      	movs	r3, #0
 8005922:	2b00      	cmp	r3, #0
 8005924:	d10a      	bne.n	800593c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005926:	f04f 0350 	mov.w	r3, #80	; 0x50
 800592a:	f383 8811 	msr	BASEPRI, r3
 800592e:	f3bf 8f6f 	isb	sy
 8005932:	f3bf 8f4f 	dsb	sy
 8005936:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005938:	bf00      	nop
 800593a:	e7fe      	b.n	800593a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d103      	bne.n	800594a <xQueueGenericSendFromISR+0x6a>
 8005942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005946:	2b01      	cmp	r3, #1
 8005948:	d101      	bne.n	800594e <xQueueGenericSendFromISR+0x6e>
 800594a:	2301      	movs	r3, #1
 800594c:	e000      	b.n	8005950 <xQueueGenericSendFromISR+0x70>
 800594e:	2300      	movs	r3, #0
 8005950:	2b00      	cmp	r3, #0
 8005952:	d10a      	bne.n	800596a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005954:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005958:	f383 8811 	msr	BASEPRI, r3
 800595c:	f3bf 8f6f 	isb	sy
 8005960:	f3bf 8f4f 	dsb	sy
 8005964:	623b      	str	r3, [r7, #32]
}
 8005966:	bf00      	nop
 8005968:	e7fe      	b.n	8005968 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800596a:	f001 ff25 	bl	80077b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800596e:	f3ef 8211 	mrs	r2, BASEPRI
 8005972:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005976:	f383 8811 	msr	BASEPRI, r3
 800597a:	f3bf 8f6f 	isb	sy
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	61fa      	str	r2, [r7, #28]
 8005984:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005986:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005988:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800598a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800598c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005992:	429a      	cmp	r2, r3
 8005994:	d302      	bcc.n	800599c <xQueueGenericSendFromISR+0xbc>
 8005996:	683b      	ldr	r3, [r7, #0]
 8005998:	2b02      	cmp	r3, #2
 800599a:	d12f      	bne.n	80059fc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800599c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80059a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	68b9      	ldr	r1, [r7, #8]
 80059b0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059b2:	f000 f911 	bl	8005bd8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80059b6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80059ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059be:	d112      	bne.n	80059e6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d016      	beq.n	80059f6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059ca:	3324      	adds	r3, #36	; 0x24
 80059cc:	4618      	mov	r0, r3
 80059ce:	f000 fef7 	bl	80067c0 <xTaskRemoveFromEventList>
 80059d2:	4603      	mov	r3, r0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d00e      	beq.n	80059f6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00b      	beq.n	80059f6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2201      	movs	r2, #1
 80059e2:	601a      	str	r2, [r3, #0]
 80059e4:	e007      	b.n	80059f6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80059e6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80059ea:	3301      	adds	r3, #1
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	b25a      	sxtb	r2, r3
 80059f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80059f6:	2301      	movs	r3, #1
 80059f8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80059fa:	e001      	b.n	8005a00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80059fc:	2300      	movs	r3, #0
 80059fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005a04:	697b      	ldr	r3, [r7, #20]
 8005a06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005a0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005a0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3740      	adds	r7, #64	; 0x40
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	; 0x30
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005a24:	2300      	movs	r3, #0
 8005a26:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10a      	bne.n	8005a48 <xQueueReceive+0x30>
	__asm volatile
 8005a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a36:	f383 8811 	msr	BASEPRI, r3
 8005a3a:	f3bf 8f6f 	isb	sy
 8005a3e:	f3bf 8f4f 	dsb	sy
 8005a42:	623b      	str	r3, [r7, #32]
}
 8005a44:	bf00      	nop
 8005a46:	e7fe      	b.n	8005a46 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005a48:	68bb      	ldr	r3, [r7, #8]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d103      	bne.n	8005a56 <xQueueReceive+0x3e>
 8005a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d101      	bne.n	8005a5a <xQueueReceive+0x42>
 8005a56:	2301      	movs	r3, #1
 8005a58:	e000      	b.n	8005a5c <xQueueReceive+0x44>
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d10a      	bne.n	8005a76 <xQueueReceive+0x5e>
	__asm volatile
 8005a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a64:	f383 8811 	msr	BASEPRI, r3
 8005a68:	f3bf 8f6f 	isb	sy
 8005a6c:	f3bf 8f4f 	dsb	sy
 8005a70:	61fb      	str	r3, [r7, #28]
}
 8005a72:	bf00      	nop
 8005a74:	e7fe      	b.n	8005a74 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a76:	f001 f865 	bl	8006b44 <xTaskGetSchedulerState>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d102      	bne.n	8005a86 <xQueueReceive+0x6e>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <xQueueReceive+0x72>
 8005a86:	2301      	movs	r3, #1
 8005a88:	e000      	b.n	8005a8c <xQueueReceive+0x74>
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d10a      	bne.n	8005aa6 <xQueueReceive+0x8e>
	__asm volatile
 8005a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a94:	f383 8811 	msr	BASEPRI, r3
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	f3bf 8f4f 	dsb	sy
 8005aa0:	61bb      	str	r3, [r7, #24]
}
 8005aa2:	bf00      	nop
 8005aa4:	e7fe      	b.n	8005aa4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005aa6:	f001 fda5 	bl	80075f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005aaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aae:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d01f      	beq.n	8005af6 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005aba:	f000 f8f7 	bl	8005cac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	1e5a      	subs	r2, r3, #1
 8005ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ac8:	691b      	ldr	r3, [r3, #16]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00f      	beq.n	8005aee <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ad0:	3310      	adds	r3, #16
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f000 fe74 	bl	80067c0 <xTaskRemoveFromEventList>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d007      	beq.n	8005aee <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005ade:	4b3d      	ldr	r3, [pc, #244]	; (8005bd4 <xQueueReceive+0x1bc>)
 8005ae0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ae4:	601a      	str	r2, [r3, #0]
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005aee:	f001 fdb1 	bl	8007654 <vPortExitCritical>
				return pdPASS;
 8005af2:	2301      	movs	r3, #1
 8005af4:	e069      	b.n	8005bca <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d103      	bne.n	8005b04 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005afc:	f001 fdaa 	bl	8007654 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005b00:	2300      	movs	r3, #0
 8005b02:	e062      	b.n	8005bca <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d106      	bne.n	8005b18 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b0a:	f107 0310 	add.w	r3, r7, #16
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f000 feba 	bl	8006888 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b14:	2301      	movs	r3, #1
 8005b16:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b18:	f001 fd9c 	bl	8007654 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1c:	f000 fc26 	bl	800636c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b20:	f001 fd68 	bl	80075f4 <vPortEnterCritical>
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005b2a:	b25b      	sxtb	r3, r3
 8005b2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b30:	d103      	bne.n	8005b3a <xQueueReceive+0x122>
 8005b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b34:	2200      	movs	r2, #0
 8005b36:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b40:	b25b      	sxtb	r3, r3
 8005b42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b46:	d103      	bne.n	8005b50 <xQueueReceive+0x138>
 8005b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b50:	f001 fd80 	bl	8007654 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b54:	1d3a      	adds	r2, r7, #4
 8005b56:	f107 0310 	add.w	r3, r7, #16
 8005b5a:	4611      	mov	r1, r2
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f000 fea9 	bl	80068b4 <xTaskCheckForTimeOut>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d123      	bne.n	8005bb0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005b68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b6a:	f000 f917 	bl	8005d9c <prvIsQueueEmpty>
 8005b6e:	4603      	mov	r3, r0
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d017      	beq.n	8005ba4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005b74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b76:	3324      	adds	r3, #36	; 0x24
 8005b78:	687a      	ldr	r2, [r7, #4]
 8005b7a:	4611      	mov	r1, r2
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	f000 fdcf 	bl	8006720 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005b82:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005b84:	f000 f8b8 	bl	8005cf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005b88:	f000 fbfe 	bl	8006388 <xTaskResumeAll>
 8005b8c:	4603      	mov	r3, r0
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d189      	bne.n	8005aa6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005b92:	4b10      	ldr	r3, [pc, #64]	; (8005bd4 <xQueueReceive+0x1bc>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	e780      	b.n	8005aa6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ba4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ba6:	f000 f8a7 	bl	8005cf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005baa:	f000 fbed 	bl	8006388 <xTaskResumeAll>
 8005bae:	e77a      	b.n	8005aa6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005bb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bb2:	f000 f8a1 	bl	8005cf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb6:	f000 fbe7 	bl	8006388 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005bba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005bbc:	f000 f8ee 	bl	8005d9c <prvIsQueueEmpty>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f43f af6f 	beq.w	8005aa6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005bc8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3730      	adds	r7, #48	; 0x30
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
 8005bd2:	bf00      	nop
 8005bd4:	e000ed04 	.word	0xe000ed04

08005bd8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005bd8:	b580      	push	{r7, lr}
 8005bda:	b086      	sub	sp, #24
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	60f8      	str	r0, [r7, #12]
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005be4:	2300      	movs	r3, #0
 8005be6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d10d      	bne.n	8005c12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d14d      	bne.n	8005c9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	689b      	ldr	r3, [r3, #8]
 8005c02:	4618      	mov	r0, r3
 8005c04:	f000 ffbc 	bl	8006b80 <xTaskPriorityDisinherit>
 8005c08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	609a      	str	r2, [r3, #8]
 8005c10:	e043      	b.n	8005c9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d119      	bne.n	8005c4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6858      	ldr	r0, [r3, #4]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c20:	461a      	mov	r2, r3
 8005c22:	68b9      	ldr	r1, [r7, #8]
 8005c24:	f002 f876 	bl	8007d14 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	685a      	ldr	r2, [r3, #4]
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c30:	441a      	add	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	685a      	ldr	r2, [r3, #4]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	689b      	ldr	r3, [r3, #8]
 8005c3e:	429a      	cmp	r2, r3
 8005c40:	d32b      	bcc.n	8005c9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681a      	ldr	r2, [r3, #0]
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	605a      	str	r2, [r3, #4]
 8005c4a:	e026      	b.n	8005c9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	68d8      	ldr	r0, [r3, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	461a      	mov	r2, r3
 8005c56:	68b9      	ldr	r1, [r7, #8]
 8005c58:	f002 f85c 	bl	8007d14 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c64:	425b      	negs	r3, r3
 8005c66:	441a      	add	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	68da      	ldr	r2, [r3, #12]
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d207      	bcs.n	8005c88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c80:	425b      	negs	r3, r3
 8005c82:	441a      	add	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2b02      	cmp	r3, #2
 8005c8c:	d105      	bne.n	8005c9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005c8e:	693b      	ldr	r3, [r7, #16]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d002      	beq.n	8005c9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	3b01      	subs	r3, #1
 8005c98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005ca2:	697b      	ldr	r3, [r7, #20]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3718      	adds	r7, #24
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}

08005cac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005cac:	b580      	push	{r7, lr}
 8005cae:	b082      	sub	sp, #8
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	6078      	str	r0, [r7, #4]
 8005cb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d018      	beq.n	8005cf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	68da      	ldr	r2, [r3, #12]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc6:	441a      	add	r2, r3
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	68da      	ldr	r2, [r3, #12]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	429a      	cmp	r2, r3
 8005cd6:	d303      	bcc.n	8005ce0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	68d9      	ldr	r1, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce8:	461a      	mov	r2, r3
 8005cea:	6838      	ldr	r0, [r7, #0]
 8005cec:	f002 f812 	bl	8007d14 <memcpy>
	}
}
 8005cf0:	bf00      	nop
 8005cf2:	3708      	adds	r7, #8
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	bd80      	pop	{r7, pc}

08005cf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b084      	sub	sp, #16
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005d00:	f001 fc78 	bl	80075f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d0c:	e011      	b.n	8005d32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d012      	beq.n	8005d3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3324      	adds	r3, #36	; 0x24
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	f000 fd50 	bl	80067c0 <xTaskRemoveFromEventList>
 8005d20:	4603      	mov	r3, r0
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d001      	beq.n	8005d2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005d26:	f000 fe27 	bl	8006978 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005d2a:	7bfb      	ldrb	r3, [r7, #15]
 8005d2c:	3b01      	subs	r3, #1
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	dce9      	bgt.n	8005d0e <prvUnlockQueue+0x16>
 8005d3a:	e000      	b.n	8005d3e <prvUnlockQueue+0x46>
					break;
 8005d3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	22ff      	movs	r2, #255	; 0xff
 8005d42:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005d46:	f001 fc85 	bl	8007654 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005d4a:	f001 fc53 	bl	80075f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005d54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d56:	e011      	b.n	8005d7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d012      	beq.n	8005d86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	3310      	adds	r3, #16
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 fd2b 	bl	80067c0 <xTaskRemoveFromEventList>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d001      	beq.n	8005d74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005d70:	f000 fe02 	bl	8006978 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005d74:	7bbb      	ldrb	r3, [r7, #14]
 8005d76:	3b01      	subs	r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005d7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	dce9      	bgt.n	8005d58 <prvUnlockQueue+0x60>
 8005d84:	e000      	b.n	8005d88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005d86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	22ff      	movs	r2, #255	; 0xff
 8005d8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005d90:	f001 fc60 	bl	8007654 <vPortExitCritical>
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005da4:	f001 fc26 	bl	80075f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d102      	bne.n	8005db6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	60fb      	str	r3, [r7, #12]
 8005db4:	e001      	b.n	8005dba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dba:	f001 fc4b 	bl	8007654 <vPortExitCritical>

	return xReturn;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3710      	adds	r7, #16
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}

08005dc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005dc8:	b580      	push	{r7, lr}
 8005dca:	b084      	sub	sp, #16
 8005dcc:	af00      	add	r7, sp, #0
 8005dce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005dd0:	f001 fc10 	bl	80075f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ddc:	429a      	cmp	r2, r3
 8005dde:	d102      	bne.n	8005de6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005de0:	2301      	movs	r3, #1
 8005de2:	60fb      	str	r3, [r7, #12]
 8005de4:	e001      	b.n	8005dea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005dea:	f001 fc33 	bl	8007654 <vPortExitCritical>

	return xReturn;
 8005dee:	68fb      	ldr	r3, [r7, #12]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3710      	adds	r7, #16
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005df8:	b480      	push	{r7}
 8005dfa:	b085      	sub	sp, #20
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e02:	2300      	movs	r3, #0
 8005e04:	60fb      	str	r3, [r7, #12]
 8005e06:	e014      	b.n	8005e32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005e08:	4a0f      	ldr	r2, [pc, #60]	; (8005e48 <vQueueAddToRegistry+0x50>)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10b      	bne.n	8005e2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005e14:	490c      	ldr	r1, [pc, #48]	; (8005e48 <vQueueAddToRegistry+0x50>)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	683a      	ldr	r2, [r7, #0]
 8005e1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005e1e:	4a0a      	ldr	r2, [pc, #40]	; (8005e48 <vQueueAddToRegistry+0x50>)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	00db      	lsls	r3, r3, #3
 8005e24:	4413      	add	r3, r2
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005e2a:	e006      	b.n	8005e3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	2b07      	cmp	r3, #7
 8005e36:	d9e7      	bls.n	8005e08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	3714      	adds	r7, #20
 8005e3e:	46bd      	mov	sp, r7
 8005e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e44:	4770      	bx	lr
 8005e46:	bf00      	nop
 8005e48:	2000096c 	.word	0x2000096c

08005e4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e4c:	b580      	push	{r7, lr}
 8005e4e:	b086      	sub	sp, #24
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005e5c:	f001 fbca 	bl	80075f4 <vPortEnterCritical>
 8005e60:	697b      	ldr	r3, [r7, #20]
 8005e62:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005e66:	b25b      	sxtb	r3, r3
 8005e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e6c:	d103      	bne.n	8005e76 <vQueueWaitForMessageRestricted+0x2a>
 8005e6e:	697b      	ldr	r3, [r7, #20]
 8005e70:	2200      	movs	r2, #0
 8005e72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e76:	697b      	ldr	r3, [r7, #20]
 8005e78:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e7c:	b25b      	sxtb	r3, r3
 8005e7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e82:	d103      	bne.n	8005e8c <vQueueWaitForMessageRestricted+0x40>
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	2200      	movs	r2, #0
 8005e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e8c:	f001 fbe2 	bl	8007654 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d106      	bne.n	8005ea6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	3324      	adds	r3, #36	; 0x24
 8005e9c:	687a      	ldr	r2, [r7, #4]
 8005e9e:	68b9      	ldr	r1, [r7, #8]
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f000 fc61 	bl	8006768 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005ea6:	6978      	ldr	r0, [r7, #20]
 8005ea8:	f7ff ff26 	bl	8005cf8 <prvUnlockQueue>
	}
 8005eac:	bf00      	nop
 8005eae:	3718      	adds	r7, #24
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	bd80      	pop	{r7, pc}

08005eb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b08e      	sub	sp, #56	; 0x38
 8005eb8:	af04      	add	r7, sp, #16
 8005eba:	60f8      	str	r0, [r7, #12]
 8005ebc:	60b9      	str	r1, [r7, #8]
 8005ebe:	607a      	str	r2, [r7, #4]
 8005ec0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005ec2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d10a      	bne.n	8005ede <xTaskCreateStatic+0x2a>
	__asm volatile
 8005ec8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ecc:	f383 8811 	msr	BASEPRI, r3
 8005ed0:	f3bf 8f6f 	isb	sy
 8005ed4:	f3bf 8f4f 	dsb	sy
 8005ed8:	623b      	str	r3, [r7, #32]
}
 8005eda:	bf00      	nop
 8005edc:	e7fe      	b.n	8005edc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d10a      	bne.n	8005efa <xTaskCreateStatic+0x46>
	__asm volatile
 8005ee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee8:	f383 8811 	msr	BASEPRI, r3
 8005eec:	f3bf 8f6f 	isb	sy
 8005ef0:	f3bf 8f4f 	dsb	sy
 8005ef4:	61fb      	str	r3, [r7, #28]
}
 8005ef6:	bf00      	nop
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005efa:	23a8      	movs	r3, #168	; 0xa8
 8005efc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	2ba8      	cmp	r3, #168	; 0xa8
 8005f02:	d00a      	beq.n	8005f1a <xTaskCreateStatic+0x66>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	61bb      	str	r3, [r7, #24]
}
 8005f16:	bf00      	nop
 8005f18:	e7fe      	b.n	8005f18 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005f1a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005f1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d01e      	beq.n	8005f60 <xTaskCreateStatic+0xac>
 8005f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d01b      	beq.n	8005f60 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f2a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f30:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	2202      	movs	r2, #2
 8005f36:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	9303      	str	r3, [sp, #12]
 8005f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f40:	9302      	str	r3, [sp, #8]
 8005f42:	f107 0314 	add.w	r3, r7, #20
 8005f46:	9301      	str	r3, [sp, #4]
 8005f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f4a:	9300      	str	r3, [sp, #0]
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	68b9      	ldr	r1, [r7, #8]
 8005f52:	68f8      	ldr	r0, [r7, #12]
 8005f54:	f000 f850 	bl	8005ff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005f58:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005f5a:	f000 f8f3 	bl	8006144 <prvAddNewTaskToReadyList>
 8005f5e:	e001      	b.n	8005f64 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005f60:	2300      	movs	r3, #0
 8005f62:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005f64:	697b      	ldr	r3, [r7, #20]
	}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3728      	adds	r7, #40	; 0x28
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	bd80      	pop	{r7, pc}

08005f6e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005f6e:	b580      	push	{r7, lr}
 8005f70:	b08c      	sub	sp, #48	; 0x30
 8005f72:	af04      	add	r7, sp, #16
 8005f74:	60f8      	str	r0, [r7, #12]
 8005f76:	60b9      	str	r1, [r7, #8]
 8005f78:	603b      	str	r3, [r7, #0]
 8005f7a:	4613      	mov	r3, r2
 8005f7c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005f7e:	88fb      	ldrh	r3, [r7, #6]
 8005f80:	009b      	lsls	r3, r3, #2
 8005f82:	4618      	mov	r0, r3
 8005f84:	f001 fc58 	bl	8007838 <pvPortMalloc>
 8005f88:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00e      	beq.n	8005fae <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005f90:	20a8      	movs	r0, #168	; 0xa8
 8005f92:	f001 fc51 	bl	8007838 <pvPortMalloc>
 8005f96:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005f98:	69fb      	ldr	r3, [r7, #28]
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d003      	beq.n	8005fa6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005f9e:	69fb      	ldr	r3, [r7, #28]
 8005fa0:	697a      	ldr	r2, [r7, #20]
 8005fa2:	631a      	str	r2, [r3, #48]	; 0x30
 8005fa4:	e005      	b.n	8005fb2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005fa6:	6978      	ldr	r0, [r7, #20]
 8005fa8:	f001 fd12 	bl	80079d0 <vPortFree>
 8005fac:	e001      	b.n	8005fb2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005fae:	2300      	movs	r3, #0
 8005fb0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d017      	beq.n	8005fe8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005fb8:	69fb      	ldr	r3, [r7, #28]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005fc0:	88fa      	ldrh	r2, [r7, #6]
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	9303      	str	r3, [sp, #12]
 8005fc6:	69fb      	ldr	r3, [r7, #28]
 8005fc8:	9302      	str	r3, [sp, #8]
 8005fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fcc:	9301      	str	r3, [sp, #4]
 8005fce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fd0:	9300      	str	r3, [sp, #0]
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68b9      	ldr	r1, [r7, #8]
 8005fd6:	68f8      	ldr	r0, [r7, #12]
 8005fd8:	f000 f80e 	bl	8005ff8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005fdc:	69f8      	ldr	r0, [r7, #28]
 8005fde:	f000 f8b1 	bl	8006144 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	61bb      	str	r3, [r7, #24]
 8005fe6:	e002      	b.n	8005fee <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8005fec:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005fee:	69bb      	ldr	r3, [r7, #24]
	}
 8005ff0:	4618      	mov	r0, r3
 8005ff2:	3720      	adds	r7, #32
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	bd80      	pop	{r7, pc}

08005ff8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ff8:	b580      	push	{r7, lr}
 8005ffa:	b088      	sub	sp, #32
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	60f8      	str	r0, [r7, #12]
 8006000:	60b9      	str	r1, [r7, #8]
 8006002:	607a      	str	r2, [r7, #4]
 8006004:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006008:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	461a      	mov	r2, r3
 8006010:	21a5      	movs	r1, #165	; 0xa5
 8006012:	f001 fdfb 	bl	8007c0c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8006020:	3b01      	subs	r3, #1
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006028:	69bb      	ldr	r3, [r7, #24]
 800602a:	f023 0307 	bic.w	r3, r3, #7
 800602e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	f003 0307 	and.w	r3, r3, #7
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00a      	beq.n	8006050 <prvInitialiseNewTask+0x58>
	__asm volatile
 800603a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603e:	f383 8811 	msr	BASEPRI, r3
 8006042:	f3bf 8f6f 	isb	sy
 8006046:	f3bf 8f4f 	dsb	sy
 800604a:	617b      	str	r3, [r7, #20]
}
 800604c:	bf00      	nop
 800604e:	e7fe      	b.n	800604e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d01f      	beq.n	8006096 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006056:	2300      	movs	r3, #0
 8006058:	61fb      	str	r3, [r7, #28]
 800605a:	e012      	b.n	8006082 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800605c:	68ba      	ldr	r2, [r7, #8]
 800605e:	69fb      	ldr	r3, [r7, #28]
 8006060:	4413      	add	r3, r2
 8006062:	7819      	ldrb	r1, [r3, #0]
 8006064:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	4413      	add	r3, r2
 800606a:	3334      	adds	r3, #52	; 0x34
 800606c:	460a      	mov	r2, r1
 800606e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006070:	68ba      	ldr	r2, [r7, #8]
 8006072:	69fb      	ldr	r3, [r7, #28]
 8006074:	4413      	add	r3, r2
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d006      	beq.n	800608a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800607c:	69fb      	ldr	r3, [r7, #28]
 800607e:	3301      	adds	r3, #1
 8006080:	61fb      	str	r3, [r7, #28]
 8006082:	69fb      	ldr	r3, [r7, #28]
 8006084:	2b0f      	cmp	r3, #15
 8006086:	d9e9      	bls.n	800605c <prvInitialiseNewTask+0x64>
 8006088:	e000      	b.n	800608c <prvInitialiseNewTask+0x94>
			{
				break;
 800608a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800608c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800608e:	2200      	movs	r2, #0
 8006090:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006094:	e003      	b.n	800609e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800609e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060a0:	2b37      	cmp	r3, #55	; 0x37
 80060a2:	d901      	bls.n	80060a8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80060a4:	2337      	movs	r3, #55	; 0x37
 80060a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80060a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80060b2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80060b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060b6:	2200      	movs	r2, #0
 80060b8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	3304      	adds	r3, #4
 80060be:	4618      	mov	r0, r3
 80060c0:	f7ff f978 	bl	80053b4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	3318      	adds	r3, #24
 80060c8:	4618      	mov	r0, r3
 80060ca:	f7ff f973 	bl	80053b4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80060ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80060da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80060de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80060e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80060e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060e6:	2200      	movs	r2, #0
 80060e8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80060ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060ee:	2200      	movs	r2, #0
 80060f0:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	3354      	adds	r3, #84	; 0x54
 80060f8:	224c      	movs	r2, #76	; 0x4c
 80060fa:	2100      	movs	r1, #0
 80060fc:	4618      	mov	r0, r3
 80060fe:	f001 fd85 	bl	8007c0c <memset>
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	4a0c      	ldr	r2, [pc, #48]	; (8006138 <prvInitialiseNewTask+0x140>)
 8006106:	659a      	str	r2, [r3, #88]	; 0x58
 8006108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800610a:	4a0c      	ldr	r2, [pc, #48]	; (800613c <prvInitialiseNewTask+0x144>)
 800610c:	65da      	str	r2, [r3, #92]	; 0x5c
 800610e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006110:	4a0b      	ldr	r2, [pc, #44]	; (8006140 <prvInitialiseNewTask+0x148>)
 8006112:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006114:	683a      	ldr	r2, [r7, #0]
 8006116:	68f9      	ldr	r1, [r7, #12]
 8006118:	69b8      	ldr	r0, [r7, #24]
 800611a:	f001 f941 	bl	80073a0 <pxPortInitialiseStack>
 800611e:	4602      	mov	r2, r0
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006126:	2b00      	cmp	r3, #0
 8006128:	d002      	beq.n	8006130 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800612a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800612c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800612e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006130:	bf00      	nop
 8006132:	3720      	adds	r7, #32
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	20004c00 	.word	0x20004c00
 800613c:	20004c68 	.word	0x20004c68
 8006140:	20004cd0 	.word	0x20004cd0

08006144 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006144:	b580      	push	{r7, lr}
 8006146:	b082      	sub	sp, #8
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800614c:	f001 fa52 	bl	80075f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006150:	4b2d      	ldr	r3, [pc, #180]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	4a2c      	ldr	r2, [pc, #176]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 8006158:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800615a:	4b2c      	ldr	r3, [pc, #176]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d109      	bne.n	8006176 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006162:	4a2a      	ldr	r2, [pc, #168]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006168:	4b27      	ldr	r3, [pc, #156]	; (8006208 <prvAddNewTaskToReadyList+0xc4>)
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d110      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006170:	f000 fc26 	bl	80069c0 <prvInitialiseTaskLists>
 8006174:	e00d      	b.n	8006192 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006176:	4b26      	ldr	r3, [pc, #152]	; (8006210 <prvAddNewTaskToReadyList+0xcc>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d109      	bne.n	8006192 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800617e:	4b23      	ldr	r3, [pc, #140]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006188:	429a      	cmp	r2, r3
 800618a:	d802      	bhi.n	8006192 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800618c:	4a1f      	ldr	r2, [pc, #124]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006192:	4b20      	ldr	r3, [pc, #128]	; (8006214 <prvAddNewTaskToReadyList+0xd0>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	3301      	adds	r3, #1
 8006198:	4a1e      	ldr	r2, [pc, #120]	; (8006214 <prvAddNewTaskToReadyList+0xd0>)
 800619a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800619c:	4b1d      	ldr	r3, [pc, #116]	; (8006214 <prvAddNewTaskToReadyList+0xd0>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a8:	4b1b      	ldr	r3, [pc, #108]	; (8006218 <prvAddNewTaskToReadyList+0xd4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	429a      	cmp	r2, r3
 80061ae:	d903      	bls.n	80061b8 <prvAddNewTaskToReadyList+0x74>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061b4:	4a18      	ldr	r2, [pc, #96]	; (8006218 <prvAddNewTaskToReadyList+0xd4>)
 80061b6:	6013      	str	r3, [r2, #0]
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061bc:	4613      	mov	r3, r2
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	009b      	lsls	r3, r3, #2
 80061c4:	4a15      	ldr	r2, [pc, #84]	; (800621c <prvAddNewTaskToReadyList+0xd8>)
 80061c6:	441a      	add	r2, r3
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	3304      	adds	r3, #4
 80061cc:	4619      	mov	r1, r3
 80061ce:	4610      	mov	r0, r2
 80061d0:	f7ff f8fd 	bl	80053ce <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80061d4:	f001 fa3e 	bl	8007654 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80061d8:	4b0d      	ldr	r3, [pc, #52]	; (8006210 <prvAddNewTaskToReadyList+0xcc>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00e      	beq.n	80061fe <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80061e0:	4b0a      	ldr	r3, [pc, #40]	; (800620c <prvAddNewTaskToReadyList+0xc8>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d207      	bcs.n	80061fe <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80061ee:	4b0c      	ldr	r3, [pc, #48]	; (8006220 <prvAddNewTaskToReadyList+0xdc>)
 80061f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061f4:	601a      	str	r2, [r3, #0]
 80061f6:	f3bf 8f4f 	dsb	sy
 80061fa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061fe:	bf00      	nop
 8006200:	3708      	adds	r7, #8
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000e80 	.word	0x20000e80
 800620c:	200009ac 	.word	0x200009ac
 8006210:	20000e8c 	.word	0x20000e8c
 8006214:	20000e9c 	.word	0x20000e9c
 8006218:	20000e88 	.word	0x20000e88
 800621c:	200009b0 	.word	0x200009b0
 8006220:	e000ed04 	.word	0xe000ed04

08006224 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b084      	sub	sp, #16
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800622c:	2300      	movs	r3, #0
 800622e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d017      	beq.n	8006266 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006236:	4b13      	ldr	r3, [pc, #76]	; (8006284 <vTaskDelay+0x60>)
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d00a      	beq.n	8006254 <vTaskDelay+0x30>
	__asm volatile
 800623e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006242:	f383 8811 	msr	BASEPRI, r3
 8006246:	f3bf 8f6f 	isb	sy
 800624a:	f3bf 8f4f 	dsb	sy
 800624e:	60bb      	str	r3, [r7, #8]
}
 8006250:	bf00      	nop
 8006252:	e7fe      	b.n	8006252 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006254:	f000 f88a 	bl	800636c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006258:	2100      	movs	r1, #0
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fcfe 	bl	8006c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8006260:	f000 f892 	bl	8006388 <xTaskResumeAll>
 8006264:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d107      	bne.n	800627c <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800626c:	4b06      	ldr	r3, [pc, #24]	; (8006288 <vTaskDelay+0x64>)
 800626e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800627c:	bf00      	nop
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000ea8 	.word	0x20000ea8
 8006288:	e000ed04 	.word	0xe000ed04

0800628c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b08a      	sub	sp, #40	; 0x28
 8006290:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006292:	2300      	movs	r3, #0
 8006294:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006296:	2300      	movs	r3, #0
 8006298:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800629a:	463a      	mov	r2, r7
 800629c:	1d39      	adds	r1, r7, #4
 800629e:	f107 0308 	add.w	r3, r7, #8
 80062a2:	4618      	mov	r0, r3
 80062a4:	f7ff f832 	bl	800530c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80062a8:	6839      	ldr	r1, [r7, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	9202      	str	r2, [sp, #8]
 80062b0:	9301      	str	r3, [sp, #4]
 80062b2:	2300      	movs	r3, #0
 80062b4:	9300      	str	r3, [sp, #0]
 80062b6:	2300      	movs	r3, #0
 80062b8:	460a      	mov	r2, r1
 80062ba:	4924      	ldr	r1, [pc, #144]	; (800634c <vTaskStartScheduler+0xc0>)
 80062bc:	4824      	ldr	r0, [pc, #144]	; (8006350 <vTaskStartScheduler+0xc4>)
 80062be:	f7ff fdf9 	bl	8005eb4 <xTaskCreateStatic>
 80062c2:	4603      	mov	r3, r0
 80062c4:	4a23      	ldr	r2, [pc, #140]	; (8006354 <vTaskStartScheduler+0xc8>)
 80062c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80062c8:	4b22      	ldr	r3, [pc, #136]	; (8006354 <vTaskStartScheduler+0xc8>)
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d002      	beq.n	80062d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80062d0:	2301      	movs	r3, #1
 80062d2:	617b      	str	r3, [r7, #20]
 80062d4:	e001      	b.n	80062da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80062da:	697b      	ldr	r3, [r7, #20]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	d102      	bne.n	80062e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80062e0:	f000 fd10 	bl	8006d04 <xTimerCreateTimerTask>
 80062e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	2b01      	cmp	r3, #1
 80062ea:	d11b      	bne.n	8006324 <vTaskStartScheduler+0x98>
	__asm volatile
 80062ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062f0:	f383 8811 	msr	BASEPRI, r3
 80062f4:	f3bf 8f6f 	isb	sy
 80062f8:	f3bf 8f4f 	dsb	sy
 80062fc:	613b      	str	r3, [r7, #16]
}
 80062fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006300:	4b15      	ldr	r3, [pc, #84]	; (8006358 <vTaskStartScheduler+0xcc>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	3354      	adds	r3, #84	; 0x54
 8006306:	4a15      	ldr	r2, [pc, #84]	; (800635c <vTaskStartScheduler+0xd0>)
 8006308:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800630a:	4b15      	ldr	r3, [pc, #84]	; (8006360 <vTaskStartScheduler+0xd4>)
 800630c:	f04f 32ff 	mov.w	r2, #4294967295
 8006310:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006312:	4b14      	ldr	r3, [pc, #80]	; (8006364 <vTaskStartScheduler+0xd8>)
 8006314:	2201      	movs	r2, #1
 8006316:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006318:	4b13      	ldr	r3, [pc, #76]	; (8006368 <vTaskStartScheduler+0xdc>)
 800631a:	2200      	movs	r2, #0
 800631c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800631e:	f001 f8c7 	bl	80074b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006322:	e00e      	b.n	8006342 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800632a:	d10a      	bne.n	8006342 <vTaskStartScheduler+0xb6>
	__asm volatile
 800632c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006330:	f383 8811 	msr	BASEPRI, r3
 8006334:	f3bf 8f6f 	isb	sy
 8006338:	f3bf 8f4f 	dsb	sy
 800633c:	60fb      	str	r3, [r7, #12]
}
 800633e:	bf00      	nop
 8006340:	e7fe      	b.n	8006340 <vTaskStartScheduler+0xb4>
}
 8006342:	bf00      	nop
 8006344:	3718      	adds	r7, #24
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	08007f28 	.word	0x08007f28
 8006350:	08006991 	.word	0x08006991
 8006354:	20000ea4 	.word	0x20000ea4
 8006358:	200009ac 	.word	0x200009ac
 800635c:	20000080 	.word	0x20000080
 8006360:	20000ea0 	.word	0x20000ea0
 8006364:	20000e8c 	.word	0x20000e8c
 8006368:	20000e84 	.word	0x20000e84

0800636c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800636c:	b480      	push	{r7}
 800636e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006370:	4b04      	ldr	r3, [pc, #16]	; (8006384 <vTaskSuspendAll+0x18>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	3301      	adds	r3, #1
 8006376:	4a03      	ldr	r2, [pc, #12]	; (8006384 <vTaskSuspendAll+0x18>)
 8006378:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800637a:	bf00      	nop
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr
 8006384:	20000ea8 	.word	0x20000ea8

08006388 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006388:	b580      	push	{r7, lr}
 800638a:	b084      	sub	sp, #16
 800638c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800638e:	2300      	movs	r3, #0
 8006390:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006392:	2300      	movs	r3, #0
 8006394:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006396:	4b42      	ldr	r3, [pc, #264]	; (80064a0 <xTaskResumeAll+0x118>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10a      	bne.n	80063b4 <xTaskResumeAll+0x2c>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	603b      	str	r3, [r7, #0]
}
 80063b0:	bf00      	nop
 80063b2:	e7fe      	b.n	80063b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80063b4:	f001 f91e 	bl	80075f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80063b8:	4b39      	ldr	r3, [pc, #228]	; (80064a0 <xTaskResumeAll+0x118>)
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	3b01      	subs	r3, #1
 80063be:	4a38      	ldr	r2, [pc, #224]	; (80064a0 <xTaskResumeAll+0x118>)
 80063c0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c2:	4b37      	ldr	r3, [pc, #220]	; (80064a0 <xTaskResumeAll+0x118>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d162      	bne.n	8006490 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80063ca:	4b36      	ldr	r3, [pc, #216]	; (80064a4 <xTaskResumeAll+0x11c>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d05e      	beq.n	8006490 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80063d2:	e02f      	b.n	8006434 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063d4:	4b34      	ldr	r3, [pc, #208]	; (80064a8 <xTaskResumeAll+0x120>)
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	3318      	adds	r3, #24
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff f851 	bl	8005488 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	3304      	adds	r3, #4
 80063ea:	4618      	mov	r0, r3
 80063ec:	f7ff f84c 	bl	8005488 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063f4:	4b2d      	ldr	r3, [pc, #180]	; (80064ac <xTaskResumeAll+0x124>)
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d903      	bls.n	8006404 <xTaskResumeAll+0x7c>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006400:	4a2a      	ldr	r2, [pc, #168]	; (80064ac <xTaskResumeAll+0x124>)
 8006402:	6013      	str	r3, [r2, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4a27      	ldr	r2, [pc, #156]	; (80064b0 <xTaskResumeAll+0x128>)
 8006412:	441a      	add	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	3304      	adds	r3, #4
 8006418:	4619      	mov	r1, r3
 800641a:	4610      	mov	r0, r2
 800641c:	f7fe ffd7 	bl	80053ce <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006424:	4b23      	ldr	r3, [pc, #140]	; (80064b4 <xTaskResumeAll+0x12c>)
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800642a:	429a      	cmp	r2, r3
 800642c:	d302      	bcc.n	8006434 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800642e:	4b22      	ldr	r3, [pc, #136]	; (80064b8 <xTaskResumeAll+0x130>)
 8006430:	2201      	movs	r2, #1
 8006432:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006434:	4b1c      	ldr	r3, [pc, #112]	; (80064a8 <xTaskResumeAll+0x120>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d1cb      	bne.n	80063d4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006442:	f000 fb5f 	bl	8006b04 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006446:	4b1d      	ldr	r3, [pc, #116]	; (80064bc <xTaskResumeAll+0x134>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d010      	beq.n	8006474 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006452:	f000 f847 	bl	80064e4 <xTaskIncrementTick>
 8006456:	4603      	mov	r3, r0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d002      	beq.n	8006462 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800645c:	4b16      	ldr	r3, [pc, #88]	; (80064b8 <xTaskResumeAll+0x130>)
 800645e:	2201      	movs	r2, #1
 8006460:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	3b01      	subs	r3, #1
 8006466:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d1f1      	bne.n	8006452 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800646e:	4b13      	ldr	r3, [pc, #76]	; (80064bc <xTaskResumeAll+0x134>)
 8006470:	2200      	movs	r2, #0
 8006472:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006474:	4b10      	ldr	r3, [pc, #64]	; (80064b8 <xTaskResumeAll+0x130>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d009      	beq.n	8006490 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800647c:	2301      	movs	r3, #1
 800647e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006480:	4b0f      	ldr	r3, [pc, #60]	; (80064c0 <xTaskResumeAll+0x138>)
 8006482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006486:	601a      	str	r2, [r3, #0]
 8006488:	f3bf 8f4f 	dsb	sy
 800648c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006490:	f001 f8e0 	bl	8007654 <vPortExitCritical>

	return xAlreadyYielded;
 8006494:	68bb      	ldr	r3, [r7, #8]
}
 8006496:	4618      	mov	r0, r3
 8006498:	3710      	adds	r7, #16
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	20000ea8 	.word	0x20000ea8
 80064a4:	20000e80 	.word	0x20000e80
 80064a8:	20000e40 	.word	0x20000e40
 80064ac:	20000e88 	.word	0x20000e88
 80064b0:	200009b0 	.word	0x200009b0
 80064b4:	200009ac 	.word	0x200009ac
 80064b8:	20000e94 	.word	0x20000e94
 80064bc:	20000e90 	.word	0x20000e90
 80064c0:	e000ed04 	.word	0xe000ed04

080064c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80064ca:	4b05      	ldr	r3, [pc, #20]	; (80064e0 <xTaskGetTickCount+0x1c>)
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80064d0:	687b      	ldr	r3, [r7, #4]
}
 80064d2:	4618      	mov	r0, r3
 80064d4:	370c      	adds	r7, #12
 80064d6:	46bd      	mov	sp, r7
 80064d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064dc:	4770      	bx	lr
 80064de:	bf00      	nop
 80064e0:	20000e84 	.word	0x20000e84

080064e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80064ea:	2300      	movs	r3, #0
 80064ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80064ee:	4b4f      	ldr	r3, [pc, #316]	; (800662c <xTaskIncrementTick+0x148>)
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	f040 808f 	bne.w	8006616 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80064f8:	4b4d      	ldr	r3, [pc, #308]	; (8006630 <xTaskIncrementTick+0x14c>)
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	3301      	adds	r3, #1
 80064fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006500:	4a4b      	ldr	r2, [pc, #300]	; (8006630 <xTaskIncrementTick+0x14c>)
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006506:	693b      	ldr	r3, [r7, #16]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d120      	bne.n	800654e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800650c:	4b49      	ldr	r3, [pc, #292]	; (8006634 <xTaskIncrementTick+0x150>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	2b00      	cmp	r3, #0
 8006514:	d00a      	beq.n	800652c <xTaskIncrementTick+0x48>
	__asm volatile
 8006516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651a:	f383 8811 	msr	BASEPRI, r3
 800651e:	f3bf 8f6f 	isb	sy
 8006522:	f3bf 8f4f 	dsb	sy
 8006526:	603b      	str	r3, [r7, #0]
}
 8006528:	bf00      	nop
 800652a:	e7fe      	b.n	800652a <xTaskIncrementTick+0x46>
 800652c:	4b41      	ldr	r3, [pc, #260]	; (8006634 <xTaskIncrementTick+0x150>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	4b41      	ldr	r3, [pc, #260]	; (8006638 <xTaskIncrementTick+0x154>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	4a3f      	ldr	r2, [pc, #252]	; (8006634 <xTaskIncrementTick+0x150>)
 8006538:	6013      	str	r3, [r2, #0]
 800653a:	4a3f      	ldr	r2, [pc, #252]	; (8006638 <xTaskIncrementTick+0x154>)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6013      	str	r3, [r2, #0]
 8006540:	4b3e      	ldr	r3, [pc, #248]	; (800663c <xTaskIncrementTick+0x158>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	3301      	adds	r3, #1
 8006546:	4a3d      	ldr	r2, [pc, #244]	; (800663c <xTaskIncrementTick+0x158>)
 8006548:	6013      	str	r3, [r2, #0]
 800654a:	f000 fadb 	bl	8006b04 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800654e:	4b3c      	ldr	r3, [pc, #240]	; (8006640 <xTaskIncrementTick+0x15c>)
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	693a      	ldr	r2, [r7, #16]
 8006554:	429a      	cmp	r2, r3
 8006556:	d349      	bcc.n	80065ec <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006558:	4b36      	ldr	r3, [pc, #216]	; (8006634 <xTaskIncrementTick+0x150>)
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	2b00      	cmp	r3, #0
 8006560:	d104      	bne.n	800656c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006562:	4b37      	ldr	r3, [pc, #220]	; (8006640 <xTaskIncrementTick+0x15c>)
 8006564:	f04f 32ff 	mov.w	r2, #4294967295
 8006568:	601a      	str	r2, [r3, #0]
					break;
 800656a:	e03f      	b.n	80065ec <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800656c:	4b31      	ldr	r3, [pc, #196]	; (8006634 <xTaskIncrementTick+0x150>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	68db      	ldr	r3, [r3, #12]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006576:	68bb      	ldr	r3, [r7, #8]
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800657c:	693a      	ldr	r2, [r7, #16]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	429a      	cmp	r2, r3
 8006582:	d203      	bcs.n	800658c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006584:	4a2e      	ldr	r2, [pc, #184]	; (8006640 <xTaskIncrementTick+0x15c>)
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800658a:	e02f      	b.n	80065ec <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	3304      	adds	r3, #4
 8006590:	4618      	mov	r0, r3
 8006592:	f7fe ff79 	bl	8005488 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006596:	68bb      	ldr	r3, [r7, #8]
 8006598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800659a:	2b00      	cmp	r3, #0
 800659c:	d004      	beq.n	80065a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	3318      	adds	r3, #24
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe ff70 	bl	8005488 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ac:	4b25      	ldr	r3, [pc, #148]	; (8006644 <xTaskIncrementTick+0x160>)
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	429a      	cmp	r2, r3
 80065b2:	d903      	bls.n	80065bc <xTaskIncrementTick+0xd8>
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065b8:	4a22      	ldr	r2, [pc, #136]	; (8006644 <xTaskIncrementTick+0x160>)
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065c0:	4613      	mov	r3, r2
 80065c2:	009b      	lsls	r3, r3, #2
 80065c4:	4413      	add	r3, r2
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4a1f      	ldr	r2, [pc, #124]	; (8006648 <xTaskIncrementTick+0x164>)
 80065ca:	441a      	add	r2, r3
 80065cc:	68bb      	ldr	r3, [r7, #8]
 80065ce:	3304      	adds	r3, #4
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f7fe fefb 	bl	80053ce <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065dc:	4b1b      	ldr	r3, [pc, #108]	; (800664c <xTaskIncrementTick+0x168>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e2:	429a      	cmp	r2, r3
 80065e4:	d3b8      	bcc.n	8006558 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80065e6:	2301      	movs	r3, #1
 80065e8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ea:	e7b5      	b.n	8006558 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80065ec:	4b17      	ldr	r3, [pc, #92]	; (800664c <xTaskIncrementTick+0x168>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f2:	4915      	ldr	r1, [pc, #84]	; (8006648 <xTaskIncrementTick+0x164>)
 80065f4:	4613      	mov	r3, r2
 80065f6:	009b      	lsls	r3, r3, #2
 80065f8:	4413      	add	r3, r2
 80065fa:	009b      	lsls	r3, r3, #2
 80065fc:	440b      	add	r3, r1
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d901      	bls.n	8006608 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006604:	2301      	movs	r3, #1
 8006606:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006608:	4b11      	ldr	r3, [pc, #68]	; (8006650 <xTaskIncrementTick+0x16c>)
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d007      	beq.n	8006620 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006610:	2301      	movs	r3, #1
 8006612:	617b      	str	r3, [r7, #20]
 8006614:	e004      	b.n	8006620 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006616:	4b0f      	ldr	r3, [pc, #60]	; (8006654 <xTaskIncrementTick+0x170>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	3301      	adds	r3, #1
 800661c:	4a0d      	ldr	r2, [pc, #52]	; (8006654 <xTaskIncrementTick+0x170>)
 800661e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006620:	697b      	ldr	r3, [r7, #20]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000ea8 	.word	0x20000ea8
 8006630:	20000e84 	.word	0x20000e84
 8006634:	20000e38 	.word	0x20000e38
 8006638:	20000e3c 	.word	0x20000e3c
 800663c:	20000e98 	.word	0x20000e98
 8006640:	20000ea0 	.word	0x20000ea0
 8006644:	20000e88 	.word	0x20000e88
 8006648:	200009b0 	.word	0x200009b0
 800664c:	200009ac 	.word	0x200009ac
 8006650:	20000e94 	.word	0x20000e94
 8006654:	20000e90 	.word	0x20000e90

08006658 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006658:	b480      	push	{r7}
 800665a:	b085      	sub	sp, #20
 800665c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800665e:	4b2a      	ldr	r3, [pc, #168]	; (8006708 <vTaskSwitchContext+0xb0>)
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d003      	beq.n	800666e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006666:	4b29      	ldr	r3, [pc, #164]	; (800670c <vTaskSwitchContext+0xb4>)
 8006668:	2201      	movs	r2, #1
 800666a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800666c:	e046      	b.n	80066fc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800666e:	4b27      	ldr	r3, [pc, #156]	; (800670c <vTaskSwitchContext+0xb4>)
 8006670:	2200      	movs	r2, #0
 8006672:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006674:	4b26      	ldr	r3, [pc, #152]	; (8006710 <vTaskSwitchContext+0xb8>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	60fb      	str	r3, [r7, #12]
 800667a:	e010      	b.n	800669e <vTaskSwitchContext+0x46>
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d10a      	bne.n	8006698 <vTaskSwitchContext+0x40>
	__asm volatile
 8006682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006686:	f383 8811 	msr	BASEPRI, r3
 800668a:	f3bf 8f6f 	isb	sy
 800668e:	f3bf 8f4f 	dsb	sy
 8006692:	607b      	str	r3, [r7, #4]
}
 8006694:	bf00      	nop
 8006696:	e7fe      	b.n	8006696 <vTaskSwitchContext+0x3e>
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	3b01      	subs	r3, #1
 800669c:	60fb      	str	r3, [r7, #12]
 800669e:	491d      	ldr	r1, [pc, #116]	; (8006714 <vTaskSwitchContext+0xbc>)
 80066a0:	68fa      	ldr	r2, [r7, #12]
 80066a2:	4613      	mov	r3, r2
 80066a4:	009b      	lsls	r3, r3, #2
 80066a6:	4413      	add	r3, r2
 80066a8:	009b      	lsls	r3, r3, #2
 80066aa:	440b      	add	r3, r1
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d0e4      	beq.n	800667c <vTaskSwitchContext+0x24>
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	009b      	lsls	r3, r3, #2
 80066b8:	4413      	add	r3, r2
 80066ba:	009b      	lsls	r3, r3, #2
 80066bc:	4a15      	ldr	r2, [pc, #84]	; (8006714 <vTaskSwitchContext+0xbc>)
 80066be:	4413      	add	r3, r2
 80066c0:	60bb      	str	r3, [r7, #8]
 80066c2:	68bb      	ldr	r3, [r7, #8]
 80066c4:	685b      	ldr	r3, [r3, #4]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	605a      	str	r2, [r3, #4]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	3308      	adds	r3, #8
 80066d4:	429a      	cmp	r2, r3
 80066d6:	d104      	bne.n	80066e2 <vTaskSwitchContext+0x8a>
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	685a      	ldr	r2, [r3, #4]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	605a      	str	r2, [r3, #4]
 80066e2:	68bb      	ldr	r3, [r7, #8]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	4a0b      	ldr	r2, [pc, #44]	; (8006718 <vTaskSwitchContext+0xc0>)
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	4a08      	ldr	r2, [pc, #32]	; (8006710 <vTaskSwitchContext+0xb8>)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066f2:	4b09      	ldr	r3, [pc, #36]	; (8006718 <vTaskSwitchContext+0xc0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	3354      	adds	r3, #84	; 0x54
 80066f8:	4a08      	ldr	r2, [pc, #32]	; (800671c <vTaskSwitchContext+0xc4>)
 80066fa:	6013      	str	r3, [r2, #0]
}
 80066fc:	bf00      	nop
 80066fe:	3714      	adds	r7, #20
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr
 8006708:	20000ea8 	.word	0x20000ea8
 800670c:	20000e94 	.word	0x20000e94
 8006710:	20000e88 	.word	0x20000e88
 8006714:	200009b0 	.word	0x200009b0
 8006718:	200009ac 	.word	0x200009ac
 800671c:	20000080 	.word	0x20000080

08006720 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
 8006728:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d10a      	bne.n	8006746 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006734:	f383 8811 	msr	BASEPRI, r3
 8006738:	f3bf 8f6f 	isb	sy
 800673c:	f3bf 8f4f 	dsb	sy
 8006740:	60fb      	str	r3, [r7, #12]
}
 8006742:	bf00      	nop
 8006744:	e7fe      	b.n	8006744 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006746:	4b07      	ldr	r3, [pc, #28]	; (8006764 <vTaskPlaceOnEventList+0x44>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3318      	adds	r3, #24
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f7fe fe61 	bl	8005416 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006754:	2101      	movs	r1, #1
 8006756:	6838      	ldr	r0, [r7, #0]
 8006758:	f000 fa80 	bl	8006c5c <prvAddCurrentTaskToDelayedList>
}
 800675c:	bf00      	nop
 800675e:	3710      	adds	r7, #16
 8006760:	46bd      	mov	sp, r7
 8006762:	bd80      	pop	{r7, pc}
 8006764:	200009ac 	.word	0x200009ac

08006768 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006768:	b580      	push	{r7, lr}
 800676a:	b086      	sub	sp, #24
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2b00      	cmp	r3, #0
 8006778:	d10a      	bne.n	8006790 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800677a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800677e:	f383 8811 	msr	BASEPRI, r3
 8006782:	f3bf 8f6f 	isb	sy
 8006786:	f3bf 8f4f 	dsb	sy
 800678a:	617b      	str	r3, [r7, #20]
}
 800678c:	bf00      	nop
 800678e:	e7fe      	b.n	800678e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006790:	4b0a      	ldr	r3, [pc, #40]	; (80067bc <vTaskPlaceOnEventListRestricted+0x54>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	3318      	adds	r3, #24
 8006796:	4619      	mov	r1, r3
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f7fe fe18 	bl	80053ce <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d002      	beq.n	80067aa <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80067a4:	f04f 33ff 	mov.w	r3, #4294967295
 80067a8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80067aa:	6879      	ldr	r1, [r7, #4]
 80067ac:	68b8      	ldr	r0, [r7, #8]
 80067ae:	f000 fa55 	bl	8006c5c <prvAddCurrentTaskToDelayedList>
	}
 80067b2:	bf00      	nop
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	200009ac 	.word	0x200009ac

080067c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	68db      	ldr	r3, [r3, #12]
 80067ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d10a      	bne.n	80067ec <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80067d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067da:	f383 8811 	msr	BASEPRI, r3
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f3bf 8f4f 	dsb	sy
 80067e6:	60fb      	str	r3, [r7, #12]
}
 80067e8:	bf00      	nop
 80067ea:	e7fe      	b.n	80067ea <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80067ec:	693b      	ldr	r3, [r7, #16]
 80067ee:	3318      	adds	r3, #24
 80067f0:	4618      	mov	r0, r3
 80067f2:	f7fe fe49 	bl	8005488 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067f6:	4b1e      	ldr	r3, [pc, #120]	; (8006870 <xTaskRemoveFromEventList+0xb0>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d11d      	bne.n	800683a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	3304      	adds	r3, #4
 8006802:	4618      	mov	r0, r3
 8006804:	f7fe fe40 	bl	8005488 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006808:	693b      	ldr	r3, [r7, #16]
 800680a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800680c:	4b19      	ldr	r3, [pc, #100]	; (8006874 <xTaskRemoveFromEventList+0xb4>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	429a      	cmp	r2, r3
 8006812:	d903      	bls.n	800681c <xTaskRemoveFromEventList+0x5c>
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006818:	4a16      	ldr	r2, [pc, #88]	; (8006874 <xTaskRemoveFromEventList+0xb4>)
 800681a:	6013      	str	r3, [r2, #0]
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006820:	4613      	mov	r3, r2
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	4413      	add	r3, r2
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4a13      	ldr	r2, [pc, #76]	; (8006878 <xTaskRemoveFromEventList+0xb8>)
 800682a:	441a      	add	r2, r3
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	3304      	adds	r3, #4
 8006830:	4619      	mov	r1, r3
 8006832:	4610      	mov	r0, r2
 8006834:	f7fe fdcb 	bl	80053ce <vListInsertEnd>
 8006838:	e005      	b.n	8006846 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	3318      	adds	r3, #24
 800683e:	4619      	mov	r1, r3
 8006840:	480e      	ldr	r0, [pc, #56]	; (800687c <xTaskRemoveFromEventList+0xbc>)
 8006842:	f7fe fdc4 	bl	80053ce <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006846:	693b      	ldr	r3, [r7, #16]
 8006848:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800684a:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <xTaskRemoveFromEventList+0xc0>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006850:	429a      	cmp	r2, r3
 8006852:	d905      	bls.n	8006860 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006854:	2301      	movs	r3, #1
 8006856:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006858:	4b0a      	ldr	r3, [pc, #40]	; (8006884 <xTaskRemoveFromEventList+0xc4>)
 800685a:	2201      	movs	r2, #1
 800685c:	601a      	str	r2, [r3, #0]
 800685e:	e001      	b.n	8006864 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006860:	2300      	movs	r3, #0
 8006862:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006864:	697b      	ldr	r3, [r7, #20]
}
 8006866:	4618      	mov	r0, r3
 8006868:	3718      	adds	r7, #24
 800686a:	46bd      	mov	sp, r7
 800686c:	bd80      	pop	{r7, pc}
 800686e:	bf00      	nop
 8006870:	20000ea8 	.word	0x20000ea8
 8006874:	20000e88 	.word	0x20000e88
 8006878:	200009b0 	.word	0x200009b0
 800687c:	20000e40 	.word	0x20000e40
 8006880:	200009ac 	.word	0x200009ac
 8006884:	20000e94 	.word	0x20000e94

08006888 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006890:	4b06      	ldr	r3, [pc, #24]	; (80068ac <vTaskInternalSetTimeOutState+0x24>)
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006898:	4b05      	ldr	r3, [pc, #20]	; (80068b0 <vTaskInternalSetTimeOutState+0x28>)
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	605a      	str	r2, [r3, #4]
}
 80068a0:	bf00      	nop
 80068a2:	370c      	adds	r7, #12
 80068a4:	46bd      	mov	sp, r7
 80068a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068aa:	4770      	bx	lr
 80068ac:	20000e98 	.word	0x20000e98
 80068b0:	20000e84 	.word	0x20000e84

080068b4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b088      	sub	sp, #32
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d10a      	bne.n	80068da <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80068c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c8:	f383 8811 	msr	BASEPRI, r3
 80068cc:	f3bf 8f6f 	isb	sy
 80068d0:	f3bf 8f4f 	dsb	sy
 80068d4:	613b      	str	r3, [r7, #16]
}
 80068d6:	bf00      	nop
 80068d8:	e7fe      	b.n	80068d8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d10a      	bne.n	80068f6 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80068e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e4:	f383 8811 	msr	BASEPRI, r3
 80068e8:	f3bf 8f6f 	isb	sy
 80068ec:	f3bf 8f4f 	dsb	sy
 80068f0:	60fb      	str	r3, [r7, #12]
}
 80068f2:	bf00      	nop
 80068f4:	e7fe      	b.n	80068f4 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80068f6:	f000 fe7d 	bl	80075f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80068fa:	4b1d      	ldr	r3, [pc, #116]	; (8006970 <xTaskCheckForTimeOut+0xbc>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	69ba      	ldr	r2, [r7, #24]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800690a:	683b      	ldr	r3, [r7, #0]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006912:	d102      	bne.n	800691a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006914:	2300      	movs	r3, #0
 8006916:	61fb      	str	r3, [r7, #28]
 8006918:	e023      	b.n	8006962 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	4b15      	ldr	r3, [pc, #84]	; (8006974 <xTaskCheckForTimeOut+0xc0>)
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	429a      	cmp	r2, r3
 8006924:	d007      	beq.n	8006936 <xTaskCheckForTimeOut+0x82>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	685b      	ldr	r3, [r3, #4]
 800692a:	69ba      	ldr	r2, [r7, #24]
 800692c:	429a      	cmp	r2, r3
 800692e:	d302      	bcc.n	8006936 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006930:	2301      	movs	r3, #1
 8006932:	61fb      	str	r3, [r7, #28]
 8006934:	e015      	b.n	8006962 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	697a      	ldr	r2, [r7, #20]
 800693c:	429a      	cmp	r2, r3
 800693e:	d20b      	bcs.n	8006958 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006940:	683b      	ldr	r3, [r7, #0]
 8006942:	681a      	ldr	r2, [r3, #0]
 8006944:	697b      	ldr	r3, [r7, #20]
 8006946:	1ad2      	subs	r2, r2, r3
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800694c:	6878      	ldr	r0, [r7, #4]
 800694e:	f7ff ff9b 	bl	8006888 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
 8006956:	e004      	b.n	8006962 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006958:	683b      	ldr	r3, [r7, #0]
 800695a:	2200      	movs	r2, #0
 800695c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800695e:	2301      	movs	r3, #1
 8006960:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006962:	f000 fe77 	bl	8007654 <vPortExitCritical>

	return xReturn;
 8006966:	69fb      	ldr	r3, [r7, #28]
}
 8006968:	4618      	mov	r0, r3
 800696a:	3720      	adds	r7, #32
 800696c:	46bd      	mov	sp, r7
 800696e:	bd80      	pop	{r7, pc}
 8006970:	20000e84 	.word	0x20000e84
 8006974:	20000e98 	.word	0x20000e98

08006978 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006978:	b480      	push	{r7}
 800697a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800697c:	4b03      	ldr	r3, [pc, #12]	; (800698c <vTaskMissedYield+0x14>)
 800697e:	2201      	movs	r2, #1
 8006980:	601a      	str	r2, [r3, #0]
}
 8006982:	bf00      	nop
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr
 800698c:	20000e94 	.word	0x20000e94

08006990 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b082      	sub	sp, #8
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006998:	f000 f852 	bl	8006a40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800699c:	4b06      	ldr	r3, [pc, #24]	; (80069b8 <prvIdleTask+0x28>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2b01      	cmp	r3, #1
 80069a2:	d9f9      	bls.n	8006998 <prvIdleTask+0x8>
			{
				taskYIELD();
 80069a4:	4b05      	ldr	r3, [pc, #20]	; (80069bc <prvIdleTask+0x2c>)
 80069a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069aa:	601a      	str	r2, [r3, #0]
 80069ac:	f3bf 8f4f 	dsb	sy
 80069b0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80069b4:	e7f0      	b.n	8006998 <prvIdleTask+0x8>
 80069b6:	bf00      	nop
 80069b8:	200009b0 	.word	0x200009b0
 80069bc:	e000ed04 	.word	0xe000ed04

080069c0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b082      	sub	sp, #8
 80069c4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069c6:	2300      	movs	r3, #0
 80069c8:	607b      	str	r3, [r7, #4]
 80069ca:	e00c      	b.n	80069e6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80069cc:	687a      	ldr	r2, [r7, #4]
 80069ce:	4613      	mov	r3, r2
 80069d0:	009b      	lsls	r3, r3, #2
 80069d2:	4413      	add	r3, r2
 80069d4:	009b      	lsls	r3, r3, #2
 80069d6:	4a12      	ldr	r2, [pc, #72]	; (8006a20 <prvInitialiseTaskLists+0x60>)
 80069d8:	4413      	add	r3, r2
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fcca 	bl	8005374 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	3301      	adds	r3, #1
 80069e4:	607b      	str	r3, [r7, #4]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	2b37      	cmp	r3, #55	; 0x37
 80069ea:	d9ef      	bls.n	80069cc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80069ec:	480d      	ldr	r0, [pc, #52]	; (8006a24 <prvInitialiseTaskLists+0x64>)
 80069ee:	f7fe fcc1 	bl	8005374 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80069f2:	480d      	ldr	r0, [pc, #52]	; (8006a28 <prvInitialiseTaskLists+0x68>)
 80069f4:	f7fe fcbe 	bl	8005374 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80069f8:	480c      	ldr	r0, [pc, #48]	; (8006a2c <prvInitialiseTaskLists+0x6c>)
 80069fa:	f7fe fcbb 	bl	8005374 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80069fe:	480c      	ldr	r0, [pc, #48]	; (8006a30 <prvInitialiseTaskLists+0x70>)
 8006a00:	f7fe fcb8 	bl	8005374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006a04:	480b      	ldr	r0, [pc, #44]	; (8006a34 <prvInitialiseTaskLists+0x74>)
 8006a06:	f7fe fcb5 	bl	8005374 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <prvInitialiseTaskLists+0x78>)
 8006a0c:	4a05      	ldr	r2, [pc, #20]	; (8006a24 <prvInitialiseTaskLists+0x64>)
 8006a0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006a10:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <prvInitialiseTaskLists+0x7c>)
 8006a12:	4a05      	ldr	r2, [pc, #20]	; (8006a28 <prvInitialiseTaskLists+0x68>)
 8006a14:	601a      	str	r2, [r3, #0]
}
 8006a16:	bf00      	nop
 8006a18:	3708      	adds	r7, #8
 8006a1a:	46bd      	mov	sp, r7
 8006a1c:	bd80      	pop	{r7, pc}
 8006a1e:	bf00      	nop
 8006a20:	200009b0 	.word	0x200009b0
 8006a24:	20000e10 	.word	0x20000e10
 8006a28:	20000e24 	.word	0x20000e24
 8006a2c:	20000e40 	.word	0x20000e40
 8006a30:	20000e54 	.word	0x20000e54
 8006a34:	20000e6c 	.word	0x20000e6c
 8006a38:	20000e38 	.word	0x20000e38
 8006a3c:	20000e3c 	.word	0x20000e3c

08006a40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a46:	e019      	b.n	8006a7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006a48:	f000 fdd4 	bl	80075f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a4c:	4b10      	ldr	r3, [pc, #64]	; (8006a90 <prvCheckTasksWaitingTermination+0x50>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	68db      	ldr	r3, [r3, #12]
 8006a52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	3304      	adds	r3, #4
 8006a58:	4618      	mov	r0, r3
 8006a5a:	f7fe fd15 	bl	8005488 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006a5e:	4b0d      	ldr	r3, [pc, #52]	; (8006a94 <prvCheckTasksWaitingTermination+0x54>)
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	3b01      	subs	r3, #1
 8006a64:	4a0b      	ldr	r2, [pc, #44]	; (8006a94 <prvCheckTasksWaitingTermination+0x54>)
 8006a66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006a68:	4b0b      	ldr	r3, [pc, #44]	; (8006a98 <prvCheckTasksWaitingTermination+0x58>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4a0a      	ldr	r2, [pc, #40]	; (8006a98 <prvCheckTasksWaitingTermination+0x58>)
 8006a70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006a72:	f000 fdef 	bl	8007654 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 f810 	bl	8006a9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006a7c:	4b06      	ldr	r3, [pc, #24]	; (8006a98 <prvCheckTasksWaitingTermination+0x58>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e1      	bne.n	8006a48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop
 8006a88:	3708      	adds	r7, #8
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	bd80      	pop	{r7, pc}
 8006a8e:	bf00      	nop
 8006a90:	20000e54 	.word	0x20000e54
 8006a94:	20000e80 	.word	0x20000e80
 8006a98:	20000e68 	.word	0x20000e68

08006a9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b084      	sub	sp, #16
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	3354      	adds	r3, #84	; 0x54
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	f001 f8b7 	bl	8007c1c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d108      	bne.n	8006aca <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006abc:	4618      	mov	r0, r3
 8006abe:	f000 ff87 	bl	80079d0 <vPortFree>
				vPortFree( pxTCB );
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 ff84 	bl	80079d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ac8:	e018      	b.n	8006afc <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ad0:	2b01      	cmp	r3, #1
 8006ad2:	d103      	bne.n	8006adc <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 ff7b 	bl	80079d0 <vPortFree>
	}
 8006ada:	e00f      	b.n	8006afc <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d00a      	beq.n	8006afc <prvDeleteTCB+0x60>
	__asm volatile
 8006ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aea:	f383 8811 	msr	BASEPRI, r3
 8006aee:	f3bf 8f6f 	isb	sy
 8006af2:	f3bf 8f4f 	dsb	sy
 8006af6:	60fb      	str	r3, [r7, #12]
}
 8006af8:	bf00      	nop
 8006afa:	e7fe      	b.n	8006afa <prvDeleteTCB+0x5e>
	}
 8006afc:	bf00      	nop
 8006afe:	3710      	adds	r7, #16
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b0a:	4b0c      	ldr	r3, [pc, #48]	; (8006b3c <prvResetNextTaskUnblockTime+0x38>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d104      	bne.n	8006b1e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006b14:	4b0a      	ldr	r3, [pc, #40]	; (8006b40 <prvResetNextTaskUnblockTime+0x3c>)
 8006b16:	f04f 32ff 	mov.w	r2, #4294967295
 8006b1a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006b1c:	e008      	b.n	8006b30 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b1e:	4b07      	ldr	r3, [pc, #28]	; (8006b3c <prvResetNextTaskUnblockTime+0x38>)
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	68db      	ldr	r3, [r3, #12]
 8006b24:	68db      	ldr	r3, [r3, #12]
 8006b26:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	685b      	ldr	r3, [r3, #4]
 8006b2c:	4a04      	ldr	r2, [pc, #16]	; (8006b40 <prvResetNextTaskUnblockTime+0x3c>)
 8006b2e:	6013      	str	r3, [r2, #0]
}
 8006b30:	bf00      	nop
 8006b32:	370c      	adds	r7, #12
 8006b34:	46bd      	mov	sp, r7
 8006b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b3a:	4770      	bx	lr
 8006b3c:	20000e38 	.word	0x20000e38
 8006b40:	20000ea0 	.word	0x20000ea0

08006b44 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <xTaskGetSchedulerState+0x34>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d102      	bne.n	8006b58 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006b52:	2301      	movs	r3, #1
 8006b54:	607b      	str	r3, [r7, #4]
 8006b56:	e008      	b.n	8006b6a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b58:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <xTaskGetSchedulerState+0x38>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d102      	bne.n	8006b66 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006b60:	2302      	movs	r3, #2
 8006b62:	607b      	str	r3, [r7, #4]
 8006b64:	e001      	b.n	8006b6a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006b66:	2300      	movs	r3, #0
 8006b68:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006b6a:	687b      	ldr	r3, [r7, #4]
	}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	370c      	adds	r7, #12
 8006b70:	46bd      	mov	sp, r7
 8006b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b76:	4770      	bx	lr
 8006b78:	20000e8c 	.word	0x20000e8c
 8006b7c:	20000ea8 	.word	0x20000ea8

08006b80 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b086      	sub	sp, #24
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d056      	beq.n	8006c44 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006b96:	4b2e      	ldr	r3, [pc, #184]	; (8006c50 <xTaskPriorityDisinherit+0xd0>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	693a      	ldr	r2, [r7, #16]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d00a      	beq.n	8006bb6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006ba0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ba4:	f383 8811 	msr	BASEPRI, r3
 8006ba8:	f3bf 8f6f 	isb	sy
 8006bac:	f3bf 8f4f 	dsb	sy
 8006bb0:	60fb      	str	r3, [r7, #12]
}
 8006bb2:	bf00      	nop
 8006bb4:	e7fe      	b.n	8006bb4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d10a      	bne.n	8006bd4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bc2:	f383 8811 	msr	BASEPRI, r3
 8006bc6:	f3bf 8f6f 	isb	sy
 8006bca:	f3bf 8f4f 	dsb	sy
 8006bce:	60bb      	str	r3, [r7, #8]
}
 8006bd0:	bf00      	nop
 8006bd2:	e7fe      	b.n	8006bd2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd8:	1e5a      	subs	r2, r3, #1
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d02c      	beq.n	8006c44 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d128      	bne.n	8006c44 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fe fc46 	bl	8005488 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c08:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006c0c:	693b      	ldr	r3, [r7, #16]
 8006c0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c14:	4b0f      	ldr	r3, [pc, #60]	; (8006c54 <xTaskPriorityDisinherit+0xd4>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	429a      	cmp	r2, r3
 8006c1a:	d903      	bls.n	8006c24 <xTaskPriorityDisinherit+0xa4>
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c20:	4a0c      	ldr	r2, [pc, #48]	; (8006c54 <xTaskPriorityDisinherit+0xd4>)
 8006c22:	6013      	str	r3, [r2, #0]
 8006c24:	693b      	ldr	r3, [r7, #16]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	4613      	mov	r3, r2
 8006c2a:	009b      	lsls	r3, r3, #2
 8006c2c:	4413      	add	r3, r2
 8006c2e:	009b      	lsls	r3, r3, #2
 8006c30:	4a09      	ldr	r2, [pc, #36]	; (8006c58 <xTaskPriorityDisinherit+0xd8>)
 8006c32:	441a      	add	r2, r3
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	3304      	adds	r3, #4
 8006c38:	4619      	mov	r1, r3
 8006c3a:	4610      	mov	r0, r2
 8006c3c:	f7fe fbc7 	bl	80053ce <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006c40:	2301      	movs	r3, #1
 8006c42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006c44:	697b      	ldr	r3, [r7, #20]
	}
 8006c46:	4618      	mov	r0, r3
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}
 8006c4e:	bf00      	nop
 8006c50:	200009ac 	.word	0x200009ac
 8006c54:	20000e88 	.word	0x20000e88
 8006c58:	200009b0 	.word	0x200009b0

08006c5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c66:	4b21      	ldr	r3, [pc, #132]	; (8006cec <prvAddCurrentTaskToDelayedList+0x90>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c6c:	4b20      	ldr	r3, [pc, #128]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	3304      	adds	r3, #4
 8006c72:	4618      	mov	r0, r3
 8006c74:	f7fe fc08 	bl	8005488 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c7e:	d10a      	bne.n	8006c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d007      	beq.n	8006c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c86:	4b1a      	ldr	r3, [pc, #104]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	3304      	adds	r3, #4
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	4819      	ldr	r0, [pc, #100]	; (8006cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c90:	f7fe fb9d 	bl	80053ce <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c94:	e026      	b.n	8006ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4413      	add	r3, r2
 8006c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c9e:	4b14      	ldr	r3, [pc, #80]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	68ba      	ldr	r2, [r7, #8]
 8006ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d209      	bcs.n	8006cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cae:	4b12      	ldr	r3, [pc, #72]	; (8006cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006cb0:	681a      	ldr	r2, [r3, #0]
 8006cb2:	4b0f      	ldr	r3, [pc, #60]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3304      	adds	r3, #4
 8006cb8:	4619      	mov	r1, r3
 8006cba:	4610      	mov	r0, r2
 8006cbc:	f7fe fbab 	bl	8005416 <vListInsert>
}
 8006cc0:	e010      	b.n	8006ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006cc2:	4b0e      	ldr	r3, [pc, #56]	; (8006cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006cc4:	681a      	ldr	r2, [r3, #0]
 8006cc6:	4b0a      	ldr	r3, [pc, #40]	; (8006cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	3304      	adds	r3, #4
 8006ccc:	4619      	mov	r1, r3
 8006cce:	4610      	mov	r0, r2
 8006cd0:	f7fe fba1 	bl	8005416 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cd4:	4b0a      	ldr	r3, [pc, #40]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	429a      	cmp	r2, r3
 8006cdc:	d202      	bcs.n	8006ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cde:	4a08      	ldr	r2, [pc, #32]	; (8006d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ce0:	68bb      	ldr	r3, [r7, #8]
 8006ce2:	6013      	str	r3, [r2, #0]
}
 8006ce4:	bf00      	nop
 8006ce6:	3710      	adds	r7, #16
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	bd80      	pop	{r7, pc}
 8006cec:	20000e84 	.word	0x20000e84
 8006cf0:	200009ac 	.word	0x200009ac
 8006cf4:	20000e6c 	.word	0x20000e6c
 8006cf8:	20000e3c 	.word	0x20000e3c
 8006cfc:	20000e38 	.word	0x20000e38
 8006d00:	20000ea0 	.word	0x20000ea0

08006d04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b08a      	sub	sp, #40	; 0x28
 8006d08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006d0e:	f000 fb07 	bl	8007320 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006d12:	4b1c      	ldr	r3, [pc, #112]	; (8006d84 <xTimerCreateTimerTask+0x80>)
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d021      	beq.n	8006d5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006d1a:	2300      	movs	r3, #0
 8006d1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d22:	1d3a      	adds	r2, r7, #4
 8006d24:	f107 0108 	add.w	r1, r7, #8
 8006d28:	f107 030c 	add.w	r3, r7, #12
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7fe fb07 	bl	8005340 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d32:	6879      	ldr	r1, [r7, #4]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	9202      	str	r2, [sp, #8]
 8006d3a:	9301      	str	r3, [sp, #4]
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	9300      	str	r3, [sp, #0]
 8006d40:	2300      	movs	r3, #0
 8006d42:	460a      	mov	r2, r1
 8006d44:	4910      	ldr	r1, [pc, #64]	; (8006d88 <xTimerCreateTimerTask+0x84>)
 8006d46:	4811      	ldr	r0, [pc, #68]	; (8006d8c <xTimerCreateTimerTask+0x88>)
 8006d48:	f7ff f8b4 	bl	8005eb4 <xTaskCreateStatic>
 8006d4c:	4603      	mov	r3, r0
 8006d4e:	4a10      	ldr	r2, [pc, #64]	; (8006d90 <xTimerCreateTimerTask+0x8c>)
 8006d50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d52:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <xTimerCreateTimerTask+0x8c>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	d10a      	bne.n	8006d7a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d68:	f383 8811 	msr	BASEPRI, r3
 8006d6c:	f3bf 8f6f 	isb	sy
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	613b      	str	r3, [r7, #16]
}
 8006d76:	bf00      	nop
 8006d78:	e7fe      	b.n	8006d78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d7a:	697b      	ldr	r3, [r7, #20]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3718      	adds	r7, #24
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}
 8006d84:	20000edc 	.word	0x20000edc
 8006d88:	08007f30 	.word	0x08007f30
 8006d8c:	08006ec9 	.word	0x08006ec9
 8006d90:	20000ee0 	.word	0x20000ee0

08006d94 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b08a      	sub	sp, #40	; 0x28
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	60f8      	str	r0, [r7, #12]
 8006d9c:	60b9      	str	r1, [r7, #8]
 8006d9e:	607a      	str	r2, [r7, #4]
 8006da0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006da2:	2300      	movs	r3, #0
 8006da4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d10a      	bne.n	8006dc2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	623b      	str	r3, [r7, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	; (8006e2c <xTimerGenericCommand+0x98>)
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d02a      	beq.n	8006e20 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	2b05      	cmp	r3, #5
 8006dda:	dc18      	bgt.n	8006e0e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006ddc:	f7ff feb2 	bl	8006b44 <xTaskGetSchedulerState>
 8006de0:	4603      	mov	r3, r0
 8006de2:	2b02      	cmp	r3, #2
 8006de4:	d109      	bne.n	8006dfa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006de6:	4b11      	ldr	r3, [pc, #68]	; (8006e2c <xTimerGenericCommand+0x98>)
 8006de8:	6818      	ldr	r0, [r3, #0]
 8006dea:	f107 0110 	add.w	r1, r7, #16
 8006dee:	2300      	movs	r3, #0
 8006df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006df2:	f7fe fc77 	bl	80056e4 <xQueueGenericSend>
 8006df6:	6278      	str	r0, [r7, #36]	; 0x24
 8006df8:	e012      	b.n	8006e20 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dfa:	4b0c      	ldr	r3, [pc, #48]	; (8006e2c <xTimerGenericCommand+0x98>)
 8006dfc:	6818      	ldr	r0, [r3, #0]
 8006dfe:	f107 0110 	add.w	r1, r7, #16
 8006e02:	2300      	movs	r3, #0
 8006e04:	2200      	movs	r2, #0
 8006e06:	f7fe fc6d 	bl	80056e4 <xQueueGenericSend>
 8006e0a:	6278      	str	r0, [r7, #36]	; 0x24
 8006e0c:	e008      	b.n	8006e20 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006e0e:	4b07      	ldr	r3, [pc, #28]	; (8006e2c <xTimerGenericCommand+0x98>)
 8006e10:	6818      	ldr	r0, [r3, #0]
 8006e12:	f107 0110 	add.w	r1, r7, #16
 8006e16:	2300      	movs	r3, #0
 8006e18:	683a      	ldr	r2, [r7, #0]
 8006e1a:	f7fe fd61 	bl	80058e0 <xQueueGenericSendFromISR>
 8006e1e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3728      	adds	r7, #40	; 0x28
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000edc 	.word	0x20000edc

08006e30 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b088      	sub	sp, #32
 8006e34:	af02      	add	r7, sp, #8
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e3a:	4b22      	ldr	r3, [pc, #136]	; (8006ec4 <prvProcessExpiredTimer+0x94>)
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	68db      	ldr	r3, [r3, #12]
 8006e42:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e44:	697b      	ldr	r3, [r7, #20]
 8006e46:	3304      	adds	r3, #4
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7fe fb1d 	bl	8005488 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e54:	f003 0304 	and.w	r3, r3, #4
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d022      	beq.n	8006ea2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e5c:	697b      	ldr	r3, [r7, #20]
 8006e5e:	699a      	ldr	r2, [r3, #24]
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	18d1      	adds	r1, r2, r3
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	683a      	ldr	r2, [r7, #0]
 8006e68:	6978      	ldr	r0, [r7, #20]
 8006e6a:	f000 f8d1 	bl	8007010 <prvInsertTimerInActiveList>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d01f      	beq.n	8006eb4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e74:	2300      	movs	r3, #0
 8006e76:	9300      	str	r3, [sp, #0]
 8006e78:	2300      	movs	r3, #0
 8006e7a:	687a      	ldr	r2, [r7, #4]
 8006e7c:	2100      	movs	r1, #0
 8006e7e:	6978      	ldr	r0, [r7, #20]
 8006e80:	f7ff ff88 	bl	8006d94 <xTimerGenericCommand>
 8006e84:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e86:	693b      	ldr	r3, [r7, #16]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d113      	bne.n	8006eb4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e90:	f383 8811 	msr	BASEPRI, r3
 8006e94:	f3bf 8f6f 	isb	sy
 8006e98:	f3bf 8f4f 	dsb	sy
 8006e9c:	60fb      	str	r3, [r7, #12]
}
 8006e9e:	bf00      	nop
 8006ea0:	e7fe      	b.n	8006ea0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ea2:	697b      	ldr	r3, [r7, #20]
 8006ea4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ea8:	f023 0301 	bic.w	r3, r3, #1
 8006eac:	b2da      	uxtb	r2, r3
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	6a1b      	ldr	r3, [r3, #32]
 8006eb8:	6978      	ldr	r0, [r7, #20]
 8006eba:	4798      	blx	r3
}
 8006ebc:	bf00      	nop
 8006ebe:	3718      	adds	r7, #24
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}
 8006ec4:	20000ed4 	.word	0x20000ed4

08006ec8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b084      	sub	sp, #16
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006ed0:	f107 0308 	add.w	r3, r7, #8
 8006ed4:	4618      	mov	r0, r3
 8006ed6:	f000 f857 	bl	8006f88 <prvGetNextExpireTime>
 8006eda:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	4619      	mov	r1, r3
 8006ee0:	68f8      	ldr	r0, [r7, #12]
 8006ee2:	f000 f803 	bl	8006eec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ee6:	f000 f8d5 	bl	8007094 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eea:	e7f1      	b.n	8006ed0 <prvTimerTask+0x8>

08006eec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b084      	sub	sp, #16
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ef6:	f7ff fa39 	bl	800636c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006efa:	f107 0308 	add.w	r3, r7, #8
 8006efe:	4618      	mov	r0, r3
 8006f00:	f000 f866 	bl	8006fd0 <prvSampleTimeNow>
 8006f04:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d130      	bne.n	8006f6e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d10a      	bne.n	8006f28 <prvProcessTimerOrBlockTask+0x3c>
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	429a      	cmp	r2, r3
 8006f18:	d806      	bhi.n	8006f28 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006f1a:	f7ff fa35 	bl	8006388 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006f1e:	68f9      	ldr	r1, [r7, #12]
 8006f20:	6878      	ldr	r0, [r7, #4]
 8006f22:	f7ff ff85 	bl	8006e30 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f26:	e024      	b.n	8006f72 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d008      	beq.n	8006f40 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f2e:	4b13      	ldr	r3, [pc, #76]	; (8006f7c <prvProcessTimerOrBlockTask+0x90>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d101      	bne.n	8006f3c <prvProcessTimerOrBlockTask+0x50>
 8006f38:	2301      	movs	r3, #1
 8006f3a:	e000      	b.n	8006f3e <prvProcessTimerOrBlockTask+0x52>
 8006f3c:	2300      	movs	r3, #0
 8006f3e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f40:	4b0f      	ldr	r3, [pc, #60]	; (8006f80 <prvProcessTimerOrBlockTask+0x94>)
 8006f42:	6818      	ldr	r0, [r3, #0]
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	1ad3      	subs	r3, r2, r3
 8006f4a:	683a      	ldr	r2, [r7, #0]
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	f7fe ff7d 	bl	8005e4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f52:	f7ff fa19 	bl	8006388 <xTaskResumeAll>
 8006f56:	4603      	mov	r3, r0
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d10a      	bne.n	8006f72 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f5c:	4b09      	ldr	r3, [pc, #36]	; (8006f84 <prvProcessTimerOrBlockTask+0x98>)
 8006f5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	f3bf 8f4f 	dsb	sy
 8006f68:	f3bf 8f6f 	isb	sy
}
 8006f6c:	e001      	b.n	8006f72 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f6e:	f7ff fa0b 	bl	8006388 <xTaskResumeAll>
}
 8006f72:	bf00      	nop
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}
 8006f7a:	bf00      	nop
 8006f7c:	20000ed8 	.word	0x20000ed8
 8006f80:	20000edc 	.word	0x20000edc
 8006f84:	e000ed04 	.word	0xe000ed04

08006f88 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b085      	sub	sp, #20
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f90:	4b0e      	ldr	r3, [pc, #56]	; (8006fcc <prvGetNextExpireTime+0x44>)
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d101      	bne.n	8006f9e <prvGetNextExpireTime+0x16>
 8006f9a:	2201      	movs	r2, #1
 8006f9c:	e000      	b.n	8006fa0 <prvGetNextExpireTime+0x18>
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d105      	bne.n	8006fb8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fac:	4b07      	ldr	r3, [pc, #28]	; (8006fcc <prvGetNextExpireTime+0x44>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	68db      	ldr	r3, [r3, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	60fb      	str	r3, [r7, #12]
 8006fb6:	e001      	b.n	8006fbc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006fb8:	2300      	movs	r3, #0
 8006fba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3714      	adds	r7, #20
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc8:	4770      	bx	lr
 8006fca:	bf00      	nop
 8006fcc:	20000ed4 	.word	0x20000ed4

08006fd0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b084      	sub	sp, #16
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fd8:	f7ff fa74 	bl	80064c4 <xTaskGetTickCount>
 8006fdc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fde:	4b0b      	ldr	r3, [pc, #44]	; (800700c <prvSampleTimeNow+0x3c>)
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d205      	bcs.n	8006ff4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fe8:	f000 f936 	bl	8007258 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	601a      	str	r2, [r3, #0]
 8006ff2:	e002      	b.n	8006ffa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ffa:	4a04      	ldr	r2, [pc, #16]	; (800700c <prvSampleTimeNow+0x3c>)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007000:	68fb      	ldr	r3, [r7, #12]
}
 8007002:	4618      	mov	r0, r3
 8007004:	3710      	adds	r7, #16
 8007006:	46bd      	mov	sp, r7
 8007008:	bd80      	pop	{r7, pc}
 800700a:	bf00      	nop
 800700c:	20000ee4 	.word	0x20000ee4

08007010 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007010:	b580      	push	{r7, lr}
 8007012:	b086      	sub	sp, #24
 8007014:	af00      	add	r7, sp, #0
 8007016:	60f8      	str	r0, [r7, #12]
 8007018:	60b9      	str	r1, [r7, #8]
 800701a:	607a      	str	r2, [r7, #4]
 800701c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	68ba      	ldr	r2, [r7, #8]
 8007026:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	68fa      	ldr	r2, [r7, #12]
 800702c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800702e:	68ba      	ldr	r2, [r7, #8]
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	429a      	cmp	r2, r3
 8007034:	d812      	bhi.n	800705c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	1ad2      	subs	r2, r2, r3
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	699b      	ldr	r3, [r3, #24]
 8007040:	429a      	cmp	r2, r3
 8007042:	d302      	bcc.n	800704a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007044:	2301      	movs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	e01b      	b.n	8007082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800704a:	4b10      	ldr	r3, [pc, #64]	; (800708c <prvInsertTimerInActiveList+0x7c>)
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	3304      	adds	r3, #4
 8007052:	4619      	mov	r1, r3
 8007054:	4610      	mov	r0, r2
 8007056:	f7fe f9de 	bl	8005416 <vListInsert>
 800705a:	e012      	b.n	8007082 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800705c:	687a      	ldr	r2, [r7, #4]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d206      	bcs.n	8007072 <prvInsertTimerInActiveList+0x62>
 8007064:	68ba      	ldr	r2, [r7, #8]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d302      	bcc.n	8007072 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800706c:	2301      	movs	r3, #1
 800706e:	617b      	str	r3, [r7, #20]
 8007070:	e007      	b.n	8007082 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007072:	4b07      	ldr	r3, [pc, #28]	; (8007090 <prvInsertTimerInActiveList+0x80>)
 8007074:	681a      	ldr	r2, [r3, #0]
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	3304      	adds	r3, #4
 800707a:	4619      	mov	r1, r3
 800707c:	4610      	mov	r0, r2
 800707e:	f7fe f9ca 	bl	8005416 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007082:	697b      	ldr	r3, [r7, #20]
}
 8007084:	4618      	mov	r0, r3
 8007086:	3718      	adds	r7, #24
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}
 800708c:	20000ed8 	.word	0x20000ed8
 8007090:	20000ed4 	.word	0x20000ed4

08007094 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b08e      	sub	sp, #56	; 0x38
 8007098:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800709a:	e0ca      	b.n	8007232 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da18      	bge.n	80070d4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80070a2:	1d3b      	adds	r3, r7, #4
 80070a4:	3304      	adds	r3, #4
 80070a6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80070a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10a      	bne.n	80070c4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	61fb      	str	r3, [r7, #28]
}
 80070c0:	bf00      	nop
 80070c2:	e7fe      	b.n	80070c2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ca:	6850      	ldr	r0, [r2, #4]
 80070cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ce:	6892      	ldr	r2, [r2, #8]
 80070d0:	4611      	mov	r1, r2
 80070d2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2b00      	cmp	r3, #0
 80070d8:	f2c0 80ab 	blt.w	8007232 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070e2:	695b      	ldr	r3, [r3, #20]
 80070e4:	2b00      	cmp	r3, #0
 80070e6:	d004      	beq.n	80070f2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ea:	3304      	adds	r3, #4
 80070ec:	4618      	mov	r0, r3
 80070ee:	f7fe f9cb 	bl	8005488 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070f2:	463b      	mov	r3, r7
 80070f4:	4618      	mov	r0, r3
 80070f6:	f7ff ff6b 	bl	8006fd0 <prvSampleTimeNow>
 80070fa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	2b09      	cmp	r3, #9
 8007100:	f200 8096 	bhi.w	8007230 <prvProcessReceivedCommands+0x19c>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <prvProcessReceivedCommands+0x78>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	08007135 	.word	0x08007135
 8007110:	08007135 	.word	0x08007135
 8007114:	08007135 	.word	0x08007135
 8007118:	080071a9 	.word	0x080071a9
 800711c:	080071bd 	.word	0x080071bd
 8007120:	08007207 	.word	0x08007207
 8007124:	08007135 	.word	0x08007135
 8007128:	08007135 	.word	0x08007135
 800712c:	080071a9 	.word	0x080071a9
 8007130:	080071bd 	.word	0x080071bd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007136:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800713a:	f043 0301 	orr.w	r3, r3, #1
 800713e:	b2da      	uxtb	r2, r3
 8007140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007142:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007146:	68ba      	ldr	r2, [r7, #8]
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	699b      	ldr	r3, [r3, #24]
 800714c:	18d1      	adds	r1, r2, r3
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007152:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007154:	f7ff ff5c 	bl	8007010 <prvInsertTimerInActiveList>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d069      	beq.n	8007232 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800715e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007160:	6a1b      	ldr	r3, [r3, #32]
 8007162:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007164:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007168:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d05e      	beq.n	8007232 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007174:	68ba      	ldr	r2, [r7, #8]
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	699b      	ldr	r3, [r3, #24]
 800717a:	441a      	add	r2, r3
 800717c:	2300      	movs	r3, #0
 800717e:	9300      	str	r3, [sp, #0]
 8007180:	2300      	movs	r3, #0
 8007182:	2100      	movs	r1, #0
 8007184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007186:	f7ff fe05 	bl	8006d94 <xTimerGenericCommand>
 800718a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800718c:	6a3b      	ldr	r3, [r7, #32]
 800718e:	2b00      	cmp	r3, #0
 8007190:	d14f      	bne.n	8007232 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007196:	f383 8811 	msr	BASEPRI, r3
 800719a:	f3bf 8f6f 	isb	sy
 800719e:	f3bf 8f4f 	dsb	sy
 80071a2:	61bb      	str	r3, [r7, #24]
}
 80071a4:	bf00      	nop
 80071a6:	e7fe      	b.n	80071a6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ae:	f023 0301 	bic.w	r3, r3, #1
 80071b2:	b2da      	uxtb	r2, r3
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80071ba:	e03a      	b.n	8007232 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80071bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071c2:	f043 0301 	orr.w	r3, r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071ce:	68ba      	ldr	r2, [r7, #8]
 80071d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d6:	699b      	ldr	r3, [r3, #24]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10a      	bne.n	80071f2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80071dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071e0:	f383 8811 	msr	BASEPRI, r3
 80071e4:	f3bf 8f6f 	isb	sy
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	617b      	str	r3, [r7, #20]
}
 80071ee:	bf00      	nop
 80071f0:	e7fe      	b.n	80071f0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071f4:	699a      	ldr	r2, [r3, #24]
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	18d1      	adds	r1, r2, r3
 80071fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071fe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007200:	f7ff ff06 	bl	8007010 <prvInsertTimerInActiveList>
					break;
 8007204:	e015      	b.n	8007232 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007206:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007208:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d103      	bne.n	800721c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007214:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007216:	f000 fbdb 	bl	80079d0 <vPortFree>
 800721a:	e00a      	b.n	8007232 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800721c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800721e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007222:	f023 0301 	bic.w	r3, r3, #1
 8007226:	b2da      	uxtb	r2, r3
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800722e:	e000      	b.n	8007232 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8007230:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007232:	4b08      	ldr	r3, [pc, #32]	; (8007254 <prvProcessReceivedCommands+0x1c0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	1d39      	adds	r1, r7, #4
 8007238:	2200      	movs	r2, #0
 800723a:	4618      	mov	r0, r3
 800723c:	f7fe fbec 	bl	8005a18 <xQueueReceive>
 8007240:	4603      	mov	r3, r0
 8007242:	2b00      	cmp	r3, #0
 8007244:	f47f af2a 	bne.w	800709c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007248:	bf00      	nop
 800724a:	bf00      	nop
 800724c:	3730      	adds	r7, #48	; 0x30
 800724e:	46bd      	mov	sp, r7
 8007250:	bd80      	pop	{r7, pc}
 8007252:	bf00      	nop
 8007254:	20000edc 	.word	0x20000edc

08007258 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800725e:	e048      	b.n	80072f2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007260:	4b2d      	ldr	r3, [pc, #180]	; (8007318 <prvSwitchTimerLists+0xc0>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800726a:	4b2b      	ldr	r3, [pc, #172]	; (8007318 <prvSwitchTimerLists+0xc0>)
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	68db      	ldr	r3, [r3, #12]
 8007272:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3304      	adds	r3, #4
 8007278:	4618      	mov	r0, r3
 800727a:	f7fe f905 	bl	8005488 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	68f8      	ldr	r0, [r7, #12]
 8007284:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800728c:	f003 0304 	and.w	r3, r3, #4
 8007290:	2b00      	cmp	r3, #0
 8007292:	d02e      	beq.n	80072f2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	699b      	ldr	r3, [r3, #24]
 8007298:	693a      	ldr	r2, [r7, #16]
 800729a:	4413      	add	r3, r2
 800729c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d90e      	bls.n	80072c4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	68ba      	ldr	r2, [r7, #8]
 80072aa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	68fa      	ldr	r2, [r7, #12]
 80072b0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80072b2:	4b19      	ldr	r3, [pc, #100]	; (8007318 <prvSwitchTimerLists+0xc0>)
 80072b4:	681a      	ldr	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	3304      	adds	r3, #4
 80072ba:	4619      	mov	r1, r3
 80072bc:	4610      	mov	r0, r2
 80072be:	f7fe f8aa 	bl	8005416 <vListInsert>
 80072c2:	e016      	b.n	80072f2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072c4:	2300      	movs	r3, #0
 80072c6:	9300      	str	r3, [sp, #0]
 80072c8:	2300      	movs	r3, #0
 80072ca:	693a      	ldr	r2, [r7, #16]
 80072cc:	2100      	movs	r1, #0
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	f7ff fd60 	bl	8006d94 <xTimerGenericCommand>
 80072d4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d10a      	bne.n	80072f2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072e0:	f383 8811 	msr	BASEPRI, r3
 80072e4:	f3bf 8f6f 	isb	sy
 80072e8:	f3bf 8f4f 	dsb	sy
 80072ec:	603b      	str	r3, [r7, #0]
}
 80072ee:	bf00      	nop
 80072f0:	e7fe      	b.n	80072f0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072f2:	4b09      	ldr	r3, [pc, #36]	; (8007318 <prvSwitchTimerLists+0xc0>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d1b1      	bne.n	8007260 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072fc:	4b06      	ldr	r3, [pc, #24]	; (8007318 <prvSwitchTimerLists+0xc0>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007302:	4b06      	ldr	r3, [pc, #24]	; (800731c <prvSwitchTimerLists+0xc4>)
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	4a04      	ldr	r2, [pc, #16]	; (8007318 <prvSwitchTimerLists+0xc0>)
 8007308:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800730a:	4a04      	ldr	r2, [pc, #16]	; (800731c <prvSwitchTimerLists+0xc4>)
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	6013      	str	r3, [r2, #0]
}
 8007310:	bf00      	nop
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}
 8007318:	20000ed4 	.word	0x20000ed4
 800731c:	20000ed8 	.word	0x20000ed8

08007320 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007326:	f000 f965 	bl	80075f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800732a:	4b15      	ldr	r3, [pc, #84]	; (8007380 <prvCheckForValidListAndQueue+0x60>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d120      	bne.n	8007374 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007332:	4814      	ldr	r0, [pc, #80]	; (8007384 <prvCheckForValidListAndQueue+0x64>)
 8007334:	f7fe f81e 	bl	8005374 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007338:	4813      	ldr	r0, [pc, #76]	; (8007388 <prvCheckForValidListAndQueue+0x68>)
 800733a:	f7fe f81b 	bl	8005374 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800733e:	4b13      	ldr	r3, [pc, #76]	; (800738c <prvCheckForValidListAndQueue+0x6c>)
 8007340:	4a10      	ldr	r2, [pc, #64]	; (8007384 <prvCheckForValidListAndQueue+0x64>)
 8007342:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007344:	4b12      	ldr	r3, [pc, #72]	; (8007390 <prvCheckForValidListAndQueue+0x70>)
 8007346:	4a10      	ldr	r2, [pc, #64]	; (8007388 <prvCheckForValidListAndQueue+0x68>)
 8007348:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800734a:	2300      	movs	r3, #0
 800734c:	9300      	str	r3, [sp, #0]
 800734e:	4b11      	ldr	r3, [pc, #68]	; (8007394 <prvCheckForValidListAndQueue+0x74>)
 8007350:	4a11      	ldr	r2, [pc, #68]	; (8007398 <prvCheckForValidListAndQueue+0x78>)
 8007352:	2110      	movs	r1, #16
 8007354:	200a      	movs	r0, #10
 8007356:	f7fe f929 	bl	80055ac <xQueueGenericCreateStatic>
 800735a:	4603      	mov	r3, r0
 800735c:	4a08      	ldr	r2, [pc, #32]	; (8007380 <prvCheckForValidListAndQueue+0x60>)
 800735e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007360:	4b07      	ldr	r3, [pc, #28]	; (8007380 <prvCheckForValidListAndQueue+0x60>)
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d005      	beq.n	8007374 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007368:	4b05      	ldr	r3, [pc, #20]	; (8007380 <prvCheckForValidListAndQueue+0x60>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	490b      	ldr	r1, [pc, #44]	; (800739c <prvCheckForValidListAndQueue+0x7c>)
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fd42 	bl	8005df8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007374:	f000 f96e 	bl	8007654 <vPortExitCritical>
}
 8007378:	bf00      	nop
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}
 800737e:	bf00      	nop
 8007380:	20000edc 	.word	0x20000edc
 8007384:	20000eac 	.word	0x20000eac
 8007388:	20000ec0 	.word	0x20000ec0
 800738c:	20000ed4 	.word	0x20000ed4
 8007390:	20000ed8 	.word	0x20000ed8
 8007394:	20000f88 	.word	0x20000f88
 8007398:	20000ee8 	.word	0x20000ee8
 800739c:	08007f38 	.word	0x08007f38

080073a0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80073a0:	b480      	push	{r7}
 80073a2:	b085      	sub	sp, #20
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	60f8      	str	r0, [r7, #12]
 80073a8:	60b9      	str	r1, [r7, #8]
 80073aa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	3b04      	subs	r3, #4
 80073b0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80073b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	3b04      	subs	r3, #4
 80073be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073c0:	68bb      	ldr	r3, [r7, #8]
 80073c2:	f023 0201 	bic.w	r2, r3, #1
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	3b04      	subs	r3, #4
 80073ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073d0:	4a0c      	ldr	r2, [pc, #48]	; (8007404 <pxPortInitialiseStack+0x64>)
 80073d2:	68fb      	ldr	r3, [r7, #12]
 80073d4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	3b14      	subs	r3, #20
 80073da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073dc:	687a      	ldr	r2, [r7, #4]
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	3b04      	subs	r3, #4
 80073e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	f06f 0202 	mvn.w	r2, #2
 80073ee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	3b20      	subs	r3, #32
 80073f4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073f6:	68fb      	ldr	r3, [r7, #12]
}
 80073f8:	4618      	mov	r0, r3
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr
 8007404:	08007409 	.word	0x08007409

08007408 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007408:	b480      	push	{r7}
 800740a:	b085      	sub	sp, #20
 800740c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800740e:	2300      	movs	r3, #0
 8007410:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007412:	4b12      	ldr	r3, [pc, #72]	; (800745c <prvTaskExitError+0x54>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800741a:	d00a      	beq.n	8007432 <prvTaskExitError+0x2a>
	__asm volatile
 800741c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007420:	f383 8811 	msr	BASEPRI, r3
 8007424:	f3bf 8f6f 	isb	sy
 8007428:	f3bf 8f4f 	dsb	sy
 800742c:	60fb      	str	r3, [r7, #12]
}
 800742e:	bf00      	nop
 8007430:	e7fe      	b.n	8007430 <prvTaskExitError+0x28>
	__asm volatile
 8007432:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007436:	f383 8811 	msr	BASEPRI, r3
 800743a:	f3bf 8f6f 	isb	sy
 800743e:	f3bf 8f4f 	dsb	sy
 8007442:	60bb      	str	r3, [r7, #8]
}
 8007444:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007446:	bf00      	nop
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d0fc      	beq.n	8007448 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800744e:	bf00      	nop
 8007450:	bf00      	nop
 8007452:	3714      	adds	r7, #20
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr
 800745c:	20000030 	.word	0x20000030

08007460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007460:	4b07      	ldr	r3, [pc, #28]	; (8007480 <pxCurrentTCBConst2>)
 8007462:	6819      	ldr	r1, [r3, #0]
 8007464:	6808      	ldr	r0, [r1, #0]
 8007466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800746a:	f380 8809 	msr	PSP, r0
 800746e:	f3bf 8f6f 	isb	sy
 8007472:	f04f 0000 	mov.w	r0, #0
 8007476:	f380 8811 	msr	BASEPRI, r0
 800747a:	4770      	bx	lr
 800747c:	f3af 8000 	nop.w

08007480 <pxCurrentTCBConst2>:
 8007480:	200009ac 	.word	0x200009ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007484:	bf00      	nop
 8007486:	bf00      	nop

08007488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007488:	4808      	ldr	r0, [pc, #32]	; (80074ac <prvPortStartFirstTask+0x24>)
 800748a:	6800      	ldr	r0, [r0, #0]
 800748c:	6800      	ldr	r0, [r0, #0]
 800748e:	f380 8808 	msr	MSP, r0
 8007492:	f04f 0000 	mov.w	r0, #0
 8007496:	f380 8814 	msr	CONTROL, r0
 800749a:	b662      	cpsie	i
 800749c:	b661      	cpsie	f
 800749e:	f3bf 8f4f 	dsb	sy
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	df00      	svc	0
 80074a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80074aa:	bf00      	nop
 80074ac:	e000ed08 	.word	0xe000ed08

080074b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b086      	sub	sp, #24
 80074b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80074b6:	4b46      	ldr	r3, [pc, #280]	; (80075d0 <xPortStartScheduler+0x120>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a46      	ldr	r2, [pc, #280]	; (80075d4 <xPortStartScheduler+0x124>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d10a      	bne.n	80074d6 <xPortStartScheduler+0x26>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	613b      	str	r3, [r7, #16]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074d6:	4b3e      	ldr	r3, [pc, #248]	; (80075d0 <xPortStartScheduler+0x120>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a3f      	ldr	r2, [pc, #252]	; (80075d8 <xPortStartScheduler+0x128>)
 80074dc:	4293      	cmp	r3, r2
 80074de:	d10a      	bne.n	80074f6 <xPortStartScheduler+0x46>
	__asm volatile
 80074e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074e4:	f383 8811 	msr	BASEPRI, r3
 80074e8:	f3bf 8f6f 	isb	sy
 80074ec:	f3bf 8f4f 	dsb	sy
 80074f0:	60fb      	str	r3, [r7, #12]
}
 80074f2:	bf00      	nop
 80074f4:	e7fe      	b.n	80074f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074f6:	4b39      	ldr	r3, [pc, #228]	; (80075dc <xPortStartScheduler+0x12c>)
 80074f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	781b      	ldrb	r3, [r3, #0]
 80074fe:	b2db      	uxtb	r3, r3
 8007500:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	22ff      	movs	r2, #255	; 0xff
 8007506:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	781b      	ldrb	r3, [r3, #0]
 800750c:	b2db      	uxtb	r3, r3
 800750e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007518:	b2da      	uxtb	r2, r3
 800751a:	4b31      	ldr	r3, [pc, #196]	; (80075e0 <xPortStartScheduler+0x130>)
 800751c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800751e:	4b31      	ldr	r3, [pc, #196]	; (80075e4 <xPortStartScheduler+0x134>)
 8007520:	2207      	movs	r2, #7
 8007522:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007524:	e009      	b.n	800753a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007526:	4b2f      	ldr	r3, [pc, #188]	; (80075e4 <xPortStartScheduler+0x134>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3b01      	subs	r3, #1
 800752c:	4a2d      	ldr	r2, [pc, #180]	; (80075e4 <xPortStartScheduler+0x134>)
 800752e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007530:	78fb      	ldrb	r3, [r7, #3]
 8007532:	b2db      	uxtb	r3, r3
 8007534:	005b      	lsls	r3, r3, #1
 8007536:	b2db      	uxtb	r3, r3
 8007538:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	b2db      	uxtb	r3, r3
 800753e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007542:	2b80      	cmp	r3, #128	; 0x80
 8007544:	d0ef      	beq.n	8007526 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007546:	4b27      	ldr	r3, [pc, #156]	; (80075e4 <xPortStartScheduler+0x134>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f1c3 0307 	rsb	r3, r3, #7
 800754e:	2b04      	cmp	r3, #4
 8007550:	d00a      	beq.n	8007568 <xPortStartScheduler+0xb8>
	__asm volatile
 8007552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007556:	f383 8811 	msr	BASEPRI, r3
 800755a:	f3bf 8f6f 	isb	sy
 800755e:	f3bf 8f4f 	dsb	sy
 8007562:	60bb      	str	r3, [r7, #8]
}
 8007564:	bf00      	nop
 8007566:	e7fe      	b.n	8007566 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007568:	4b1e      	ldr	r3, [pc, #120]	; (80075e4 <xPortStartScheduler+0x134>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	021b      	lsls	r3, r3, #8
 800756e:	4a1d      	ldr	r2, [pc, #116]	; (80075e4 <xPortStartScheduler+0x134>)
 8007570:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007572:	4b1c      	ldr	r3, [pc, #112]	; (80075e4 <xPortStartScheduler+0x134>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800757a:	4a1a      	ldr	r2, [pc, #104]	; (80075e4 <xPortStartScheduler+0x134>)
 800757c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	b2da      	uxtb	r2, r3
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007586:	4b18      	ldr	r3, [pc, #96]	; (80075e8 <xPortStartScheduler+0x138>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	4a17      	ldr	r2, [pc, #92]	; (80075e8 <xPortStartScheduler+0x138>)
 800758c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007590:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007592:	4b15      	ldr	r3, [pc, #84]	; (80075e8 <xPortStartScheduler+0x138>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	4a14      	ldr	r2, [pc, #80]	; (80075e8 <xPortStartScheduler+0x138>)
 8007598:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800759c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800759e:	f000 f8dd 	bl	800775c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80075a2:	4b12      	ldr	r3, [pc, #72]	; (80075ec <xPortStartScheduler+0x13c>)
 80075a4:	2200      	movs	r2, #0
 80075a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80075a8:	f000 f8fc 	bl	80077a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80075ac:	4b10      	ldr	r3, [pc, #64]	; (80075f0 <xPortStartScheduler+0x140>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	4a0f      	ldr	r2, [pc, #60]	; (80075f0 <xPortStartScheduler+0x140>)
 80075b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80075b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80075b8:	f7ff ff66 	bl	8007488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80075bc:	f7ff f84c 	bl	8006658 <vTaskSwitchContext>
	prvTaskExitError();
 80075c0:	f7ff ff22 	bl	8007408 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075c4:	2300      	movs	r3, #0
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3718      	adds	r7, #24
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}
 80075ce:	bf00      	nop
 80075d0:	e000ed00 	.word	0xe000ed00
 80075d4:	410fc271 	.word	0x410fc271
 80075d8:	410fc270 	.word	0x410fc270
 80075dc:	e000e400 	.word	0xe000e400
 80075e0:	20000fd8 	.word	0x20000fd8
 80075e4:	20000fdc 	.word	0x20000fdc
 80075e8:	e000ed20 	.word	0xe000ed20
 80075ec:	20000030 	.word	0x20000030
 80075f0:	e000ef34 	.word	0xe000ef34

080075f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075f4:	b480      	push	{r7}
 80075f6:	b083      	sub	sp, #12
 80075f8:	af00      	add	r7, sp, #0
	__asm volatile
 80075fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075fe:	f383 8811 	msr	BASEPRI, r3
 8007602:	f3bf 8f6f 	isb	sy
 8007606:	f3bf 8f4f 	dsb	sy
 800760a:	607b      	str	r3, [r7, #4]
}
 800760c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800760e:	4b0f      	ldr	r3, [pc, #60]	; (800764c <vPortEnterCritical+0x58>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	4a0d      	ldr	r2, [pc, #52]	; (800764c <vPortEnterCritical+0x58>)
 8007616:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007618:	4b0c      	ldr	r3, [pc, #48]	; (800764c <vPortEnterCritical+0x58>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	2b01      	cmp	r3, #1
 800761e:	d10f      	bne.n	8007640 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007620:	4b0b      	ldr	r3, [pc, #44]	; (8007650 <vPortEnterCritical+0x5c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	b2db      	uxtb	r3, r3
 8007626:	2b00      	cmp	r3, #0
 8007628:	d00a      	beq.n	8007640 <vPortEnterCritical+0x4c>
	__asm volatile
 800762a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800762e:	f383 8811 	msr	BASEPRI, r3
 8007632:	f3bf 8f6f 	isb	sy
 8007636:	f3bf 8f4f 	dsb	sy
 800763a:	603b      	str	r3, [r7, #0]
}
 800763c:	bf00      	nop
 800763e:	e7fe      	b.n	800763e <vPortEnterCritical+0x4a>
	}
}
 8007640:	bf00      	nop
 8007642:	370c      	adds	r7, #12
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr
 800764c:	20000030 	.word	0x20000030
 8007650:	e000ed04 	.word	0xe000ed04

08007654 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800765a:	4b12      	ldr	r3, [pc, #72]	; (80076a4 <vPortExitCritical+0x50>)
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10a      	bne.n	8007678 <vPortExitCritical+0x24>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	607b      	str	r3, [r7, #4]
}
 8007674:	bf00      	nop
 8007676:	e7fe      	b.n	8007676 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007678:	4b0a      	ldr	r3, [pc, #40]	; (80076a4 <vPortExitCritical+0x50>)
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	3b01      	subs	r3, #1
 800767e:	4a09      	ldr	r2, [pc, #36]	; (80076a4 <vPortExitCritical+0x50>)
 8007680:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007682:	4b08      	ldr	r3, [pc, #32]	; (80076a4 <vPortExitCritical+0x50>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d105      	bne.n	8007696 <vPortExitCritical+0x42>
 800768a:	2300      	movs	r3, #0
 800768c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800768e:	683b      	ldr	r3, [r7, #0]
 8007690:	f383 8811 	msr	BASEPRI, r3
}
 8007694:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007696:	bf00      	nop
 8007698:	370c      	adds	r7, #12
 800769a:	46bd      	mov	sp, r7
 800769c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a0:	4770      	bx	lr
 80076a2:	bf00      	nop
 80076a4:	20000030 	.word	0x20000030
	...

080076b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80076b0:	f3ef 8009 	mrs	r0, PSP
 80076b4:	f3bf 8f6f 	isb	sy
 80076b8:	4b15      	ldr	r3, [pc, #84]	; (8007710 <pxCurrentTCBConst>)
 80076ba:	681a      	ldr	r2, [r3, #0]
 80076bc:	f01e 0f10 	tst.w	lr, #16
 80076c0:	bf08      	it	eq
 80076c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076ca:	6010      	str	r0, [r2, #0]
 80076cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076d4:	f380 8811 	msr	BASEPRI, r0
 80076d8:	f3bf 8f4f 	dsb	sy
 80076dc:	f3bf 8f6f 	isb	sy
 80076e0:	f7fe ffba 	bl	8006658 <vTaskSwitchContext>
 80076e4:	f04f 0000 	mov.w	r0, #0
 80076e8:	f380 8811 	msr	BASEPRI, r0
 80076ec:	bc09      	pop	{r0, r3}
 80076ee:	6819      	ldr	r1, [r3, #0]
 80076f0:	6808      	ldr	r0, [r1, #0]
 80076f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f6:	f01e 0f10 	tst.w	lr, #16
 80076fa:	bf08      	it	eq
 80076fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007700:	f380 8809 	msr	PSP, r0
 8007704:	f3bf 8f6f 	isb	sy
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	f3af 8000 	nop.w

08007710 <pxCurrentTCBConst>:
 8007710:	200009ac 	.word	0x200009ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007714:	bf00      	nop
 8007716:	bf00      	nop

08007718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af00      	add	r7, sp, #0
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	607b      	str	r3, [r7, #4]
}
 8007730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007732:	f7fe fed7 	bl	80064e4 <xTaskIncrementTick>
 8007736:	4603      	mov	r3, r0
 8007738:	2b00      	cmp	r3, #0
 800773a:	d003      	beq.n	8007744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800773c:	4b06      	ldr	r3, [pc, #24]	; (8007758 <xPortSysTickHandler+0x40>)
 800773e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007742:	601a      	str	r2, [r3, #0]
 8007744:	2300      	movs	r3, #0
 8007746:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007748:	683b      	ldr	r3, [r7, #0]
 800774a:	f383 8811 	msr	BASEPRI, r3
}
 800774e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007750:	bf00      	nop
 8007752:	3708      	adds	r7, #8
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	e000ed04 	.word	0xe000ed04

0800775c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800775c:	b480      	push	{r7}
 800775e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007760:	4b0b      	ldr	r3, [pc, #44]	; (8007790 <vPortSetupTimerInterrupt+0x34>)
 8007762:	2200      	movs	r2, #0
 8007764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007766:	4b0b      	ldr	r3, [pc, #44]	; (8007794 <vPortSetupTimerInterrupt+0x38>)
 8007768:	2200      	movs	r2, #0
 800776a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800776c:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <vPortSetupTimerInterrupt+0x3c>)
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	4a0a      	ldr	r2, [pc, #40]	; (800779c <vPortSetupTimerInterrupt+0x40>)
 8007772:	fba2 2303 	umull	r2, r3, r2, r3
 8007776:	099b      	lsrs	r3, r3, #6
 8007778:	4a09      	ldr	r2, [pc, #36]	; (80077a0 <vPortSetupTimerInterrupt+0x44>)
 800777a:	3b01      	subs	r3, #1
 800777c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800777e:	4b04      	ldr	r3, [pc, #16]	; (8007790 <vPortSetupTimerInterrupt+0x34>)
 8007780:	2207      	movs	r2, #7
 8007782:	601a      	str	r2, [r3, #0]
}
 8007784:	bf00      	nop
 8007786:	46bd      	mov	sp, r7
 8007788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778c:	4770      	bx	lr
 800778e:	bf00      	nop
 8007790:	e000e010 	.word	0xe000e010
 8007794:	e000e018 	.word	0xe000e018
 8007798:	20000024 	.word	0x20000024
 800779c:	10624dd3 	.word	0x10624dd3
 80077a0:	e000e014 	.word	0xe000e014

080077a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80077a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80077b4 <vPortEnableVFP+0x10>
 80077a8:	6801      	ldr	r1, [r0, #0]
 80077aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80077ae:	6001      	str	r1, [r0, #0]
 80077b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80077b2:	bf00      	nop
 80077b4:	e000ed88 	.word	0xe000ed88

080077b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80077b8:	b480      	push	{r7}
 80077ba:	b085      	sub	sp, #20
 80077bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80077be:	f3ef 8305 	mrs	r3, IPSR
 80077c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2b0f      	cmp	r3, #15
 80077c8:	d914      	bls.n	80077f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077ca:	4a17      	ldr	r2, [pc, #92]	; (8007828 <vPortValidateInterruptPriority+0x70>)
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	4413      	add	r3, r2
 80077d0:	781b      	ldrb	r3, [r3, #0]
 80077d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077d4:	4b15      	ldr	r3, [pc, #84]	; (800782c <vPortValidateInterruptPriority+0x74>)
 80077d6:	781b      	ldrb	r3, [r3, #0]
 80077d8:	7afa      	ldrb	r2, [r7, #11]
 80077da:	429a      	cmp	r2, r3
 80077dc:	d20a      	bcs.n	80077f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e2:	f383 8811 	msr	BASEPRI, r3
 80077e6:	f3bf 8f6f 	isb	sy
 80077ea:	f3bf 8f4f 	dsb	sy
 80077ee:	607b      	str	r3, [r7, #4]
}
 80077f0:	bf00      	nop
 80077f2:	e7fe      	b.n	80077f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077f4:	4b0e      	ldr	r3, [pc, #56]	; (8007830 <vPortValidateInterruptPriority+0x78>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077fc:	4b0d      	ldr	r3, [pc, #52]	; (8007834 <vPortValidateInterruptPriority+0x7c>)
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	429a      	cmp	r2, r3
 8007802:	d90a      	bls.n	800781a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	f383 8811 	msr	BASEPRI, r3
 800780c:	f3bf 8f6f 	isb	sy
 8007810:	f3bf 8f4f 	dsb	sy
 8007814:	603b      	str	r3, [r7, #0]
}
 8007816:	bf00      	nop
 8007818:	e7fe      	b.n	8007818 <vPortValidateInterruptPriority+0x60>
	}
 800781a:	bf00      	nop
 800781c:	3714      	adds	r7, #20
 800781e:	46bd      	mov	sp, r7
 8007820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007824:	4770      	bx	lr
 8007826:	bf00      	nop
 8007828:	e000e3f0 	.word	0xe000e3f0
 800782c:	20000fd8 	.word	0x20000fd8
 8007830:	e000ed0c 	.word	0xe000ed0c
 8007834:	20000fdc 	.word	0x20000fdc

08007838 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b08a      	sub	sp, #40	; 0x28
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007840:	2300      	movs	r3, #0
 8007842:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007844:	f7fe fd92 	bl	800636c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007848:	4b5b      	ldr	r3, [pc, #364]	; (80079b8 <pvPortMalloc+0x180>)
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d101      	bne.n	8007854 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007850:	f000 f920 	bl	8007a94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007854:	4b59      	ldr	r3, [pc, #356]	; (80079bc <pvPortMalloc+0x184>)
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 8093 	bne.w	8007988 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d01d      	beq.n	80078a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007868:	2208      	movs	r2, #8
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	4413      	add	r3, r2
 800786e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f003 0307 	and.w	r3, r3, #7
 8007876:	2b00      	cmp	r3, #0
 8007878:	d014      	beq.n	80078a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f023 0307 	bic.w	r3, r3, #7
 8007880:	3308      	adds	r3, #8
 8007882:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	f003 0307 	and.w	r3, r3, #7
 800788a:	2b00      	cmp	r3, #0
 800788c:	d00a      	beq.n	80078a4 <pvPortMalloc+0x6c>
	__asm volatile
 800788e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007892:	f383 8811 	msr	BASEPRI, r3
 8007896:	f3bf 8f6f 	isb	sy
 800789a:	f3bf 8f4f 	dsb	sy
 800789e:	617b      	str	r3, [r7, #20]
}
 80078a0:	bf00      	nop
 80078a2:	e7fe      	b.n	80078a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d06e      	beq.n	8007988 <pvPortMalloc+0x150>
 80078aa:	4b45      	ldr	r3, [pc, #276]	; (80079c0 <pvPortMalloc+0x188>)
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d869      	bhi.n	8007988 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80078b4:	4b43      	ldr	r3, [pc, #268]	; (80079c4 <pvPortMalloc+0x18c>)
 80078b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80078b8:	4b42      	ldr	r3, [pc, #264]	; (80079c4 <pvPortMalloc+0x18c>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078be:	e004      	b.n	80078ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078cc:	685b      	ldr	r3, [r3, #4]
 80078ce:	687a      	ldr	r2, [r7, #4]
 80078d0:	429a      	cmp	r2, r3
 80078d2:	d903      	bls.n	80078dc <pvPortMalloc+0xa4>
 80078d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1f1      	bne.n	80078c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078dc:	4b36      	ldr	r3, [pc, #216]	; (80079b8 <pvPortMalloc+0x180>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d050      	beq.n	8007988 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078e6:	6a3b      	ldr	r3, [r7, #32]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2208      	movs	r2, #8
 80078ec:	4413      	add	r3, r2
 80078ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078fa:	685a      	ldr	r2, [r3, #4]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	1ad2      	subs	r2, r2, r3
 8007900:	2308      	movs	r3, #8
 8007902:	005b      	lsls	r3, r3, #1
 8007904:	429a      	cmp	r2, r3
 8007906:	d91f      	bls.n	8007948 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007908:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	4413      	add	r3, r2
 800790e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	f003 0307 	and.w	r3, r3, #7
 8007916:	2b00      	cmp	r3, #0
 8007918:	d00a      	beq.n	8007930 <pvPortMalloc+0xf8>
	__asm volatile
 800791a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800791e:	f383 8811 	msr	BASEPRI, r3
 8007922:	f3bf 8f6f 	isb	sy
 8007926:	f3bf 8f4f 	dsb	sy
 800792a:	613b      	str	r3, [r7, #16]
}
 800792c:	bf00      	nop
 800792e:	e7fe      	b.n	800792e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007932:	685a      	ldr	r2, [r3, #4]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	1ad2      	subs	r2, r2, r3
 8007938:	69bb      	ldr	r3, [r7, #24]
 800793a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800793c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800793e:	687a      	ldr	r2, [r7, #4]
 8007940:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007942:	69b8      	ldr	r0, [r7, #24]
 8007944:	f000 f908 	bl	8007b58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007948:	4b1d      	ldr	r3, [pc, #116]	; (80079c0 <pvPortMalloc+0x188>)
 800794a:	681a      	ldr	r2, [r3, #0]
 800794c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794e:	685b      	ldr	r3, [r3, #4]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	4a1b      	ldr	r2, [pc, #108]	; (80079c0 <pvPortMalloc+0x188>)
 8007954:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007956:	4b1a      	ldr	r3, [pc, #104]	; (80079c0 <pvPortMalloc+0x188>)
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	4b1b      	ldr	r3, [pc, #108]	; (80079c8 <pvPortMalloc+0x190>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	429a      	cmp	r2, r3
 8007960:	d203      	bcs.n	800796a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007962:	4b17      	ldr	r3, [pc, #92]	; (80079c0 <pvPortMalloc+0x188>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	4a18      	ldr	r2, [pc, #96]	; (80079c8 <pvPortMalloc+0x190>)
 8007968:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800796a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796c:	685a      	ldr	r2, [r3, #4]
 800796e:	4b13      	ldr	r3, [pc, #76]	; (80079bc <pvPortMalloc+0x184>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	431a      	orrs	r2, r3
 8007974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007976:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	2200      	movs	r2, #0
 800797c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800797e:	4b13      	ldr	r3, [pc, #76]	; (80079cc <pvPortMalloc+0x194>)
 8007980:	681b      	ldr	r3, [r3, #0]
 8007982:	3301      	adds	r3, #1
 8007984:	4a11      	ldr	r2, [pc, #68]	; (80079cc <pvPortMalloc+0x194>)
 8007986:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007988:	f7fe fcfe 	bl	8006388 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	f003 0307 	and.w	r3, r3, #7
 8007992:	2b00      	cmp	r3, #0
 8007994:	d00a      	beq.n	80079ac <pvPortMalloc+0x174>
	__asm volatile
 8007996:	f04f 0350 	mov.w	r3, #80	; 0x50
 800799a:	f383 8811 	msr	BASEPRI, r3
 800799e:	f3bf 8f6f 	isb	sy
 80079a2:	f3bf 8f4f 	dsb	sy
 80079a6:	60fb      	str	r3, [r7, #12]
}
 80079a8:	bf00      	nop
 80079aa:	e7fe      	b.n	80079aa <pvPortMalloc+0x172>
	return pvReturn;
 80079ac:	69fb      	ldr	r3, [r7, #28]
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3728      	adds	r7, #40	; 0x28
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
 80079b6:	bf00      	nop
 80079b8:	20004be8 	.word	0x20004be8
 80079bc:	20004bfc 	.word	0x20004bfc
 80079c0:	20004bec 	.word	0x20004bec
 80079c4:	20004be0 	.word	0x20004be0
 80079c8:	20004bf0 	.word	0x20004bf0
 80079cc:	20004bf4 	.word	0x20004bf4

080079d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b086      	sub	sp, #24
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d04d      	beq.n	8007a7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079e2:	2308      	movs	r3, #8
 80079e4:	425b      	negs	r3, r3
 80079e6:	697a      	ldr	r2, [r7, #20]
 80079e8:	4413      	add	r3, r2
 80079ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079ec:	697b      	ldr	r3, [r7, #20]
 80079ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079f0:	693b      	ldr	r3, [r7, #16]
 80079f2:	685a      	ldr	r2, [r3, #4]
 80079f4:	4b24      	ldr	r3, [pc, #144]	; (8007a88 <vPortFree+0xb8>)
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	4013      	ands	r3, r2
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10a      	bne.n	8007a14 <vPortFree+0x44>
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	60fb      	str	r3, [r7, #12]
}
 8007a10:	bf00      	nop
 8007a12:	e7fe      	b.n	8007a12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007a14:	693b      	ldr	r3, [r7, #16]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d00a      	beq.n	8007a32 <vPortFree+0x62>
	__asm volatile
 8007a1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a20:	f383 8811 	msr	BASEPRI, r3
 8007a24:	f3bf 8f6f 	isb	sy
 8007a28:	f3bf 8f4f 	dsb	sy
 8007a2c:	60bb      	str	r3, [r7, #8]
}
 8007a2e:	bf00      	nop
 8007a30:	e7fe      	b.n	8007a30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	685a      	ldr	r2, [r3, #4]
 8007a36:	4b14      	ldr	r3, [pc, #80]	; (8007a88 <vPortFree+0xb8>)
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d01e      	beq.n	8007a7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a40:	693b      	ldr	r3, [r7, #16]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d11a      	bne.n	8007a7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a48:	693b      	ldr	r3, [r7, #16]
 8007a4a:	685a      	ldr	r2, [r3, #4]
 8007a4c:	4b0e      	ldr	r3, [pc, #56]	; (8007a88 <vPortFree+0xb8>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	43db      	mvns	r3, r3
 8007a52:	401a      	ands	r2, r3
 8007a54:	693b      	ldr	r3, [r7, #16]
 8007a56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a58:	f7fe fc88 	bl	800636c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a5c:	693b      	ldr	r3, [r7, #16]
 8007a5e:	685a      	ldr	r2, [r3, #4]
 8007a60:	4b0a      	ldr	r3, [pc, #40]	; (8007a8c <vPortFree+0xbc>)
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	4413      	add	r3, r2
 8007a66:	4a09      	ldr	r2, [pc, #36]	; (8007a8c <vPortFree+0xbc>)
 8007a68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a6a:	6938      	ldr	r0, [r7, #16]
 8007a6c:	f000 f874 	bl	8007b58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a70:	4b07      	ldr	r3, [pc, #28]	; (8007a90 <vPortFree+0xc0>)
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	3301      	adds	r3, #1
 8007a76:	4a06      	ldr	r2, [pc, #24]	; (8007a90 <vPortFree+0xc0>)
 8007a78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a7a:	f7fe fc85 	bl	8006388 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a7e:	bf00      	nop
 8007a80:	3718      	adds	r7, #24
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	20004bfc 	.word	0x20004bfc
 8007a8c:	20004bec 	.word	0x20004bec
 8007a90:	20004bf8 	.word	0x20004bf8

08007a94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a94:	b480      	push	{r7}
 8007a96:	b085      	sub	sp, #20
 8007a98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a9a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007a9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007aa0:	4b27      	ldr	r3, [pc, #156]	; (8007b40 <prvHeapInit+0xac>)
 8007aa2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	f003 0307 	and.w	r3, r3, #7
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d00c      	beq.n	8007ac8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	3307      	adds	r3, #7
 8007ab2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f023 0307 	bic.w	r3, r3, #7
 8007aba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007abc:	68ba      	ldr	r2, [r7, #8]
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	1ad3      	subs	r3, r2, r3
 8007ac2:	4a1f      	ldr	r2, [pc, #124]	; (8007b40 <prvHeapInit+0xac>)
 8007ac4:	4413      	add	r3, r2
 8007ac6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007acc:	4a1d      	ldr	r2, [pc, #116]	; (8007b44 <prvHeapInit+0xb0>)
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ad2:	4b1c      	ldr	r3, [pc, #112]	; (8007b44 <prvHeapInit+0xb0>)
 8007ad4:	2200      	movs	r2, #0
 8007ad6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	4413      	add	r3, r2
 8007ade:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ae0:	2208      	movs	r2, #8
 8007ae2:	68fb      	ldr	r3, [r7, #12]
 8007ae4:	1a9b      	subs	r3, r3, r2
 8007ae6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	f023 0307 	bic.w	r3, r3, #7
 8007aee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	4a15      	ldr	r2, [pc, #84]	; (8007b48 <prvHeapInit+0xb4>)
 8007af4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007af6:	4b14      	ldr	r3, [pc, #80]	; (8007b48 <prvHeapInit+0xb4>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	2200      	movs	r2, #0
 8007afc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007afe:	4b12      	ldr	r3, [pc, #72]	; (8007b48 <prvHeapInit+0xb4>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2200      	movs	r2, #0
 8007b04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	68fa      	ldr	r2, [r7, #12]
 8007b0e:	1ad2      	subs	r2, r2, r3
 8007b10:	683b      	ldr	r3, [r7, #0]
 8007b12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007b14:	4b0c      	ldr	r3, [pc, #48]	; (8007b48 <prvHeapInit+0xb4>)
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	683b      	ldr	r3, [r7, #0]
 8007b1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b1c:	683b      	ldr	r3, [r7, #0]
 8007b1e:	685b      	ldr	r3, [r3, #4]
 8007b20:	4a0a      	ldr	r2, [pc, #40]	; (8007b4c <prvHeapInit+0xb8>)
 8007b22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	685b      	ldr	r3, [r3, #4]
 8007b28:	4a09      	ldr	r2, [pc, #36]	; (8007b50 <prvHeapInit+0xbc>)
 8007b2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b2c:	4b09      	ldr	r3, [pc, #36]	; (8007b54 <prvHeapInit+0xc0>)
 8007b2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b32:	601a      	str	r2, [r3, #0]
}
 8007b34:	bf00      	nop
 8007b36:	3714      	adds	r7, #20
 8007b38:	46bd      	mov	sp, r7
 8007b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3e:	4770      	bx	lr
 8007b40:	20000fe0 	.word	0x20000fe0
 8007b44:	20004be0 	.word	0x20004be0
 8007b48:	20004be8 	.word	0x20004be8
 8007b4c:	20004bf0 	.word	0x20004bf0
 8007b50:	20004bec 	.word	0x20004bec
 8007b54:	20004bfc 	.word	0x20004bfc

08007b58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b58:	b480      	push	{r7}
 8007b5a:	b085      	sub	sp, #20
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b60:	4b28      	ldr	r3, [pc, #160]	; (8007c04 <prvInsertBlockIntoFreeList+0xac>)
 8007b62:	60fb      	str	r3, [r7, #12]
 8007b64:	e002      	b.n	8007b6c <prvInsertBlockIntoFreeList+0x14>
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	429a      	cmp	r2, r3
 8007b74:	d8f7      	bhi.n	8007b66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	685b      	ldr	r3, [r3, #4]
 8007b7e:	68ba      	ldr	r2, [r7, #8]
 8007b80:	4413      	add	r3, r2
 8007b82:	687a      	ldr	r2, [r7, #4]
 8007b84:	429a      	cmp	r2, r3
 8007b86:	d108      	bne.n	8007b9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	685a      	ldr	r2, [r3, #4]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	685b      	ldr	r3, [r3, #4]
 8007b90:	441a      	add	r2, r3
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	685b      	ldr	r3, [r3, #4]
 8007ba2:	68ba      	ldr	r2, [r7, #8]
 8007ba4:	441a      	add	r2, r3
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	429a      	cmp	r2, r3
 8007bac:	d118      	bne.n	8007be0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b15      	ldr	r3, [pc, #84]	; (8007c08 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	429a      	cmp	r2, r3
 8007bb8:	d00d      	beq.n	8007bd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	685a      	ldr	r2, [r3, #4]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	685b      	ldr	r3, [r3, #4]
 8007bc4:	441a      	add	r2, r3
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007bca:	68fb      	ldr	r3, [r7, #12]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	681a      	ldr	r2, [r3, #0]
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	601a      	str	r2, [r3, #0]
 8007bd4:	e008      	b.n	8007be8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bd6:	4b0c      	ldr	r3, [pc, #48]	; (8007c08 <prvInsertBlockIntoFreeList+0xb0>)
 8007bd8:	681a      	ldr	r2, [r3, #0]
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	601a      	str	r2, [r3, #0]
 8007bde:	e003      	b.n	8007be8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681a      	ldr	r2, [r3, #0]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007be8:	68fa      	ldr	r2, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	429a      	cmp	r2, r3
 8007bee:	d002      	beq.n	8007bf6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	687a      	ldr	r2, [r7, #4]
 8007bf4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bf6:	bf00      	nop
 8007bf8:	3714      	adds	r7, #20
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	20004be0 	.word	0x20004be0
 8007c08:	20004be8 	.word	0x20004be8

08007c0c <memset>:
 8007c0c:	4402      	add	r2, r0
 8007c0e:	4603      	mov	r3, r0
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d100      	bne.n	8007c16 <memset+0xa>
 8007c14:	4770      	bx	lr
 8007c16:	f803 1b01 	strb.w	r1, [r3], #1
 8007c1a:	e7f9      	b.n	8007c10 <memset+0x4>

08007c1c <_reclaim_reent>:
 8007c1c:	4b29      	ldr	r3, [pc, #164]	; (8007cc4 <_reclaim_reent+0xa8>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	4283      	cmp	r3, r0
 8007c22:	b570      	push	{r4, r5, r6, lr}
 8007c24:	4604      	mov	r4, r0
 8007c26:	d04b      	beq.n	8007cc0 <_reclaim_reent+0xa4>
 8007c28:	69c3      	ldr	r3, [r0, #28]
 8007c2a:	b143      	cbz	r3, 8007c3e <_reclaim_reent+0x22>
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d144      	bne.n	8007cbc <_reclaim_reent+0xa0>
 8007c32:	69e3      	ldr	r3, [r4, #28]
 8007c34:	6819      	ldr	r1, [r3, #0]
 8007c36:	b111      	cbz	r1, 8007c3e <_reclaim_reent+0x22>
 8007c38:	4620      	mov	r0, r4
 8007c3a:	f000 f879 	bl	8007d30 <_free_r>
 8007c3e:	6961      	ldr	r1, [r4, #20]
 8007c40:	b111      	cbz	r1, 8007c48 <_reclaim_reent+0x2c>
 8007c42:	4620      	mov	r0, r4
 8007c44:	f000 f874 	bl	8007d30 <_free_r>
 8007c48:	69e1      	ldr	r1, [r4, #28]
 8007c4a:	b111      	cbz	r1, 8007c52 <_reclaim_reent+0x36>
 8007c4c:	4620      	mov	r0, r4
 8007c4e:	f000 f86f 	bl	8007d30 <_free_r>
 8007c52:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007c54:	b111      	cbz	r1, 8007c5c <_reclaim_reent+0x40>
 8007c56:	4620      	mov	r0, r4
 8007c58:	f000 f86a 	bl	8007d30 <_free_r>
 8007c5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007c5e:	b111      	cbz	r1, 8007c66 <_reclaim_reent+0x4a>
 8007c60:	4620      	mov	r0, r4
 8007c62:	f000 f865 	bl	8007d30 <_free_r>
 8007c66:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007c68:	b111      	cbz	r1, 8007c70 <_reclaim_reent+0x54>
 8007c6a:	4620      	mov	r0, r4
 8007c6c:	f000 f860 	bl	8007d30 <_free_r>
 8007c70:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007c72:	b111      	cbz	r1, 8007c7a <_reclaim_reent+0x5e>
 8007c74:	4620      	mov	r0, r4
 8007c76:	f000 f85b 	bl	8007d30 <_free_r>
 8007c7a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8007c7c:	b111      	cbz	r1, 8007c84 <_reclaim_reent+0x68>
 8007c7e:	4620      	mov	r0, r4
 8007c80:	f000 f856 	bl	8007d30 <_free_r>
 8007c84:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8007c86:	b111      	cbz	r1, 8007c8e <_reclaim_reent+0x72>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f000 f851 	bl	8007d30 <_free_r>
 8007c8e:	6a23      	ldr	r3, [r4, #32]
 8007c90:	b1b3      	cbz	r3, 8007cc0 <_reclaim_reent+0xa4>
 8007c92:	4620      	mov	r0, r4
 8007c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c98:	4718      	bx	r3
 8007c9a:	5949      	ldr	r1, [r1, r5]
 8007c9c:	b941      	cbnz	r1, 8007cb0 <_reclaim_reent+0x94>
 8007c9e:	3504      	adds	r5, #4
 8007ca0:	69e3      	ldr	r3, [r4, #28]
 8007ca2:	2d80      	cmp	r5, #128	; 0x80
 8007ca4:	68d9      	ldr	r1, [r3, #12]
 8007ca6:	d1f8      	bne.n	8007c9a <_reclaim_reent+0x7e>
 8007ca8:	4620      	mov	r0, r4
 8007caa:	f000 f841 	bl	8007d30 <_free_r>
 8007cae:	e7c0      	b.n	8007c32 <_reclaim_reent+0x16>
 8007cb0:	680e      	ldr	r6, [r1, #0]
 8007cb2:	4620      	mov	r0, r4
 8007cb4:	f000 f83c 	bl	8007d30 <_free_r>
 8007cb8:	4631      	mov	r1, r6
 8007cba:	e7ef      	b.n	8007c9c <_reclaim_reent+0x80>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	e7ef      	b.n	8007ca0 <_reclaim_reent+0x84>
 8007cc0:	bd70      	pop	{r4, r5, r6, pc}
 8007cc2:	bf00      	nop
 8007cc4:	20000080 	.word	0x20000080

08007cc8 <__libc_init_array>:
 8007cc8:	b570      	push	{r4, r5, r6, lr}
 8007cca:	4d0d      	ldr	r5, [pc, #52]	; (8007d00 <__libc_init_array+0x38>)
 8007ccc:	4c0d      	ldr	r4, [pc, #52]	; (8007d04 <__libc_init_array+0x3c>)
 8007cce:	1b64      	subs	r4, r4, r5
 8007cd0:	10a4      	asrs	r4, r4, #2
 8007cd2:	2600      	movs	r6, #0
 8007cd4:	42a6      	cmp	r6, r4
 8007cd6:	d109      	bne.n	8007cec <__libc_init_array+0x24>
 8007cd8:	4d0b      	ldr	r5, [pc, #44]	; (8007d08 <__libc_init_array+0x40>)
 8007cda:	4c0c      	ldr	r4, [pc, #48]	; (8007d0c <__libc_init_array+0x44>)
 8007cdc:	f000 f880 	bl	8007de0 <_init>
 8007ce0:	1b64      	subs	r4, r4, r5
 8007ce2:	10a4      	asrs	r4, r4, #2
 8007ce4:	2600      	movs	r6, #0
 8007ce6:	42a6      	cmp	r6, r4
 8007ce8:	d105      	bne.n	8007cf6 <__libc_init_array+0x2e>
 8007cea:	bd70      	pop	{r4, r5, r6, pc}
 8007cec:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cf0:	4798      	blx	r3
 8007cf2:	3601      	adds	r6, #1
 8007cf4:	e7ee      	b.n	8007cd4 <__libc_init_array+0xc>
 8007cf6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cfa:	4798      	blx	r3
 8007cfc:	3601      	adds	r6, #1
 8007cfe:	e7f2      	b.n	8007ce6 <__libc_init_array+0x1e>
 8007d00:	080128c0 	.word	0x080128c0
 8007d04:	080128c0 	.word	0x080128c0
 8007d08:	080128c0 	.word	0x080128c0
 8007d0c:	080128c4 	.word	0x080128c4

08007d10 <__retarget_lock_acquire_recursive>:
 8007d10:	4770      	bx	lr

08007d12 <__retarget_lock_release_recursive>:
 8007d12:	4770      	bx	lr

08007d14 <memcpy>:
 8007d14:	440a      	add	r2, r1
 8007d16:	4291      	cmp	r1, r2
 8007d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8007d1c:	d100      	bne.n	8007d20 <memcpy+0xc>
 8007d1e:	4770      	bx	lr
 8007d20:	b510      	push	{r4, lr}
 8007d22:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d26:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d2a:	4291      	cmp	r1, r2
 8007d2c:	d1f9      	bne.n	8007d22 <memcpy+0xe>
 8007d2e:	bd10      	pop	{r4, pc}

08007d30 <_free_r>:
 8007d30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007d32:	2900      	cmp	r1, #0
 8007d34:	d044      	beq.n	8007dc0 <_free_r+0x90>
 8007d36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d3a:	9001      	str	r0, [sp, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	f1a1 0404 	sub.w	r4, r1, #4
 8007d42:	bfb8      	it	lt
 8007d44:	18e4      	addlt	r4, r4, r3
 8007d46:	f000 f83f 	bl	8007dc8 <__malloc_lock>
 8007d4a:	4a1e      	ldr	r2, [pc, #120]	; (8007dc4 <_free_r+0x94>)
 8007d4c:	9801      	ldr	r0, [sp, #4]
 8007d4e:	6813      	ldr	r3, [r2, #0]
 8007d50:	b933      	cbnz	r3, 8007d60 <_free_r+0x30>
 8007d52:	6063      	str	r3, [r4, #4]
 8007d54:	6014      	str	r4, [r2, #0]
 8007d56:	b003      	add	sp, #12
 8007d58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007d5c:	f000 b83a 	b.w	8007dd4 <__malloc_unlock>
 8007d60:	42a3      	cmp	r3, r4
 8007d62:	d908      	bls.n	8007d76 <_free_r+0x46>
 8007d64:	6825      	ldr	r5, [r4, #0]
 8007d66:	1961      	adds	r1, r4, r5
 8007d68:	428b      	cmp	r3, r1
 8007d6a:	bf01      	itttt	eq
 8007d6c:	6819      	ldreq	r1, [r3, #0]
 8007d6e:	685b      	ldreq	r3, [r3, #4]
 8007d70:	1949      	addeq	r1, r1, r5
 8007d72:	6021      	streq	r1, [r4, #0]
 8007d74:	e7ed      	b.n	8007d52 <_free_r+0x22>
 8007d76:	461a      	mov	r2, r3
 8007d78:	685b      	ldr	r3, [r3, #4]
 8007d7a:	b10b      	cbz	r3, 8007d80 <_free_r+0x50>
 8007d7c:	42a3      	cmp	r3, r4
 8007d7e:	d9fa      	bls.n	8007d76 <_free_r+0x46>
 8007d80:	6811      	ldr	r1, [r2, #0]
 8007d82:	1855      	adds	r5, r2, r1
 8007d84:	42a5      	cmp	r5, r4
 8007d86:	d10b      	bne.n	8007da0 <_free_r+0x70>
 8007d88:	6824      	ldr	r4, [r4, #0]
 8007d8a:	4421      	add	r1, r4
 8007d8c:	1854      	adds	r4, r2, r1
 8007d8e:	42a3      	cmp	r3, r4
 8007d90:	6011      	str	r1, [r2, #0]
 8007d92:	d1e0      	bne.n	8007d56 <_free_r+0x26>
 8007d94:	681c      	ldr	r4, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	6053      	str	r3, [r2, #4]
 8007d9a:	440c      	add	r4, r1
 8007d9c:	6014      	str	r4, [r2, #0]
 8007d9e:	e7da      	b.n	8007d56 <_free_r+0x26>
 8007da0:	d902      	bls.n	8007da8 <_free_r+0x78>
 8007da2:	230c      	movs	r3, #12
 8007da4:	6003      	str	r3, [r0, #0]
 8007da6:	e7d6      	b.n	8007d56 <_free_r+0x26>
 8007da8:	6825      	ldr	r5, [r4, #0]
 8007daa:	1961      	adds	r1, r4, r5
 8007dac:	428b      	cmp	r3, r1
 8007dae:	bf04      	itt	eq
 8007db0:	6819      	ldreq	r1, [r3, #0]
 8007db2:	685b      	ldreq	r3, [r3, #4]
 8007db4:	6063      	str	r3, [r4, #4]
 8007db6:	bf04      	itt	eq
 8007db8:	1949      	addeq	r1, r1, r5
 8007dba:	6021      	streq	r1, [r4, #0]
 8007dbc:	6054      	str	r4, [r2, #4]
 8007dbe:	e7ca      	b.n	8007d56 <_free_r+0x26>
 8007dc0:	b003      	add	sp, #12
 8007dc2:	bd30      	pop	{r4, r5, pc}
 8007dc4:	20004d3c 	.word	0x20004d3c

08007dc8 <__malloc_lock>:
 8007dc8:	4801      	ldr	r0, [pc, #4]	; (8007dd0 <__malloc_lock+0x8>)
 8007dca:	f7ff bfa1 	b.w	8007d10 <__retarget_lock_acquire_recursive>
 8007dce:	bf00      	nop
 8007dd0:	20004d38 	.word	0x20004d38

08007dd4 <__malloc_unlock>:
 8007dd4:	4801      	ldr	r0, [pc, #4]	; (8007ddc <__malloc_unlock+0x8>)
 8007dd6:	f7ff bf9c 	b.w	8007d12 <__retarget_lock_release_recursive>
 8007dda:	bf00      	nop
 8007ddc:	20004d38 	.word	0x20004d38

08007de0 <_init>:
 8007de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007de2:	bf00      	nop
 8007de4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007de6:	bc08      	pop	{r3}
 8007de8:	469e      	mov	lr, r3
 8007dea:	4770      	bx	lr

08007dec <_fini>:
 8007dec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dee:	bf00      	nop
 8007df0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007df2:	bc08      	pop	{r3}
 8007df4:	469e      	mov	lr, r3
 8007df6:	4770      	bx	lr
